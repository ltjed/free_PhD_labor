[
    {
        "Name": "adaptive_sparse_autoencoders",
        "Title": "Adaptive Computation in Sparse Autoencoders",
        "Experiment": "1. Implement Feature Choice and Mutual Choice sparsifying activation functions\n2. Add aux_zipf_loss and aux_k_loss auxiliary losses\n3. Train SAEs with new activation functions and losses on GPT-2 sized residual stream activations\n4. Compare performance (sparsity, reconstruction error, model loss) and feature utilization against baseline TopK SAEs\n5. Analyze distribution of features per token and feature densities\n6. Implement phased training with Mutual Choice followed by Feature Choice",
        "Technical_Details": "The paper proposes two novel sparse autoencoder (SAE) variants: Feature Choice (FC) and Mutual Choice (MC). These allow for variable numbers of active features per token, framing the token-feature matching as a resource allocation problem with a total sparsity upper bound. The FC approach allows each feature to select m tokens to process, where m = M/F (M is total matches, F is number of features). MC combines aspects of FC and token choice. A new aux_zipf_loss is introduced to encourage feature densities to follow a Zipf distribution, mitigating feature under-utilization. The paper also suggests a phased training approach, starting with MC and transitioning to FC.",
        "Research_Impact": "A key challenge in mechanistic interpretability is extracting meaningful, interpretable features from neural networks while maintaining computational efficiency. This research addresses this by introducing adaptive computation in SAEs, allowing more features and computation for difficult-to-reconstruct tokens. The proposed methods achieve higher reconstruction accuracy with fewer dead features compared to standard approaches, potentially leading to more robust and interpretable feature extraction in large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "gated_sparse_autoencoder",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2404.16014v2  [cs.LG]  30 Apr 2024",
        "Experiment": "1. Implement Gated SAE architecture with separate gating and magnitude components\n2. Modify loss function to include L1 penalty on gating activations and auxiliary reconstruction task\n3. Train Gated SAEs on activations from GELU-1L, Pythia-2.8B, and Gemma-7B models\n4. Evaluate performance using loss recovered vs. L0 sparsity metrics\n5. Compare against baseline SAEs using Pareto frontier analysis\n6. Conduct shrinkage analysis and human interpretability study",
        "Technical_Details": "The Gated SAE architecture separates feature detection and magnitude estimation by using two sets of weights: w_gate for determining active features and w_mag for estimating magnitudes. The encoder output is computed as h = ReLU(w_gate * x + b_gate) * (w_mag * x + b_mag). The loss function includes an L1 penalty on ReLU(w_gate * x + b_gate) to encourage sparsity, and an auxiliary reconstruction task using these gating activations. Weight tying is employed between encoder and decoder. The architecture can be interpreted as a single-layer encoder with a parameterized JumpReLU activation function.",
        "Research_Impact": "A key challenge in mechanistic interpretability is finding sparse, interpretable features in language model activations. Gated SAEs address this by improving dictionary learning, achieving better reconstruction fidelity at given sparsity levels compared to standard SAEs. They also mitigate the shrinkage problem inherent in L1 regularization, potentially leading to more accurate feature representations. This could enable more reliable extraction of interpretable features across different model sizes and activation sites, advancing our ability to understand the internal workings of large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "batchtopk_sae",
        "Title": "Information Processing Systems (NeurIPS 2024).arXiv:2412.06410v1  [cs.LG]  9 Dec 2024",
        "Experiment": "1. Implement BatchTopK function to replace sample-level TopK operation.2. Modify SAE training procedure to use BatchTopK for sparsity constraint.3. Implement threshold estimation method for inference.4. Train SAEs on GPT-2 Small and Gemma 2 2B activations using both TopK and BatchTopK.5. Compare reconstruction quality (normalized MSE) and impact on language modeling (cross-entropy degradation).6. Evaluate performance across different dictionary sizes (3072, 6144, 12288, 24576).7. Analyze latent activation patterns and flexibility in latent allocation.",
        "Technical_Details": "BatchTopK is a novel training method for Sparse Autoencoders (SAEs) that replaces the sample-level TopK operation with a batch-level constraint. Instead of enforcing a fixed number of active latents per sample, BatchTopK selects the top activations across the entire batch. This allows for variable sparsity per sample, with some samples using more latents and others using fewer. The method introduces a batch dependency during training, which is addressed during inference by estimating a global threshold parameter. This threshold is calculated as the average of minimum positive activation values across multiple batches. The SAE is trained on language model activations (e.g., from the residual stream) using a large text corpus. The loss function combines L2 reconstruction error with an L0 sparsity penalty. Experiments were conducted on GPT-2 Small and Gemma 2 2B models, using dictionary sizes of 3072, 6144, 12288, and 24576, with a bandwidth parameter of 0.001 and the Adam optimizer (learning rate 3e-4).",
        "Research_Impact": "A significant challenge in mechanistic interpretability is developing methods to effectively analyze and interpret the internal representations of large language models. BatchTopK SAEs address this challenge by providing a more flexible and efficient way to compress and represent model activations. By allowing variable sparsity per sample, BatchTopK can potentially capture more nuanced and diverse activation patterns compared to fixed-sparsity methods. This improvement in reconstruction quality, as demonstrated by lower normalized MSE and reduced cross-entropy degradation, could lead to more accurate and insightful interpretations of model behavior. Furthermore, the ability to adaptively allocate latents based on sample complexity aligns well with the varying information content in natural language, potentially revealing more about how language models process different types of inputs.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "jumprelu_sae",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2407.14435v3  [cs.LG]  1 Aug 2024",
        "Experiment": "Implement JumpReLU activation function for sparse autoencoders. Modify existing SAE architecture to use JumpReLU instead of ReLU. Train JumpReLU SAEs on language model activations (e.g. Gemma 2 9B). Compare reconstruction fidelity and sparsity trade-offs against Gated and TopK SAEs. Conduct manual and automated interpretability studies on learned features.",
        "Technical_Details": "JumpReLU SAE introduces a threshold parameter \u03c4 for each feature. The activation function zeroes out pre-activations below \u03c4. Loss function combines L2 reconstruction error and L0 sparsity penalty. Straight-through estimators are used to estimate gradients of the expected loss. Pseudo-derivatives provide gradient signals within a small window around the threshold. Training involves computing gradients over batches and using batch-wise mean for parameter updates.",
        "Research_Impact": "Addresses the challenge of balancing reconstruction fidelity and interpretability in sparse representations of language model activations. JumpReLU SAEs achieve state-of-the-art reconstruction fidelity at given sparsity levels without sacrificing interpretability. This improves upon existing methods like Gated and TopK SAEs, potentially enabling more accurate identification of computational subgraphs and causal mechanisms in language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "clustered_sparse_autoencoders",
        "Title": "Clustered Sparse Autoencoders for Efficient Interpretability of Large Language Models",
        "Experiment": "1. Implement clustering algorithm to group model layers2. Train single SAE for each cluster instead of per-layer3. Evaluate reconstruction performance and sparsity metrics4. Assess downstream task performance using faithfulness/completeness5. Analyze feature interpretability across clustered layers6. Compare computational efficiency to baseline per-layer approach",
        "Technical_Details": "The approach clusters contiguous layers in a large language model and trains a single sparse autoencoder (SAE) per cluster, rather than per individual layer. This reduces the number of SAEs by a factor k, where k is the number of clusters. The method uses the JumpReLU activation function and optimizes an objective combining L2 reconstruction loss and L0 sparsity. Evaluation metrics include L2 loss, R2 score, L0 sparsity, as well as faithfulness and completeness on downstream tasks. The approach is tested with varying k values from 1 to 5, excluding the final layer of the model.",
        "Research_Impact": "This research addresses the computational challenge of training sparse autoencoders for very large language models, which has become a bottleneck in mechanistic interpretability research. By reducing the number of required SAEs, it enables more efficient analysis of state-of-the-art models with billions of parameters. This approach could accelerate progress in understanding the inner workings of advanced AI systems, addressing a key challenge in the field of AI interpretability and safety.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "mutual_feature_regularization",
        "Title": "1",
        "Experiment": "1. Implement MFR technique for SAEs:        - Add reinitializing of SAE weights when too many inactive features detected        - Implement auxiliary penalty to incentivize features present in other SAE decoders    2. Train SAEs with and without MFR on:        - Synthetic dataset with known features        - GPT-2 Small first layer MLP outputs        - EEG data from TUH EEG Corpus    3. Compare reconstruction loss and feature recovery between baseline and MFR SAEs    4. Analyze L2 distance between decoder matrices to assess feature similarity",
        "Technical_Details": "Mutual Feature Regularization (MFR) consists of two main components:    1. Reinitialization: Check for inactive features in SAE hidden state. If too many are detected, reinitialize the weights of the affected SAE.    2. Auxiliary penalty: Add a penalty term to the loss function that encourages features to be present in decoders of other SAEs trained on the same data.        Implementation details:    - Use TopK activation function for sparsity in SAE hidden state    - Train with AdamW optimizer    - Apply cosine warmup for 100 training steps on the auxiliary penalty    - Set auxiliary penalty coefficient to make initial reconstruction loss and penalty equivalent    - Evaluate using reconstruction loss (Euclidean distance between input and output) and feature recovery metrics",
        "Research_Impact": "MFR addresses the challenge of SAEs learning features that are not actually present in the input data, which limits their interpretability. This is a significant issue in mechanistic interpretability, where the goal is to understand the true features and computations of neural networks. By encouraging feature consistency across multiple SAEs, MFR increases the likelihood that learned features correspond to actual input features. This improvement could lead to more reliable and meaningful interpretations of neural network activations, advancing our understanding of how these models process information.",
        "Interestingness": 7,
        "Feasibility": 8,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "switch_sparse_autoencoder",
        "Title": "Switch Sparse Autoencoders",
        "Experiment": "1. Implement Switch layer architecture for sparse autoencoders (SAEs)\n2. Modify existing SAE training pipeline to incorporate Switch layer\n3. Train Switch SAEs on GPT-2 small residual stream activations\n4. Compare performance against TopK, ReLU, and Gated SAEs using metrics like reconstruction MSE, cross-entropy loss recovery, and feature interpretability\n5. Analyze scaling laws by training models with varying numbers of experts (16, 32, 64, 128)\n6. Evaluate expert specialization using nearest neighbor cosine similarity\n7. Perform t-SNE projections to visualize feature clustering\n8. Assess true positive and true negative rates for feature detection",
        "Technical_Details": "The Switch Sparse Autoencoder (Switch SAE) combines the Switch layer architecture with TopK SAEs. It consists of multiple expert SAEs and a trainable routing network. The router computes a probability distribution over experts and routes input activations to the expert with the highest probability. This approach reduces computational costs by avoiding dense matrix multiplications. The model is trained on residual stream activations of GPT-2 small, optimizing for reconstruction MSE. The architecture allows for scaling to a large number of features (up to 34 million in this study) while maintaining computational efficiency. The Switch SAE demonstrates improved performance in terms of reconstruction error vs. sparsity trade-off compared to other SAE variants.",
        "Research_Impact": "A key challenge in mechanistic interpretability is scaling sparse autoencoders to very high widths to identify all features represented in frontier models. This research directly addresses this challenge by introducing the Switch SAE architecture, which reduces the compute cost of training wide SAEs. By leveraging conditional computation, the Switch SAE enables scaling to millions of features while maintaining computational tractability. This advancement allows researchers to probe deeper into the internal representations of large language models, potentially uncovering a more comprehensive set of interpretable features and advancing our understanding of model behavior.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "sparse_autoencoder_improvements",
        "Title": "Sparse Autoencoder Viewer",
        "Experiment": "1. Implement TopK activation function and compare with ReLU and ProLU.\n2. Develop Multi-TopK loss function.\n3. Train autoencoders on GPT-2 small and GPT-4 family models with varying latent sizes.\n4. Evaluate using new metrics: downstream loss, probe loss, explainability, and ablation sparsity.\n5. Analyze scaling laws for MSE, compute, and model size.\n6. Implement and test AuxK loss for reducing dead latents.\n7. Conduct ablation studies on different positions and layers of the models.",
        "Technical_Details": "The paper introduces several technical improvements for training sparse autoencoders:\n1. TopK activation function: Only keeps the k largest latents, zeroing the rest.\n2. Multi-TopK loss: Sums multiple TopK losses with different k values to improve generalization.\n3. AuxK loss: An auxiliary loss that models reconstruction error using top-k dead latents.\n4. Optimization techniques: Using Adam optimizer with specific beta values, EMA of weights, and gradient projection.\n5. Scaling laws: Empirical observations on how MSE scales with compute, number of latents, and sparsity level.\n6. Evaluation metrics: New metrics including downstream loss, probe loss, explainability, and ablation sparsity to better quantify autoencoder quality.\n7. Parallelization strategies: Utilizing data parallel and tensor sharding techniques to handle large models.",
        "Research_Impact": "This research addresses the challenge of training extremely wide and sparse autoencoders, which has been a limiting factor in extracting interpretable features from large language models. Specifically:\n1. It improves the reconstruction-sparsity trade-off, allowing for better feature extraction with fewer active latents.\n2. The introduction of TopK and Multi-TopK activation functions mitigates the overfitting problem observed in ReLU-based autoencoders.\n3. The new evaluation metrics provide a more comprehensive assessment of autoencoder quality, moving beyond simple reconstruction error.\n4. The scaling laws discovered offer insights into the relationship between model size, compute, and autoencoder performance, which can guide future research in this area.\n5. The techniques for reducing dead latents (like AuxK loss) address a common problem in sparse autoencoder training, potentially leading to more efficient feature extraction.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "Orthogonal_sae",
        "Title": "Orthogonal Feature Learning for Optimal Knowledge Separation in Sparse Autoencoders",
        "Experiment": "1. Implement adaptive orthogonality loss with controlled feature sharing\n2. Add batch-wise feature grouping with periodic updates\n3. Train on Pythia-70M using WMDP-bio and WikiText datasets\n4. Compare unlearning performance against baseline and fixed orthogonal SAE\n5. Analyze condition numbers of feature subspaces\n6. Evaluate impact of different \u03b1 values for controlled sharing",
        "Technical_Details": "The method uses an adaptive objective: L = L_recon + \u03bb_1 * L_sparse + \u03bb_2(t) * L_ortho where \u03bb_2(t) = \u03bb_2_max * min(1, t/t_0) increases linearly until step t_0. L_ortho = ||W_1^T W_2 - \u03b1I||_F allows controlled feature sharing through parameter \u03b1. Feature groups are updated every n=100 steps using efficient batch statistics. Implementation includes early stopping based on condition number thresholds. The decoder uses group-specific bias terms while sharing weights to balance separation and reconstruction quality.",
        "Research_Impact": "A key challenge in selective unlearning is finding the optimal balance between knowledge separation and model performance. Current approaches either sacrifice reconstruction quality for separation or vice versa. This research addresses the challenge through adaptive training and controlled feature sharing, achieving better separation while maintaining performance. The theoretical framework provides precise control over the separation-performance trade-off.",
        "Implementation_Plan": "1. Add AdaptiveOrthogonalityLoss with scheduling\n2. Implement efficient batch-wise feature grouping\n3. Modify CustomSAE to include group-specific biases\n4. Add condition number calculation utilities\n5. Update CustomTrainer with adaptive loss weight\n6. Add evaluation metrics for controlled sharing",
        "Interestingness_Evaluation": "The combination of theoretical insights about feature sharing with practical adaptive training creates a more nuanced and effective approach to knowledge separation.",
        "Interestingness": 9,
        "Feasibility_Evaluation": "The implementation remains efficient with batch-wise updates and simple matrix operations; adaptive weighting adds minimal overhead; controlled sharing through \u03b1 provides easy tuning; all computations well within 30-minute limit on H100.",
        "Feasibility": 9,
        "Novelty_Evaluation": "The adaptive approach with controlled feature sharing provides a novel theoretical framework for knowledge separation that bridges the gap between strict orthogonality and practical performance.",
        "Novelty": 9,
        "Overall_Score": 9.0,
        "novel": false
    },
    {
        "Name": "Orthogonal_sae",
        "Title": "Orthogonal Feature Learning for Optimal Knowledge Separation in Sparse Autoencoders",
        "Experiment": "1. Implement adaptive orthogonality loss with controlled feature sharing\n2. Add batch-wise feature grouping with periodic updates\n3. Train on Pythia-70M using WMDP-bio and WikiText datasets\n4. Compare unlearning performance against baseline and fixed orthogonal SAE\n5. Analyze condition numbers of feature subspaces\n6. Evaluate impact of different \u03b1 values for controlled sharing",
        "Technical_Details": "The method uses an adaptive objective: L = L_recon + \u03bb_1 * L_sparse + \u03bb_2(t) * L_ortho where \u03bb_2(t) = \u03bb_2_max * min(1, t/t_0) increases linearly until step t_0. L_ortho = ||W_1^T W_2 - \u03b1I||_F allows controlled feature sharing through parameter \u03b1. Feature groups are updated every n=100 steps using efficient batch statistics. Implementation includes early stopping based on condition number thresholds. The decoder uses group-specific bias terms while sharing weights to balance separation and reconstruction quality.",
        "Research_Impact": "A key challenge in selective unlearning is finding the optimal balance between knowledge separation and model performance. Current approaches either sacrifice reconstruction quality for separation or vice versa. This research addresses the challenge through adaptive training and controlled feature sharing, achieving better separation while maintaining performance. The theoretical framework provides precise control over the separation-performance trade-off.",
        "Implementation_Plan": "1. Add AdaptiveOrthogonalityLoss with scheduling\n2. Implement efficient batch-wise feature grouping\n3. Modify CustomSAE to include group-specific biases\n4. Add condition number calculation utilities\n5. Update CustomTrainer with adaptive loss weight\n6. Add evaluation metrics for controlled sharing",
        "Interestingness_Evaluation": "The combination of theoretical insights about feature sharing with practical adaptive training creates a more nuanced and effective approach to knowledge separation.",
        "Interestingness": 9,
        "Feasibility_Evaluation": "The implementation remains efficient with batch-wise updates and simple matrix operations; adaptive weighting adds minimal overhead; controlled sharing through \u03b1 provides easy tuning; all computations well within 30-minute limit on H100.",
        "Feasibility": 9,
        "Novelty_Evaluation": "The adaptive approach with controlled feature sharing provides a novel theoretical framework for knowledge separation that bridges the gap between strict orthogonality and practical performance.",
        "Novelty": 9,
        "Overall_Score": 9.0,
        "novel": false
    },
    {
        "Name": "sparsity_aligned_cosine_sae",
        "Title": "Sparsity-Aligned Feature Separation in Sparse Autoencoders",
        "Experiment": "1. Calculate activation rate target from sparsity parameter\n2. Implement threshold selection based on target rate\n3. Modify cosine similarity penalty\n4. Compare against fixed-threshold baseline\n5. Analyze relationship between sparsity and feature separation",
        "Technical_Details": "The method aligns cosine similarity thresholds with the SAE's sparsity target: L = L_recon + \u03bb_1 * L_sparse + \u03bb_2 * L_cos where L_cos = sum(max(0, cos_sim(w_i, w_j) - t_ij)). For each feature pair i,j, t_ij = t_strict if both features activate above the sparsity target rate, t_relaxed otherwise. Target rate derived from L1 penalty weight: rate = 1/(\u03bb_1 * 10). Default values: t_strict = 0.3, t_relaxed = 0.6. Activation rates tracked using simple moving average over 1000 batches.",
        "Implementation_Plan": "1. Add activation rate tracking\n2. Implement sparsity-based threshold selection\n3. Modify cosine similarity penalty\n4. Add threshold hyperparameters\n5. Add sparsity-separation analysis utilities",
        "Interestingness_Evaluation": "The alignment of feature separation with sparsity creates a more theoretically grounded and coherent approach to encouraging interpretable features.",
        "Interestingness": 8,
        "Feasibility_Evaluation": "Implementation remains very simple with no additional hyperparameters; uses existing sparsity mechanism; minimal computational overhead; easily fits within 30-min limit.",
        "Feasibility": 10,
        "Novelty_Evaluation": "The alignment of feature separation with sparsity targets represents a novel and elegant approach to SAE training.",
        "Novelty": 6,
        "Expected_Research_Impact": "The coherent combination of sparsity and separation should significantly improve feature interpretability in both sparse_probing and core metrics.",
        "Research_Impact": 9,
        "Overall_Score": 8.7,
        "Abstract": "We propose a novel approach to feature separation in sparse autoencoders (SAEs) that aligns separation constraints with the model's inherent sparsity mechanism. By applying stricter separation requirements to features that activate above the target sparsity rate, our method creates a coherent training objective where both sparsity and feature separation work together to encourage interpretable representations. This is achieved through a dual-threshold cosine similarity constraint that adapts to the model's sparsity target, requiring no additional hyperparameters. The approach provides a theoretically grounded way to balance feature distinctness and reconstruction quality, addressing the challenge of polysemanticity in neural network interpretability.",
        "novel": true
    },
    {
        "Name": "magnitude_guided_sae",
        "Title": "Magnitude-Weighted Similarity Guidance for Preventing Feature Absorption in Sparse Autoencoders",
        "Experiment": "1. Implement magnitude-based feature selection\n2. Add weighted similarity computation\n3. Train with varying magnitude thresholds\n4. Compare feature absorption metrics against baseline\n5. Analyze impact on interpretability benchmarks",
        "Technical_Details": "The method prevents feature absorption by focusing on high-magnitude feature interactions. For each batch, identify significant features S = {i : ||w_i|| > mean(||w_j||)}. Compute weighted similarity matrix only between significant features: W[i,j] = (||w_i|| ||w_j||) * (w_i^T w_j)/(||w_i|| ||w_j||) for i,j \u2208 S. Define binary mask M[i,j] = 1 if W[i,j] > \u03c4. The loss becomes L = L_recon + \u03bb_1 * L_sparse + \u03bb_2 * L_ortho where L_ortho = \u03a3_{i,j\u2208S} M[i,j] * (w_i^T w_j)^2. This naturally focuses on preventing absorption between important features.",
        "Implementation_Plan": "1. Add magnitude-based feature selection\n2. Implement weighted similarity computation\n3. Add efficient orthogonality loss\n4. Modify CustomTrainer for magnitude-based operations\n5. Add evaluation metrics for feature absorption",
        "Interestingness_Evaluation": "The magnitude-weighted approach provides a natural way to focus on preventing absorption between important features while maintaining computational efficiency.",
        "Interestingness": 8,
        "Feasibility_Evaluation": "Implementation uses simple magnitude thresholding; computation focused on most important features; memory usage significantly reduced; easily fits within 30-minute limit on H100; straightforward implementation suitable for 1-month timeline.",
        "Feasibility": 9,
        "Novelty_Evaluation": "While building on similarity-based approaches, the magnitude-weighted focus provides a novel and natural way to prioritize important feature interactions.",
        "Novelty": 7,
        "Expected_Research_Impact": "The focused approach should prevent feature absorption where it matters most while being highly efficient, leading to improved sparse_probing and core metrics.",
        "Research_Impact": 8,
        "Overall_Score": 8.2,
        "Abstract": "We present an efficient approach to preventing feature absorption in sparse autoencoders using magnitude-weighted similarity guidance. Our method extends standard sparse autoencoder training by identifying potentially problematic feature pairs through their cosine similarity, but crucially weights these interactions by feature magnitudes and focuses only on above-average magnitude features. This approach directly addresses the geometric relationship enabling feature absorption while naturally prioritizing important feature interactions. By focusing computation on significant features and using magnitude weighting, our method provides a practical and principled solution for guiding feature separation. We evaluate this approach on standard interpretability benchmarks focusing on feature disentanglement and absorption metrics.",
        "novel": true
    },
    {
        "Name": "adaptive_weight_similarity_sae",
        "Title": "Dimension-Adaptive Weight Similarity Control for Preventing Feature Absorption in Sparse Autoencoders",
        "Experiment": "1. Implement weight vector similarity calculation\n2. Add dimension-adaptive similarity threshold\n3. Train on models of different sizes\n4. Compare feature absorption metrics against baseline\n5. Analyze learned weight patterns",
        "Technical_Details": "The method adds an adaptive weight similarity penalty to the standard SAE loss: L = L_recon + \u03bb_1 * L_sparse + \u03bb_2 * L_sim. For normalized encoder weight vectors w_i and w_j, L_sim = \u03a3 max(0, w_i\u00b7w_j - 1/sqrt(d_in))^2 where d_in is the input dimension. The threshold adapts automatically to the feature space dimensionality, preventing redundant feature learning while accounting for natural geometric properties of high-dimensional spaces. Weight vectors are normalized before similarity computation.",
        "Implementation_Plan": "1. Add weight similarity computation to CustomSAE\n2. Implement adaptive threshold calculation\n3. Modify CustomTrainer with new loss term\n4. Add weight statistics logging\n5. Update evaluation metrics",
        "Interestingness_Evaluation": "The approach provides a theoretically principled and automatic solution to feature absorption that adapts to model scale.",
        "Interestingness": 9,
        "Feasibility_Evaluation": "Implementation remains simple with only basic matrix operations; adaptive threshold adds negligible computation; highly efficient and stable; easily within 30-minute training limit on H100.",
        "Feasibility": 9,
        "Novelty_Evaluation": "The dimension-adaptive threshold for weight similarity constraints is a novel and theoretically justified approach to preventing feature absorption.",
        "Novelty": 8,
        "Expected_Research_Impact": "The principled, adaptive approach should significantly improve sparse_probing performance across different model scales while maintaining strong core metrics.",
        "Research_Impact": 9,
        "Overall_Score": 8.8,
        "Abstract": "Feature absorption in sparse autoencoders poses a significant challenge for mechanistic interpretability, where distinct concepts become entangled within individual features. We propose a dimension-adaptive approach to prevent feature absorption by controlling weight vector similarities using theoretically motivated thresholds. Our method computes pairwise similarities between normalized encoder weight vectors and applies a penalty when similarity exceeds 1/sqrt(d) where d is the input dimension. This threshold adapts automatically to the geometry of high-dimensional spaces, providing a principled solution that scales with model size. The method requires minimal computational overhead and integrates seamlessly with existing sparse autoencoder architectures while eliminating the need for manual threshold tuning.",
        "novel": true
    }
]