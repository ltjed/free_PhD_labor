[
    {
        "Name": "adaptive_sparse_autoencoders",
        "Title": "Adaptive Computation in Sparse Autoencoders",
        "Experiment": "1. Implement Feature Choice and Mutual Choice sparsifying activation functions\n2. Add aux_zipf_loss and aux_k_loss auxiliary losses\n3. Train SAEs with new activation functions and losses on GPT-2 sized residual stream activations\n4. Compare performance (sparsity, reconstruction error, model loss) and feature utilization against baseline TopK SAEs\n5. Analyze distribution of features per token and feature densities\n6. Implement phased training with Mutual Choice followed by Feature Choice",
        "Technical_Details": "The paper proposes two novel sparse autoencoder (SAE) variants: Feature Choice (FC) and Mutual Choice (MC). These allow for variable numbers of active features per token, framing the token-feature matching as a resource allocation problem with a total sparsity upper bound. The FC approach allows each feature to select m tokens to process, where m = M/F (M is total matches, F is number of features). MC combines aspects of FC and token choice. A new aux_zipf_loss is introduced to encourage feature densities to follow a Zipf distribution, mitigating feature under-utilization. The paper also suggests a phased training approach, starting with MC and transitioning to FC.",
        "Research_Impact": "A key challenge in mechanistic interpretability is extracting meaningful, interpretable features from neural networks while maintaining computational efficiency. This research addresses this by introducing adaptive computation in SAEs, allowing more features and computation for difficult-to-reconstruct tokens. The proposed methods achieve higher reconstruction accuracy with fewer dead features compared to standard approaches, potentially leading to more robust and interpretable feature extraction in large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "gated_sparse_autoencoder",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2404.16014v2  [cs.LG]  30 Apr 2024",
        "Experiment": "1. Implement Gated SAE architecture with separate gating and magnitude components\n2. Modify loss function to include L1 penalty on gating activations and auxiliary reconstruction task\n3. Train Gated SAEs on activations from GELU-1L, Pythia-2.8B, and Gemma-7B models\n4. Evaluate performance using loss recovered vs. L0 sparsity metrics\n5. Compare against baseline SAEs using Pareto frontier analysis\n6. Conduct shrinkage analysis and human interpretability study",
        "Technical_Details": "The Gated SAE architecture separates feature detection and magnitude estimation by using two sets of weights: w_gate for determining active features and w_mag for estimating magnitudes. The encoder output is computed as h = ReLU(w_gate * x + b_gate) * (w_mag * x + b_mag). The loss function includes an L1 penalty on ReLU(w_gate * x + b_gate) to encourage sparsity, and an auxiliary reconstruction task using these gating activations. Weight tying is employed between encoder and decoder. The architecture can be interpreted as a single-layer encoder with a parameterized JumpReLU activation function.",
        "Research_Impact": "A key challenge in mechanistic interpretability is finding sparse, interpretable features in language model activations. Gated SAEs address this by improving dictionary learning, achieving better reconstruction fidelity at given sparsity levels compared to standard SAEs. They also mitigate the shrinkage problem inherent in L1 regularization, potentially leading to more accurate feature representations. This could enable more reliable extraction of interpretable features across different model sizes and activation sites, advancing our ability to understand the internal workings of large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "batchtopk_sae",
        "Title": "Information Processing Systems (NeurIPS 2024).arXiv:2412.06410v1  [cs.LG]  9 Dec 2024",
        "Experiment": "1. Implement BatchTopK function to replace sample-level TopK operation.2. Modify SAE training procedure to use BatchTopK for sparsity constraint.3. Implement threshold estimation method for inference.4. Train SAEs on GPT-2 Small and Gemma 2 2B activations using both TopK and BatchTopK.5. Compare reconstruction quality (normalized MSE) and impact on language modeling (cross-entropy degradation).6. Evaluate performance across different dictionary sizes (3072, 6144, 12288, 24576).7. Analyze latent activation patterns and flexibility in latent allocation.",
        "Technical_Details": "BatchTopK is a novel training method for Sparse Autoencoders (SAEs) that replaces the sample-level TopK operation with a batch-level constraint. Instead of enforcing a fixed number of active latents per sample, BatchTopK selects the top activations across the entire batch. This allows for variable sparsity per sample, with some samples using more latents and others using fewer. The method introduces a batch dependency during training, which is addressed during inference by estimating a global threshold parameter. This threshold is calculated as the average of minimum positive activation values across multiple batches. The SAE is trained on language model activations (e.g., from the residual stream) using a large text corpus. The loss function combines L2 reconstruction error with an L0 sparsity penalty. Experiments were conducted on GPT-2 Small and Gemma 2 2B models, using dictionary sizes of 3072, 6144, 12288, and 24576, with a bandwidth parameter of 0.001 and the Adam optimizer (learning rate 3e-4).",
        "Research_Impact": "A significant challenge in mechanistic interpretability is developing methods to effectively analyze and interpret the internal representations of large language models. BatchTopK SAEs address this challenge by providing a more flexible and efficient way to compress and represent model activations. By allowing variable sparsity per sample, BatchTopK can potentially capture more nuanced and diverse activation patterns compared to fixed-sparsity methods. This improvement in reconstruction quality, as demonstrated by lower normalized MSE and reduced cross-entropy degradation, could lead to more accurate and insightful interpretations of model behavior. Furthermore, the ability to adaptively allocate latents based on sample complexity aligns well with the varying information content in natural language, potentially revealing more about how language models process different types of inputs.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "jumprelu_sae",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2407.14435v3  [cs.LG]  1 Aug 2024",
        "Experiment": "Implement JumpReLU activation function for sparse autoencoders. Modify existing SAE architecture to use JumpReLU instead of ReLU. Train JumpReLU SAEs on language model activations (e.g. Gemma 2 9B). Compare reconstruction fidelity and sparsity trade-offs against Gated and TopK SAEs. Conduct manual and automated interpretability studies on learned features.",
        "Technical_Details": "JumpReLU SAE introduces a threshold parameter \u03c4 for each feature. The activation function zeroes out pre-activations below \u03c4. Loss function combines L2 reconstruction error and L0 sparsity penalty. Straight-through estimators are used to estimate gradients of the expected loss. Pseudo-derivatives provide gradient signals within a small window around the threshold. Training involves computing gradients over batches and using batch-wise mean for parameter updates.",
        "Research_Impact": "Addresses the challenge of balancing reconstruction fidelity and interpretability in sparse representations of language model activations. JumpReLU SAEs achieve state-of-the-art reconstruction fidelity at given sparsity levels without sacrificing interpretability. This improves upon existing methods like Gated and TopK SAEs, potentially enabling more accurate identification of computational subgraphs and causal mechanisms in language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "clustered_sparse_autoencoders",
        "Title": "Clustered Sparse Autoencoders for Efficient Interpretability of Large Language Models",
        "Experiment": "1. Implement clustering algorithm to group model layers2. Train single SAE for each cluster instead of per-layer3. Evaluate reconstruction performance and sparsity metrics4. Assess downstream task performance using faithfulness/completeness5. Analyze feature interpretability across clustered layers6. Compare computational efficiency to baseline per-layer approach",
        "Technical_Details": "The approach clusters contiguous layers in a large language model and trains a single sparse autoencoder (SAE) per cluster, rather than per individual layer. This reduces the number of SAEs by a factor k, where k is the number of clusters. The method uses the JumpReLU activation function and optimizes an objective combining L2 reconstruction loss and L0 sparsity. Evaluation metrics include L2 loss, R2 score, L0 sparsity, as well as faithfulness and completeness on downstream tasks. The approach is tested with varying k values from 1 to 5, excluding the final layer of the model.",
        "Research_Impact": "This research addresses the computational challenge of training sparse autoencoders for very large language models, which has become a bottleneck in mechanistic interpretability research. By reducing the number of required SAEs, it enables more efficient analysis of state-of-the-art models with billions of parameters. This approach could accelerate progress in understanding the inner workings of advanced AI systems, addressing a key challenge in the field of AI interpretability and safety.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "mutual_feature_regularization",
        "Title": "1",
        "Experiment": "1. Implement MFR technique for SAEs:        - Add reinitializing of SAE weights when too many inactive features detected        - Implement auxiliary penalty to incentivize features present in other SAE decoders    2. Train SAEs with and without MFR on:        - Synthetic dataset with known features        - GPT-2 Small first layer MLP outputs        - EEG data from TUH EEG Corpus    3. Compare reconstruction loss and feature recovery between baseline and MFR SAEs    4. Analyze L2 distance between decoder matrices to assess feature similarity",
        "Technical_Details": "Mutual Feature Regularization (MFR) consists of two main components:    1. Reinitialization: Check for inactive features in SAE hidden state. If too many are detected, reinitialize the weights of the affected SAE.    2. Auxiliary penalty: Add a penalty term to the loss function that encourages features to be present in decoders of other SAEs trained on the same data.        Implementation details:    - Use TopK activation function for sparsity in SAE hidden state    - Train with AdamW optimizer    - Apply cosine warmup for 100 training steps on the auxiliary penalty    - Set auxiliary penalty coefficient to make initial reconstruction loss and penalty equivalent    - Evaluate using reconstruction loss (Euclidean distance between input and output) and feature recovery metrics",
        "Research_Impact": "MFR addresses the challenge of SAEs learning features that are not actually present in the input data, which limits their interpretability. This is a significant issue in mechanistic interpretability, where the goal is to understand the true features and computations of neural networks. By encouraging feature consistency across multiple SAEs, MFR increases the likelihood that learned features correspond to actual input features. This improvement could lead to more reliable and meaningful interpretations of neural network activations, advancing our understanding of how these models process information.",
        "Interestingness": 7,
        "Feasibility": 8,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "switch_sparse_autoencoder",
        "Title": "Switch Sparse Autoencoders",
        "Experiment": "1. Implement Switch layer architecture for sparse autoencoders (SAEs)\n2. Modify existing SAE training pipeline to incorporate Switch layer\n3. Train Switch SAEs on GPT-2 small residual stream activations\n4. Compare performance against TopK, ReLU, and Gated SAEs using metrics like reconstruction MSE, cross-entropy loss recovery, and feature interpretability\n5. Analyze scaling laws by training models with varying numbers of experts (16, 32, 64, 128)\n6. Evaluate expert specialization using nearest neighbor cosine similarity\n7. Perform t-SNE projections to visualize feature clustering\n8. Assess true positive and true negative rates for feature detection",
        "Technical_Details": "The Switch Sparse Autoencoder (Switch SAE) combines the Switch layer architecture with TopK SAEs. It consists of multiple expert SAEs and a trainable routing network. The router computes a probability distribution over experts and routes input activations to the expert with the highest probability. This approach reduces computational costs by avoiding dense matrix multiplications. The model is trained on residual stream activations of GPT-2 small, optimizing for reconstruction MSE. The architecture allows for scaling to a large number of features (up to 34 million in this study) while maintaining computational efficiency. The Switch SAE demonstrates improved performance in terms of reconstruction error vs. sparsity trade-off compared to other SAE variants.",
        "Research_Impact": "A key challenge in mechanistic interpretability is scaling sparse autoencoders to very high widths to identify all features represented in frontier models. This research directly addresses this challenge by introducing the Switch SAE architecture, which reduces the compute cost of training wide SAEs. By leveraging conditional computation, the Switch SAE enables scaling to millions of features while maintaining computational tractability. This advancement allows researchers to probe deeper into the internal representations of large language models, potentially uncovering a more comprehensive set of interpretable features and advancing our understanding of model behavior.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "sparse_autoencoder_improvements",
        "Title": "Sparse Autoencoder Viewer",
        "Experiment": "1. Implement TopK activation function and compare with ReLU and ProLU.\n2. Develop Multi-TopK loss function.\n3. Train autoencoders on GPT-2 small and GPT-4 family models with varying latent sizes.\n4. Evaluate using new metrics: downstream loss, probe loss, explainability, and ablation sparsity.\n5. Analyze scaling laws for MSE, compute, and model size.\n6. Implement and test AuxK loss for reducing dead latents.\n7. Conduct ablation studies on different positions and layers of the models.",
        "Technical_Details": "The paper introduces several technical improvements for training sparse autoencoders:\n1. TopK activation function: Only keeps the k largest latents, zeroing the rest.\n2. Multi-TopK loss: Sums multiple TopK losses with different k values to improve generalization.\n3. AuxK loss: An auxiliary loss that models reconstruction error using top-k dead latents.\n4. Optimization techniques: Using Adam optimizer with specific beta values, EMA of weights, and gradient projection.\n5. Scaling laws: Empirical observations on how MSE scales with compute, number of latents, and sparsity level.\n6. Evaluation metrics: New metrics including downstream loss, probe loss, explainability, and ablation sparsity to better quantify autoencoder quality.\n7. Parallelization strategies: Utilizing data parallel and tensor sharding techniques to handle large models.",
        "Research_Impact": "This research addresses the challenge of training extremely wide and sparse autoencoders, which has been a limiting factor in extracting interpretable features from large language models. Specifically:\n1. It improves the reconstruction-sparsity trade-off, allowing for better feature extraction with fewer active latents.\n2. The introduction of TopK and Multi-TopK activation functions mitigates the overfitting problem observed in ReLU-based autoencoders.\n3. The new evaluation metrics provide a more comprehensive assessment of autoencoder quality, moving beyond simple reconstruction error.\n4. The scaling laws discovered offer insights into the relationship between model size, compute, and autoencoder performance, which can guide future research in this area.\n5. The techniques for reducing dead latents (like AuxK loss) address a common problem in sparse autoencoder training, potentially leading to more efficient feature extraction.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "temporal_sae",
        "Title": "Temporal Sparse Autoencoders: Capturing Sequential Dependencies with Exponential Memory",
        "Experiment": "1. Implement TSAE architecture with EMA-based temporal tracking\n2. Add temporal consistency loss and feature trajectory analysis\n3. Train on GPT-2/Gemma activation sequences\n4. Evaluate using new temporal coherence metrics:\n   - Feature activation consistency across similar contexts\n   - Temporal stability score\n   - Multi-token feature detection rate\n5. Compare against standard SAEs on reconstruction and sparsity\n6. Analyze performance on unlearning benchmark\n7. Conduct ablation studies on memory decay rates\n8. Visualize feature activation trajectories",
        "Technical_Details": "The TSAE architecture maintains an exponential moving average state per feature: s_t = \u03b1 * s_(t-1) + (1-\u03b1) * h_t, where h_t is the current feature activation and \u03b1 is a learnable decay rate per feature (initialized to 0.9). The encoding process becomes: h_t = ReLU(W_enc * x_t + b_enc + W_mem * s_(t-1)), where W_mem is a learned projection matrix. The loss function includes: (1) reconstruction loss, (2) L1 sparsity on h_t, (3) temporal consistency loss: L_temp = ||h_t - h_(t-1)||\u2081 when both features are active, and (4) memory utilization loss to prevent redundant state tracking. The temporal consistency score (TCS) metric measures the correlation between feature activations on similar input patterns across different sequences. Training uses mini-batches of sequences length 64 with gradient accumulation.",
        "Research_Impact": "A key challenge in mechanistic interpretability is identifying features that operate across multiple tokens, such as those tracking grammatical dependencies or semantic relationships. Current SAEs treat each activation independently, potentially fragmenting multi-token features across multiple latents. TSAEs address this by explicitly modeling temporal dependencies using a simple, interpretable EMA mechanism. This design maintains the interpretability advantages of standard SAEs while better capturing sequential patterns. The addition of specific temporal coherence metrics provides quantitative measures for evaluating feature quality. This could particularly improve performance on tasks requiring multi-token understanding like the unlearning benchmark, where knowledge often spans multiple tokens.",
        "Interestingness": 8,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": true
    },
    {
        "Name": "hierarchical_sae",
        "Title": "Hierarchical Sparse Autoencoders for Controlled Knowledge Unlearning",
        "Experiment": "1. Implement refined hierarchical encoder:\n   - Gumbel-Softmax cluster assignment\n   - Skip connections to feature encoders\n   - Adaptive cluster count mechanism\n2. Add enhanced training procedure:\n   - Sparsity curriculum learning\n   - Inter-cluster similarity regularization\n   - Controlled feature sharing\n3. Train on Gemma-2B activations with:\n   - Varying cluster counts (8-32)\n   - Different sparsity schedules\n   - Feature sharing thresholds\n4. Comprehensive evaluation:\n   - Unlearning benchmark performance\n   - Cluster purity metrics\n   - Hierarchical interpretability scores\n   - Cross-cluster interference analysis\n5. Compare intervention strategies:\n   - Single vs multi-level suppression\n   - Cluster-aware vs naive approaches",
        "Technical_Details": "Enhanced HierSAE architecture:\n1. Soft cluster assignment: h_c = GumbelSoftmax(W_c * x + b_c, \u03c4)\n2. Feature encoders with skip: h_f^i = TopK(W_f^i * x + W_s^i * h_c[i] + b_f^i, k_f)\n3. Adaptive clustering: n_clusters = max(8, log2(active_features))\n\nLoss function:\n1. Reconstruction: L_rec = ||x - W_d * sum_i(h_f^i)||^2\n2. Hierarchical sparsity: L_h = \u03bb_c||h_c||_1 + \u03bb_f*sum_i(||h_f^i||_1)\n3. Inter-cluster regularization: L_reg = sum_{i,j}(max(0, cos_sim(W_f^i, W_f^j) - \u03c4_sim))\n4. Feature sharing: L_share = ||W_s||_1\n\nTraining uses:\n- Curriculum: \u03bb_c, \u03bb_f increase linearly over warmup\n- Temperature \u03c4 annealing for Gumbel-Softmax\n- Gradient clipping and layer normalization",
        "Research_Impact": "A key challenge in selective knowledge unlearning is precisely targeting specific knowledge while preserving general capabilities. Current approaches using flat SAEs often struggle with knowledge entanglement, where removing targeted features inadvertently affects other capabilities. The enhanced HierSAE addresses this through controlled feature sharing and adaptive clustering, allowing more precise knowledge isolation while maintaining model robustness. The addition of curriculum learning and soft assignments improves training stability, while comprehensive evaluation metrics provide better insight into hierarchical feature organization. This refinement enables more reliable knowledge editing while maintaining interpretability, advancing capabilities in AI safety and control.",
        "Interestingness": 9,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": true
    },
    {
        "Name": "contrastive_sae",
        "Title": "Contrastive Sparse Autoencoders for Improved Knowledge Separation",
        "Experiment": "1. Implement contrastive learning components:\n   - Projection head MLP\n   - Single queue with binary labels\n   - Modified InfoNCE loss\n2. Modify SAE training loop:\n   - Balanced forget/retain sampling\n   - Temperature curriculum\n   - Feature separation scoring\n3. Train on Gemma-2B activations using:\n   - WMDP-bio (forget) and WikiText (retain) datasets\n   - Various projection dimensions (128-512)\n   - Different temperature schedules\n4. Evaluate using:\n   - Standard reconstruction metrics\n   - Feature separation measures\n   - Unlearning benchmark performance\n   - Feature selection accuracy\n5. Ablation studies on:\n   - Queue size impact\n   - Modified loss effectiveness\n   - Temperature curriculum impact",
        "Technical_Details": "The refined ConSAE architecture:\n1. Projection head: 2-layer MLP (h -> 2h -> d_proj) with LayerNorm\n2. Single queue: Fixed-size (K=65536) queue storing (projection, label) pairs\n3. Modified contrastive loss:\nL_con = -log(exp(sim(q,k+)/\u03c4)/(exp(sim(q,k+)/\u03c4) + \u03a3w_ij*exp(sim(q,k-)/\u03c4)))\nwhere w_ij = \u03b1 if i,j from different datasets, 1 otherwise\n\nTotal loss:\nL = \u03bb_rec||x - x\u0302||\u00b2 + \u03bb_sparse||h||\u2081 + \u03bb_con*L_con\n\nFeature selection score:\ns_f = (mean_intra_dist - mean_inter_dist) / std_inter_dist\n\nTraining procedure:\n1. Encode and project features\n2. Sample balanced batch from queue\n3. Compute weighted InfoNCE loss\n4. Update model and queue\n\nHyperparameters:\n- \u03bb_rec=1.0, \u03bb_sparse=0.1, \u03bb_con=0.01\n- \u03b1=2.0 (cross-dataset penalty)\n- Initial \u03c4=0.2, final \u03c4=0.07\n- Temperature curriculum over 10k steps\n- Projection dimension d_proj=256",
        "Research_Impact": "A major challenge in mechanistic interpretability is achieving precise selective unlearning without degrading general model capabilities. Current SAEs often fail to properly separate knowledge that should be preserved from knowledge that should be removed, leading to unintended side effects during intervention. ConSAE addresses this by explicitly optimizing for knowledge separation in the latent space through contrastive learning. The refined architecture improves on the original by introducing weighted negative sampling that more strongly penalizes confusion between forget/retain features. The addition of a principled feature selection score enables more reliable intervention targeting. The temperature curriculum helps learn better separated features by gradually increasing the precision of the boundaries between different types of knowledge. These improvements make the model more practical to implement while potentially achieving better knowledge separation.",
        "Interestingness": 9,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": true
    },
    {
        "Name": "disentangled_sae",
        "Title": "DisEntangled Sparse Autoencoders: Enforcing Statistical Independence for Improved Interpretability",
        "Experiment": "1. Implement variational encoder with factorized Gaussian posterior\n2. Add efficient kernel-based MI estimator\n3. Modify loss function with curriculum and adaptive weighting\n4. Train on Gemma-2B activations with:\n   - Progressive MI estimation schedule\n   - Adaptive loss balancing\n   - Various kernel configurations\n5. Evaluate using:\n   - Standard reconstruction metrics\n   - MIG and SAP disentanglement scores\n   - Unlearning benchmark performance\n   - Interventional robustness tests\n6. Compare against baseline SAEs on:\n   - Feature collapse incidents\n   - Intervention precision\n   - Training efficiency",
        "Technical_Details": "Architecture modifications:\n1. Encoder outputs \u03bc and \u03c3 for each latent dimension\n2. Reparameterization trick for sampling: z = \u03bc + \u03c3 \u2218 \u03b5, \u03b5 ~ N(0,1)\n3. Kernel MI estimator: MI(z_i,z_j) \u2248 log(MMD(p_joint||p_i\u2297p_j))\n\nLoss function:\nL = \u03bb_rec||x - decoder(z)||\u00b2 + \u03bb_KL * KL(q(z|x)||p(z)) + \u03bb_MI(t) * MI_batch(z) + \u03bb_sparse||\u03bc||\u2081\n\nwhere:\n- \u03bb_MI(t) follows curriculum schedule\n- MI_batch computed on random dimension pairs\n- Adaptive loss weights based on grad norms\n\nTraining procedure:\n1. Forward pass computing \u03bc, \u03c3\n2. Sample latents using reparameterization\n3. Estimate MI on minibatch of dimension pairs\n4. Update weights using combined loss\n5. Adjust loss weights based on grad norms\n\nHyperparameters:\n- Initial \u03bb_rec=1.0, \u03bb_KL=0.1, \u03bb_MI=0.001, \u03bb_sparse=0.1\n- RBF kernel bandwidth = median heuristic\n- MI pairs per batch = min(1000, d_sae)\n- Curriculum length = 5000 steps\n- Gradient clipping at 1.0",
        "Research_Impact": "A fundamental challenge in mechanistic interpretability is ensuring that learned features correspond to genuinely distinct computational components rather than arbitrary combinations of co-occurring patterns. Current SAEs often merge separate features that frequently appear together, making it difficult to precisely intervene on specific capabilities. DESAE addresses this by explicitly optimizing for statistical independence between latent dimensions while maintaining reconstruction quality. The refined approach makes this practical for large models through efficient MI estimation and stable training procedures. This enables more precise and reliable interventions for tasks like knowledge editing and capability control, as features are better isolated and interpretable. The addition of principled disentanglement metrics provides quantitative validation of feature separation quality.",
        "Interestingness": 9,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": true
    },
    {
        "Name": "prototype_initialized_sae",
        "Title": "Prototype-Initialized Sparse Autoencoders for Guided Feature Discovery",
        "Experiment": "1. Implement simplified prototype mining:\n   - PCA-based dimensionality reduction\n   - K-means clustering with silhouette scoring\n   - Automated interpretability filtering\n2. Enhance SAE initialization:\n   - Prototype subspace projection\n   - Adaptive random initialization\n   - Learned feature importance weighting\n3. Train on Gemma-2B activations using:\n   - WMDP-bio dataset for prototype mining\n   - WikiText for general capability prototypes\n   - Progressive prototype adaptation\n4. Evaluate using:\n   - Unlearning benchmark metrics\n   - Feature stability measures\n   - Intervention specificity scores\n   - Cross-dataset generalization tests",
        "Technical_Details": "Refined PISAE process:\n1. Prototype mining:\n   - Apply PCA to retain 99% variance\n   - K-means++ clustering (k = d_sae/4)\n   - Score clusters using silhouette coefficient\n   - Filter clusters with score > 0.7\n\n2. Initialization:\n   - W_d[:, :k] = normalize(prototypes)\n   - W_d[:, k:] = GramSchmidt(randn(d_in, d_sae-k))\n   - W_e = W_d^T + 0.1 * randn(*W_d.shape)\n   - b_e = -0.5 * ones(d_sae)\n\n3. Training:\n   - L_total = L_rec + \u03bb_sparse||h||\u2081 + \u03bb_align * exp(-t/5000) * L_align\n   - L_align = ||W_d[:, :k] W_d[:, :k]^T - P P^T||_F\n   - Batch size = 4096\n   - Learning rate = 3e-4 with cosine warmup\n\nHyperparameters:\n- k = d_sae/4 prototypes\n- \u03bb_sparse = 0.1\n- \u03bb_align = 1.0\n- Warmup steps = 1000",
        "Research_Impact": "A critical challenge in mechanistic interpretability is reliably identifying features that correspond to specific types of knowledge for targeted intervention. Current SAEs often discover features that mix multiple concepts, making precise knowledge editing difficult. The refined PISAE addresses this through a simplified but effective prototype mining approach and principled initialization that preserves these patterns while allowing adaptation. The focus on the WMDP-bio dataset for prototype mining makes the approach particularly well-suited for the unlearning benchmark, where we need to precisely identify and modify specific knowledge while preserving general capabilities. The simplified implementation makes the approach more practical while maintaining its key advantages for interpretable feature discovery.",
        "Interestingness": 8,
        "Feasibility": 6,
        "Novelty": 7,
        "novel": true
    }
]