[
    {
        "Name": "adaptive_sparse_autoencoders",
        "Title": "Adaptive Computation in Sparse Autoencoders",
        "Experiment": "1. Implement Feature Choice and Mutual Choice sparsifying activation functions\n2. Add aux_zipf_loss and aux_k_loss auxiliary losses\n3. Train SAEs with new activation functions and losses on GPT-2 sized residual stream activations\n4. Compare performance (sparsity, reconstruction error, model loss) and feature utilization against baseline TopK SAEs\n5. Analyze distribution of features per token and feature densities\n6. Implement phased training with Mutual Choice followed by Feature Choice",
        "Technical_Details": "The paper proposes two novel sparse autoencoder (SAE) variants: Feature Choice (FC) and Mutual Choice (MC). These allow for variable numbers of active features per token, framing the token-feature matching as a resource allocation problem with a total sparsity upper bound. The FC approach allows each feature to select m tokens to process, where m = M/F (M is total matches, F is number of features). MC combines aspects of FC and token choice. A new aux_zipf_loss is introduced to encourage feature densities to follow a Zipf distribution, mitigating feature under-utilization. The paper also suggests a phased training approach, starting with MC and transitioning to FC.",
        "Research_Impact": "A key challenge in mechanistic interpretability is extracting meaningful, interpretable features from neural networks while maintaining computational efficiency. This research addresses this by introducing adaptive computation in SAEs, allowing more features and computation for difficult-to-reconstruct tokens. The proposed methods achieve higher reconstruction accuracy with fewer dead features compared to standard approaches, potentially leading to more robust and interpretable feature extraction in large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "gated_sparse_autoencoder",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2404.16014v2  [cs.LG]  30 Apr 2024",
        "Experiment": "1. Implement Gated SAE architecture with separate gating and magnitude components\n2. Modify loss function to include L1 penalty on gating activations and auxiliary reconstruction task\n3. Train Gated SAEs on activations from GELU-1L, Pythia-2.8B, and Gemma-7B models\n4. Evaluate performance using loss recovered vs. L0 sparsity metrics\n5. Compare against baseline SAEs using Pareto frontier analysis\n6. Conduct shrinkage analysis and human interpretability study",
        "Technical_Details": "The Gated SAE architecture separates feature detection and magnitude estimation by using two sets of weights: w_gate for determining active features and w_mag for estimating magnitudes. The encoder output is computed as h = ReLU(w_gate * x + b_gate) * (w_mag * x + b_mag). The loss function includes an L1 penalty on ReLU(w_gate * x + b_gate) to encourage sparsity, and an auxiliary reconstruction task using these gating activations. Weight tying is employed between encoder and decoder. The architecture can be interpreted as a single-layer encoder with a parameterized JumpReLU activation function.",
        "Research_Impact": "A key challenge in mechanistic interpretability is finding sparse, interpretable features in language model activations. Gated SAEs address this by improving dictionary learning, achieving better reconstruction fidelity at given sparsity levels compared to standard SAEs. They also mitigate the shrinkage problem inherent in L1 regularization, potentially leading to more accurate feature representations. This could enable more reliable extraction of interpretable features across different model sizes and activation sites, advancing our ability to understand the internal workings of large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "batchtopk_sae",
        "Title": "Information Processing Systems (NeurIPS 2024).arXiv:2412.06410v1  [cs.LG]  9 Dec 2024",
        "Experiment": "1. Implement BatchTopK function to replace sample-level TopK operation.2. Modify SAE training procedure to use BatchTopK for sparsity constraint.3. Implement threshold estimation method for inference.4. Train SAEs on GPT-2 Small and Gemma 2 2B activations using both TopK and BatchTopK.5. Compare reconstruction quality (normalized MSE) and impact on language modeling (cross-entropy degradation).6. Evaluate performance across different dictionary sizes (3072, 6144, 12288, 24576).7. Analyze latent activation patterns and flexibility in latent allocation.",
        "Technical_Details": "BatchTopK is a novel training method for Sparse Autoencoders (SAEs) that replaces the sample-level TopK operation with a batch-level constraint. Instead of enforcing a fixed number of active latents per sample, BatchTopK selects the top activations across the entire batch. This allows for variable sparsity per sample, with some samples using more latents and others using fewer. The method introduces a batch dependency during training, which is addressed during inference by estimating a global threshold parameter. This threshold is calculated as the average of minimum positive activation values across multiple batches. The SAE is trained on language model activations (e.g., from the residual stream) using a large text corpus. The loss function combines L2 reconstruction error with an L0 sparsity penalty. Experiments were conducted on GPT-2 Small and Gemma 2 2B models, using dictionary sizes of 3072, 6144, 12288, and 24576, with a bandwidth parameter of 0.001 and the Adam optimizer (learning rate 3e-4).",
        "Research_Impact": "A significant challenge in mechanistic interpretability is developing methods to effectively analyze and interpret the internal representations of large language models. BatchTopK SAEs address this challenge by providing a more flexible and efficient way to compress and represent model activations. By allowing variable sparsity per sample, BatchTopK can potentially capture more nuanced and diverse activation patterns compared to fixed-sparsity methods. This improvement in reconstruction quality, as demonstrated by lower normalized MSE and reduced cross-entropy degradation, could lead to more accurate and insightful interpretations of model behavior. Furthermore, the ability to adaptively allocate latents based on sample complexity aligns well with the varying information content in natural language, potentially revealing more about how language models process different types of inputs.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "jumprelu_sae",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2407.14435v3  [cs.LG]  1 Aug 2024",
        "Experiment": "Implement JumpReLU activation function for sparse autoencoders. Modify existing SAE architecture to use JumpReLU instead of ReLU. Train JumpReLU SAEs on language model activations (e.g. Gemma 2 9B). Compare reconstruction fidelity and sparsity trade-offs against Gated and TopK SAEs. Conduct manual and automated interpretability studies on learned features.",
        "Technical_Details": "JumpReLU SAE introduces a threshold parameter \u03c4 for each feature. The activation function zeroes out pre-activations below \u03c4. Loss function combines L2 reconstruction error and L0 sparsity penalty. Straight-through estimators are used to estimate gradients of the expected loss. Pseudo-derivatives provide gradient signals within a small window around the threshold. Training involves computing gradients over batches and using batch-wise mean for parameter updates.",
        "Research_Impact": "Addresses the challenge of balancing reconstruction fidelity and interpretability in sparse representations of language model activations. JumpReLU SAEs achieve state-of-the-art reconstruction fidelity at given sparsity levels without sacrificing interpretability. This improves upon existing methods like Gated and TopK SAEs, potentially enabling more accurate identification of computational subgraphs and causal mechanisms in language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "clustered_sparse_autoencoders",
        "Title": "Clustered Sparse Autoencoders for Efficient Interpretability of Large Language Models",
        "Experiment": "1. Implement clustering algorithm to group model layers2. Train single SAE for each cluster instead of per-layer3. Evaluate reconstruction performance and sparsity metrics4. Assess downstream task performance using faithfulness/completeness5. Analyze feature interpretability across clustered layers6. Compare computational efficiency to baseline per-layer approach",
        "Technical_Details": "The approach clusters contiguous layers in a large language model and trains a single sparse autoencoder (SAE) per cluster, rather than per individual layer. This reduces the number of SAEs by a factor k, where k is the number of clusters. The method uses the JumpReLU activation function and optimizes an objective combining L2 reconstruction loss and L0 sparsity. Evaluation metrics include L2 loss, R2 score, L0 sparsity, as well as faithfulness and completeness on downstream tasks. The approach is tested with varying k values from 1 to 5, excluding the final layer of the model.",
        "Research_Impact": "This research addresses the computational challenge of training sparse autoencoders for very large language models, which has become a bottleneck in mechanistic interpretability research. By reducing the number of required SAEs, it enables more efficient analysis of state-of-the-art models with billions of parameters. This approach could accelerate progress in understanding the inner workings of advanced AI systems, addressing a key challenge in the field of AI interpretability and safety.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "mutual_feature_regularization",
        "Title": "1",
        "Experiment": "1. Implement MFR technique for SAEs:        - Add reinitializing of SAE weights when too many inactive features detected        - Implement auxiliary penalty to incentivize features present in other SAE decoders    2. Train SAEs with and without MFR on:        - Synthetic dataset with known features        - GPT-2 Small first layer MLP outputs        - EEG data from TUH EEG Corpus    3. Compare reconstruction loss and feature recovery between baseline and MFR SAEs    4. Analyze L2 distance between decoder matrices to assess feature similarity",
        "Technical_Details": "Mutual Feature Regularization (MFR) consists of two main components:    1. Reinitialization: Check for inactive features in SAE hidden state. If too many are detected, reinitialize the weights of the affected SAE.    2. Auxiliary penalty: Add a penalty term to the loss function that encourages features to be present in decoders of other SAEs trained on the same data.        Implementation details:    - Use TopK activation function for sparsity in SAE hidden state    - Train with AdamW optimizer    - Apply cosine warmup for 100 training steps on the auxiliary penalty    - Set auxiliary penalty coefficient to make initial reconstruction loss and penalty equivalent    - Evaluate using reconstruction loss (Euclidean distance between input and output) and feature recovery metrics",
        "Research_Impact": "MFR addresses the challenge of SAEs learning features that are not actually present in the input data, which limits their interpretability. This is a significant issue in mechanistic interpretability, where the goal is to understand the true features and computations of neural networks. By encouraging feature consistency across multiple SAEs, MFR increases the likelihood that learned features correspond to actual input features. This improvement could lead to more reliable and meaningful interpretations of neural network activations, advancing our understanding of how these models process information.",
        "Interestingness": 7,
        "Feasibility": 8,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "switch_sparse_autoencoder",
        "Title": "Switch Sparse Autoencoders",
        "Experiment": "1. Implement Switch layer architecture for sparse autoencoders (SAEs)\n2. Modify existing SAE training pipeline to incorporate Switch layer\n3. Train Switch SAEs on GPT-2 small residual stream activations\n4. Compare performance against TopK, ReLU, and Gated SAEs using metrics like reconstruction MSE, cross-entropy loss recovery, and feature interpretability\n5. Analyze scaling laws by training models with varying numbers of experts (16, 32, 64, 128)\n6. Evaluate expert specialization using nearest neighbor cosine similarity\n7. Perform t-SNE projections to visualize feature clustering\n8. Assess true positive and true negative rates for feature detection",
        "Technical_Details": "The Switch Sparse Autoencoder (Switch SAE) combines the Switch layer architecture with TopK SAEs. It consists of multiple expert SAEs and a trainable routing network. The router computes a probability distribution over experts and routes input activations to the expert with the highest probability. This approach reduces computational costs by avoiding dense matrix multiplications. The model is trained on residual stream activations of GPT-2 small, optimizing for reconstruction MSE. The architecture allows for scaling to a large number of features (up to 34 million in this study) while maintaining computational efficiency. The Switch SAE demonstrates improved performance in terms of reconstruction error vs. sparsity trade-off compared to other SAE variants.",
        "Research_Impact": "A key challenge in mechanistic interpretability is scaling sparse autoencoders to very high widths to identify all features represented in frontier models. This research directly addresses this challenge by introducing the Switch SAE architecture, which reduces the compute cost of training wide SAEs. By leveraging conditional computation, the Switch SAE enables scaling to millions of features while maintaining computational tractability. This advancement allows researchers to probe deeper into the internal representations of large language models, potentially uncovering a more comprehensive set of interpretable features and advancing our understanding of model behavior.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "sparse_autoencoder_improvements",
        "Title": "Sparse Autoencoder Viewer",
        "Experiment": "1. Implement TopK activation function and compare with ReLU and ProLU.\n2. Develop Multi-TopK loss function.\n3. Train autoencoders on GPT-2 small and GPT-4 family models with varying latent sizes.\n4. Evaluate using new metrics: downstream loss, probe loss, explainability, and ablation sparsity.\n5. Analyze scaling laws for MSE, compute, and model size.\n6. Implement and test AuxK loss for reducing dead latents.\n7. Conduct ablation studies on different positions and layers of the models.",
        "Technical_Details": "The paper introduces several technical improvements for training sparse autoencoders:\n1. TopK activation function: Only keeps the k largest latents, zeroing the rest.\n2. Multi-TopK loss: Sums multiple TopK losses with different k values to improve generalization.\n3. AuxK loss: An auxiliary loss that models reconstruction error using top-k dead latents.\n4. Optimization techniques: Using Adam optimizer with specific beta values, EMA of weights, and gradient projection.\n5. Scaling laws: Empirical observations on how MSE scales with compute, number of latents, and sparsity level.\n6. Evaluation metrics: New metrics including downstream loss, probe loss, explainability, and ablation sparsity to better quantify autoencoder quality.\n7. Parallelization strategies: Utilizing data parallel and tensor sharding techniques to handle large models.",
        "Research_Impact": "This research addresses the challenge of training extremely wide and sparse autoencoders, which has been a limiting factor in extracting interpretable features from large language models. Specifically:\n1. It improves the reconstruction-sparsity trade-off, allowing for better feature extraction with fewer active latents.\n2. The introduction of TopK and Multi-TopK activation functions mitigates the overfitting problem observed in ReLU-based autoencoders.\n3. The new evaluation metrics provide a more comprehensive assessment of autoencoder quality, moving beyond simple reconstruction error.\n4. The scaling laws discovered offer insights into the relationship between model size, compute, and autoencoder performance, which can guide future research in this area.\n5. The techniques for reducing dead latents (like AuxK loss) address a common problem in sparse autoencoder training, potentially leading to more efficient feature extraction.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "hierarchical_sae",
        "Title": "Hierarchical Sparse Autoencoders for Multi-Scale Feature Learning in Language Models",
        "Experiment": "1. Implement 2-layer HSAE with curriculum learning\n2. Define composition loss ||W_l * h_{l-1} - h_l||\u2082\u00b2 with L1 penalty on W_l\n3. Train on Gemma-2B activations using progressive layer addition\n4. Measure feature composition sparsity and hierarchical consistency\n5. Implement hierarchical unlearning intervention\n6. Compare against baseline SAE on reconstruction and unlearning\n7. Visualize feature composition patterns\n8. Ablate curriculum learning and loss components",
        "Technical_Details": "The HSAE uses 2 sparse autoencoder layers initially, with dictionary sizes d\u2081=4096 and d\u2082=1024. Layer 1 learns from raw activations with standard TopK sparsity (k\u2081=32). Layer 2 receives concatenated input [x, h\u2081] where x is raw activation and h\u2081 is layer 1 features. The loss function L = L_recon + \u03bb\u2081L_comp + \u03bb\u2082L_skip where: L_recon is standard reconstruction loss, L_comp = ||W\u2082h\u2081 - h\u2082||\u2082\u00b2 + \u03b1||W\u2082||\u2081 encourages sparse feature composition, L_skip ensures each layer can reconstruct x directly. Training uses curriculum learning: (1) Train layer 1 to convergence, (2) Freeze layer 1 and train layer 2, (3) Fine-tune end-to-end with small learning rate. For unlearning, interventions start at layer 2 and progressively move to layer 1 if needed.",
        "Research_Impact": "A major challenge in mechanistic interpretability is understanding how language models compose low-level features into higher-level concepts. Current SAEs struggle to capture this hierarchical structure, making it difficult to trace causal chains of computation. HSAE directly addresses this by explicitly modeling feature composition across multiple scales. The addition of curriculum learning and precise composition metrics makes the approach more practical and measurable. For unlearning tasks, the hierarchical intervention strategy enables more targeted knowledge removal by first attempting to intervene at appropriate abstraction levels. This could improve unlearning performance while minimizing side effects on unrelated capabilities.",
        "Interestingness": 9,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": true
    },
    {
        "Name": "causal_sae",
        "Title": "Causally-Guided Sparse Autoencoders for Mechanistic Interpretability",
        "Experiment": "1. Implement efficient grouped causal intervention:\n   - Forward pass to get base model output\n   - Sample k feature groups based on activation patterns\n   - Parallel intervention computation using grouped matrix operations\n   - Compute smooth causal loss with consistency term\n2. Modify SAE training loop with curriculum:\n   - Start with strong interventions (zeroing)\n   - Gradually transition to subtle interventions (scaling)\n   - Adapt thresholds based on feature statistics\n3. Train on Gemma-2B comparing different grouping strategies\n4. Evaluate using:\n   - Reconstruction and sparsity metrics\n   - Causal consistency scores\n   - Feature diversity measurements\n   - Unlearning benchmark performance\n5. Ablation studies on grouping and curriculum choices",
        "Technical_Details": "The improved CausalSAE uses grouped interventions to reduce computation. For each batch B, sample k groups G_i of size g from active features based on activation patterns. Compute causal loss: L_causal = \u03a3_b\u2208B \u03a3_i\u2208G L_cos(h(x), h(x,G_i)) + \u03bbL_cons(G_i) where h(x) is the model's hidden states, L_cos is smooth cosine loss, and L_cons measures consistency across multiple runs. Groups are formed using LSH clustering on feature activations for efficiency. The curriculum gradually reduces intervention strength \u03b1: h(x,G_i) = h(x) * (1-\u03b1*M_i) where M_i is the intervention mask. Feature diversity is enforced by penalizing cosine similarity between group effects. Implementation uses efficient batch computation with custom CUDA kernels for intervention application.",
        "Research_Impact": "A critical challenge in mechanistic interpretability is ensuring that extracted features actually correspond to meaningful computational elements while maintaining computational feasibility. The improved CausalSAE addresses this through efficient grouped interventions and curriculum learning, making it practical for large models while still optimizing for causally meaningful features. The addition of consistency and diversity terms helps ensure robust, non-redundant feature extraction. This could significantly advance our ability to understand and modify model behavior through interpretable feature manipulation, while being computationally tractable enough for widespread adoption.",
        "Interestingness": 9,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "matryoshka_sae",
        "Title": "Matryoshka Sparse Autoencoders with Stability-Aware Feature Learning",
        "Experiment": "1. Implement progressive masking for nested dictionary structure\n2. Define stability metric using MMLU categories (science, humanities, social sciences) and WikiText\n3. Train on Gemma-2B activations comparing fixed vs stability-weighted L1\n4. Evaluate unlearning using WMDP-bio benchmark with stability-guided intervention\n5. Compare against baseline SAE and hierarchical SAE baselines\n6. Measure cross-task transfer using MMLU category holdouts\n7. Analyze feature stability distribution across model layers\n8. Ablation study on mask progression schedule and stability temperature",
        "Technical_Details": "MatryoshkaSAE uses a single encoder E and decoder D with progressive masking M_i to create nested dictionaries. For dictionary size s_i, M_i is a binary mask keeping top s_i features by stability score. Loss function: L = \u03a3_i \u03bb_i ||D(E(x) \u2299 M_i) - x||\u00b2 + \u03a3_j w_j||f_j||\u2081. Stability scores w_j computed over B={MMLU categories, WikiText} as: w_j = exp(-\u03a3_t\u2208B var(a_j,t)/|B|\u03c4) where a_j,t is activation pattern on task t. Training uses 5-phase curriculum: (1) smallest mask only, (2-5) progressively add larger masks while annealing \u03bb_i. For unlearning, intervention strength \u03b1_j scaled inversely with stability: \u03b1_j = \u03b1_base * (1 - w_j). Implementation uses block-sparse operations and custom CUDA kernels for mask computation.",
        "Research_Impact": "A key challenge in selective unlearning is maintaining model performance on general tasks while removing specific knowledge. Current SAEs struggle to distinguish between features that are core to model capabilities versus those that encode specific facts. MatryoshkaSAE addresses this through stability-aware feature learning that naturally separates foundational features from specialized ones. The progressive masking approach provides an efficient way to learn multiple feature scales while the stability-guided intervention strategy enables more precise knowledge removal. This could lead to better unlearning performance with fewer side effects on general capabilities, as measured by MMLU accuracy retention.",
        "Interestingness": 9,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": true
    },
    {
        "Name": "contrastive_sae",
        "Title": "Contrastive Learning for Feature-Preserving Sparse Autoencoders",
        "Experiment": "1. Implement BERT-based semantic similarity computation\n2. Create hierarchical memory bank structure:\n   - Global bank for distant negatives\n   - Category-specific banks for fine-grained contrast\n3. Implement dynamic sparsity adjustment:\n   - Track feature similarity matrices\n   - Adjust per-feature L1 penalties\n4. Train on Gemma-2B with simplified curriculum:\n   - Use pre-computed BERT similarities\n   - Maintain separate banks per similarity threshold\n5. Evaluate using:\n   - WMDP-bio feature separation\n   - Cross-category distinctness\n   - Unlearning benchmark performance\n   - Computational overhead measurements\n6. Ablation studies on bank structure and penalty adjustment",
        "Technical_Details": "The refined ContrastiveSAE uses a hierarchical contrastive loss: L = L_recon + \u03a3\u1d62 \u03bb\u1d62L_sparse(i) + \u03bb\u2082L_contrast where L_sparse(i) has feature-specific penalties \u03bb\u1d62 adjusted based on collapse risk. L_contrast uses hierarchical negative sampling: L_contrast = -log(exp(sim(z_i,z_i+)/\u03c4) / (exp(sim(z_i,z_i+)/\u03c4) + \u03a3\u2096 \u03b1\u2096\u03a3_{m\u2208M\u2096} exp(sim(z_i,m)/\u03c4))) where M\u2096 are semantically-stratified memory banks and \u03b1\u2096 are importance weights. Semantic similarity is computed using frozen BERT embeddings of MMLU categories: sim(c\u2081,c\u2082) = cosine(BERT(c\u2081), BERT(c\u2082)). Feature collapse prevention uses dynamic penalty adjustment: \u03bb\u1d62 = \u03bb_base * (1 + \u03b2*risk(i)) where risk(i) measures similarity to other features. Implementation uses efficient sparse operations and gradient checkpointing for memory efficiency.",
        "Research_Impact": "The core challenge in mechanistic interpretability is maintaining distinct, interpretable features while being computationally feasible for large models. The refined ContrastiveSAE addresses this through three key improvements: (1) efficient semantic similarity computation using pre-computed BERT embeddings, (2) hierarchical memory banks for scalable contrastive learning, and (3) dynamic sparsity adjustment for active collapse prevention. The approach specifically targets the unlearning benchmark by maintaining clear separation between biology-related and unrelated features. This could significantly improve our ability to selectively modify model knowledge while being practical for large-scale deployment.",
        "Interestingness": 9,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "temporal_curriculum_sae",
        "Title": "Temporal Curriculum Learning for Sparse Autoencoders",
        "Experiment": "1. Analyze feature emergence across LM checkpoints:\n   - Use logarithmically spaced checkpoints (e.g., 1%, 3%, 10%, 30%, 100% training)\n   - Implement efficient sparse probing with stability metrics\n   - Generate temporal feature profiles with confidence scores\n2. Implement temporal curriculum:\n   - Continuous temporal weighting function\n   - Adaptive stability-based feature grouping\n   - Efficient checkpoint caching system\n3. Train on Gemma-2B with refined curriculum:\n   - Use soft temporal assignments\n   - Track stability metrics during training\n   - Implement checkpoint-based early stopping\n4. Evaluate using:\n   - WMDP-bio unlearning performance\n   - Temporal consistency score\n   - Feature stability metrics\n   - Cross-run reproducibility\n   - Computational overhead analysis",
        "Technical_Details": "TCSAE uses efficient temporal profiling with S strategically chosen checkpoints {C_1,...,C_S} where S << T. For each checkpoint, compute sparse feature profiles using Lasso probes with stability scoring: stability(f) = mean(corr(f_i, f_j)) across bootstrap samples. Temporal weighting uses continuous function: w(t,f) = exp(-(t-\u03bc_f)\u00b2/2\u03c3_f\u00b2) where \u03bc_f, \u03c3_f are learned per-feature timing parameters. Loss function: L = L_recon + \u03a3_f \u03bb_f(t)||f||\u2081 where \u03bb_f(t) = \u03bb_base * w(t,f) * stability(f). Implementation uses efficient caching of checkpoint activations and incremental stability updates. For unlearning, intervention strength \u03b1_f = \u03b1_base * (1-w(t_final,f)) * stability(f) to target stable late-emerging features. Added temporal consistency metric: TC = \u03a3_f corr(emergence(f), target_profile(f))",
        "Research_Impact": "A key challenge in selective unlearning is distinguishing between fundamental capabilities and specific knowledge in language models while maintaining computational feasibility. The refined TCSAE addresses this through three key improvements: (1) efficient temporal profiling using strategic checkpoint selection, (2) stability-aware continuous temporal weighting, and (3) precise targeting of stable late-emerging features. The addition of rigorous stability metrics and efficient implementation makes the approach practical for large-scale deployment while potentially improving unlearning performance through more reliable feature targeting.",
        "Interestingness": 9,
        "Feasibility": 8,
        "Novelty": 8,
        "novel": true
    }
]