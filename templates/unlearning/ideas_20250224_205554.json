[
    {
        "Name": "adaptive_sparse_autoencoders",
        "Title": "Adaptive Computation in Sparse Autoencoders",
        "Experiment": "1. Implement Feature Choice and Mutual Choice sparsifying activation functions\n2. Add aux_zipf_loss and aux_k_loss auxiliary losses\n3. Train SAEs with new activation functions and losses on GPT-2 sized residual stream activations\n4. Compare performance (sparsity, reconstruction error, model loss) and feature utilization against baseline TopK SAEs\n5. Analyze distribution of features per token and feature densities\n6. Implement phased training with Mutual Choice followed by Feature Choice",
        "Technical_Details": "The paper proposes two novel sparse autoencoder (SAE) variants: Feature Choice (FC) and Mutual Choice (MC). These allow for variable numbers of active features per token, framing the token-feature matching as a resource allocation problem with a total sparsity upper bound. The FC approach allows each feature to select m tokens to process, where m = M/F (M is total matches, F is number of features). MC combines aspects of FC and token choice. A new aux_zipf_loss is introduced to encourage feature densities to follow a Zipf distribution, mitigating feature under-utilization. The paper also suggests a phased training approach, starting with MC and transitioning to FC.",
        "Research_Impact": "A key challenge in mechanistic interpretability is extracting meaningful, interpretable features from neural networks while maintaining computational efficiency. This research addresses this by introducing adaptive computation in SAEs, allowing more features and computation for difficult-to-reconstruct tokens. The proposed methods achieve higher reconstruction accuracy with fewer dead features compared to standard approaches, potentially leading to more robust and interpretable feature extraction in large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "gated_sparse_autoencoder",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2404.16014v2  [cs.LG]  30 Apr 2024",
        "Experiment": "1. Implement Gated SAE architecture with separate gating and magnitude components\n2. Modify loss function to include L1 penalty on gating activations and auxiliary reconstruction task\n3. Train Gated SAEs on activations from GELU-1L, Pythia-2.8B, and Gemma-7B models\n4. Evaluate performance using loss recovered vs. L0 sparsity metrics\n5. Compare against baseline SAEs using Pareto frontier analysis\n6. Conduct shrinkage analysis and human interpretability study",
        "Technical_Details": "The Gated SAE architecture separates feature detection and magnitude estimation by using two sets of weights: w_gate for determining active features and w_mag for estimating magnitudes. The encoder output is computed as h = ReLU(w_gate * x + b_gate) * (w_mag * x + b_mag). The loss function includes an L1 penalty on ReLU(w_gate * x + b_gate) to encourage sparsity, and an auxiliary reconstruction task using these gating activations. Weight tying is employed between encoder and decoder. The architecture can be interpreted as a single-layer encoder with a parameterized JumpReLU activation function.",
        "Research_Impact": "A key challenge in mechanistic interpretability is finding sparse, interpretable features in language model activations. Gated SAEs address this by improving dictionary learning, achieving better reconstruction fidelity at given sparsity levels compared to standard SAEs. They also mitigate the shrinkage problem inherent in L1 regularization, potentially leading to more accurate feature representations. This could enable more reliable extraction of interpretable features across different model sizes and activation sites, advancing our ability to understand the internal workings of large language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "batchtopk_sae",
        "Title": "Information Processing Systems (NeurIPS 2024).arXiv:2412.06410v1  [cs.LG]  9 Dec 2024",
        "Experiment": "1. Implement BatchTopK function to replace sample-level TopK operation.2. Modify SAE training procedure to use BatchTopK for sparsity constraint.3. Implement threshold estimation method for inference.4. Train SAEs on GPT-2 Small and Gemma 2 2B activations using both TopK and BatchTopK.5. Compare reconstruction quality (normalized MSE) and impact on language modeling (cross-entropy degradation).6. Evaluate performance across different dictionary sizes (3072, 6144, 12288, 24576).7. Analyze latent activation patterns and flexibility in latent allocation.",
        "Technical_Details": "BatchTopK is a novel training method for Sparse Autoencoders (SAEs) that replaces the sample-level TopK operation with a batch-level constraint. Instead of enforcing a fixed number of active latents per sample, BatchTopK selects the top activations across the entire batch. This allows for variable sparsity per sample, with some samples using more latents and others using fewer. The method introduces a batch dependency during training, which is addressed during inference by estimating a global threshold parameter. This threshold is calculated as the average of minimum positive activation values across multiple batches. The SAE is trained on language model activations (e.g., from the residual stream) using a large text corpus. The loss function combines L2 reconstruction error with an L0 sparsity penalty. Experiments were conducted on GPT-2 Small and Gemma 2 2B models, using dictionary sizes of 3072, 6144, 12288, and 24576, with a bandwidth parameter of 0.001 and the Adam optimizer (learning rate 3e-4).",
        "Research_Impact": "A significant challenge in mechanistic interpretability is developing methods to effectively analyze and interpret the internal representations of large language models. BatchTopK SAEs address this challenge by providing a more flexible and efficient way to compress and represent model activations. By allowing variable sparsity per sample, BatchTopK can potentially capture more nuanced and diverse activation patterns compared to fixed-sparsity methods. This improvement in reconstruction quality, as demonstrated by lower normalized MSE and reduced cross-entropy degradation, could lead to more accurate and insightful interpretations of model behavior. Furthermore, the ability to adaptively allocate latents based on sample complexity aligns well with the varying information content in natural language, potentially revealing more about how language models process different types of inputs.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "jumprelu_sae",
        "Title": "\u00a92024 Google DeepMind. All rights reservedarXiv:2407.14435v3  [cs.LG]  1 Aug 2024",
        "Experiment": "Implement JumpReLU activation function for sparse autoencoders. Modify existing SAE architecture to use JumpReLU instead of ReLU. Train JumpReLU SAEs on language model activations (e.g. Gemma 2 9B). Compare reconstruction fidelity and sparsity trade-offs against Gated and TopK SAEs. Conduct manual and automated interpretability studies on learned features.",
        "Technical_Details": "JumpReLU SAE introduces a threshold parameter \u03c4 for each feature. The activation function zeroes out pre-activations below \u03c4. Loss function combines L2 reconstruction error and L0 sparsity penalty. Straight-through estimators are used to estimate gradients of the expected loss. Pseudo-derivatives provide gradient signals within a small window around the threshold. Training involves computing gradients over batches and using batch-wise mean for parameter updates.",
        "Research_Impact": "Addresses the challenge of balancing reconstruction fidelity and interpretability in sparse representations of language model activations. JumpReLU SAEs achieve state-of-the-art reconstruction fidelity at given sparsity levels without sacrificing interpretability. This improves upon existing methods like Gated and TopK SAEs, potentially enabling more accurate identification of computational subgraphs and causal mechanisms in language models.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "clustered_sparse_autoencoders",
        "Title": "Clustered Sparse Autoencoders for Efficient Interpretability of Large Language Models",
        "Experiment": "1. Implement clustering algorithm to group model layers2. Train single SAE for each cluster instead of per-layer3. Evaluate reconstruction performance and sparsity metrics4. Assess downstream task performance using faithfulness/completeness5. Analyze feature interpretability across clustered layers6. Compare computational efficiency to baseline per-layer approach",
        "Technical_Details": "The approach clusters contiguous layers in a large language model and trains a single sparse autoencoder (SAE) per cluster, rather than per individual layer. This reduces the number of SAEs by a factor k, where k is the number of clusters. The method uses the JumpReLU activation function and optimizes an objective combining L2 reconstruction loss and L0 sparsity. Evaluation metrics include L2 loss, R2 score, L0 sparsity, as well as faithfulness and completeness on downstream tasks. The approach is tested with varying k values from 1 to 5, excluding the final layer of the model.",
        "Research_Impact": "This research addresses the computational challenge of training sparse autoencoders for very large language models, which has become a bottleneck in mechanistic interpretability research. By reducing the number of required SAEs, it enables more efficient analysis of state-of-the-art models with billions of parameters. This approach could accelerate progress in understanding the inner workings of advanced AI systems, addressing a key challenge in the field of AI interpretability and safety.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "mutual_feature_regularization",
        "Title": "1",
        "Experiment": "1. Implement MFR technique for SAEs:        - Add reinitializing of SAE weights when too many inactive features detected        - Implement auxiliary penalty to incentivize features present in other SAE decoders    2. Train SAEs with and without MFR on:        - Synthetic dataset with known features        - GPT-2 Small first layer MLP outputs        - EEG data from TUH EEG Corpus    3. Compare reconstruction loss and feature recovery between baseline and MFR SAEs    4. Analyze L2 distance between decoder matrices to assess feature similarity",
        "Technical_Details": "Mutual Feature Regularization (MFR) consists of two main components:    1. Reinitialization: Check for inactive features in SAE hidden state. If too many are detected, reinitialize the weights of the affected SAE.    2. Auxiliary penalty: Add a penalty term to the loss function that encourages features to be present in decoders of other SAEs trained on the same data.        Implementation details:    - Use TopK activation function for sparsity in SAE hidden state    - Train with AdamW optimizer    - Apply cosine warmup for 100 training steps on the auxiliary penalty    - Set auxiliary penalty coefficient to make initial reconstruction loss and penalty equivalent    - Evaluate using reconstruction loss (Euclidean distance between input and output) and feature recovery metrics",
        "Research_Impact": "MFR addresses the challenge of SAEs learning features that are not actually present in the input data, which limits their interpretability. This is a significant issue in mechanistic interpretability, where the goal is to understand the true features and computations of neural networks. By encouraging feature consistency across multiple SAEs, MFR increases the likelihood that learned features correspond to actual input features. This improvement could lead to more reliable and meaningful interpretations of neural network activations, advancing our understanding of how these models process information.",
        "Interestingness": 7,
        "Feasibility": 8,
        "Novelty": 6,
        "novel": false
    },
    {
        "Name": "switch_sparse_autoencoder",
        "Title": "Switch Sparse Autoencoders",
        "Experiment": "1. Implement Switch layer architecture for sparse autoencoders (SAEs)\n2. Modify existing SAE training pipeline to incorporate Switch layer\n3. Train Switch SAEs on GPT-2 small residual stream activations\n4. Compare performance against TopK, ReLU, and Gated SAEs using metrics like reconstruction MSE, cross-entropy loss recovery, and feature interpretability\n5. Analyze scaling laws by training models with varying numbers of experts (16, 32, 64, 128)\n6. Evaluate expert specialization using nearest neighbor cosine similarity\n7. Perform t-SNE projections to visualize feature clustering\n8. Assess true positive and true negative rates for feature detection",
        "Technical_Details": "The Switch Sparse Autoencoder (Switch SAE) combines the Switch layer architecture with TopK SAEs. It consists of multiple expert SAEs and a trainable routing network. The router computes a probability distribution over experts and routes input activations to the expert with the highest probability. This approach reduces computational costs by avoiding dense matrix multiplications. The model is trained on residual stream activations of GPT-2 small, optimizing for reconstruction MSE. The architecture allows for scaling to a large number of features (up to 34 million in this study) while maintaining computational efficiency. The Switch SAE demonstrates improved performance in terms of reconstruction error vs. sparsity trade-off compared to other SAE variants.",
        "Research_Impact": "A key challenge in mechanistic interpretability is scaling sparse autoencoders to very high widths to identify all features represented in frontier models. This research directly addresses this challenge by introducing the Switch SAE architecture, which reduces the compute cost of training wide SAEs. By leveraging conditional computation, the Switch SAE enables scaling to millions of features while maintaining computational tractability. This advancement allows researchers to probe deeper into the internal representations of large language models, potentially uncovering a more comprehensive set of interpretable features and advancing our understanding of model behavior.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 8,
        "novel": false
    },
    {
        "Name": "sparse_autoencoder_improvements",
        "Title": "Sparse Autoencoder Viewer",
        "Experiment": "1. Implement TopK activation function and compare with ReLU and ProLU.\n2. Develop Multi-TopK loss function.\n3. Train autoencoders on GPT-2 small and GPT-4 family models with varying latent sizes.\n4. Evaluate using new metrics: downstream loss, probe loss, explainability, and ablation sparsity.\n5. Analyze scaling laws for MSE, compute, and model size.\n6. Implement and test AuxK loss for reducing dead latents.\n7. Conduct ablation studies on different positions and layers of the models.",
        "Technical_Details": "The paper introduces several technical improvements for training sparse autoencoders:\n1. TopK activation function: Only keeps the k largest latents, zeroing the rest.\n2. Multi-TopK loss: Sums multiple TopK losses with different k values to improve generalization.\n3. AuxK loss: An auxiliary loss that models reconstruction error using top-k dead latents.\n4. Optimization techniques: Using Adam optimizer with specific beta values, EMA of weights, and gradient projection.\n5. Scaling laws: Empirical observations on how MSE scales with compute, number of latents, and sparsity level.\n6. Evaluation metrics: New metrics including downstream loss, probe loss, explainability, and ablation sparsity to better quantify autoencoder quality.\n7. Parallelization strategies: Utilizing data parallel and tensor sharding techniques to handle large models.",
        "Research_Impact": "This research addresses the challenge of training extremely wide and sparse autoencoders, which has been a limiting factor in extracting interpretable features from large language models. Specifically:\n1. It improves the reconstruction-sparsity trade-off, allowing for better feature extraction with fewer active latents.\n2. The introduction of TopK and Multi-TopK activation functions mitigates the overfitting problem observed in ReLU-based autoencoders.\n3. The new evaluation metrics provide a more comprehensive assessment of autoencoder quality, moving beyond simple reconstruction error.\n4. The scaling laws discovered offer insights into the relationship between model size, compute, and autoencoder performance, which can guide future research in this area.\n5. The techniques for reducing dead latents (like AuxK loss) address a common problem in sparse autoencoder training, potentially leading to more efficient feature extraction.",
        "Interestingness": 8,
        "Feasibility": 7,
        "Novelty": 7,
        "novel": false
    },
    {
        "Name": "targeted_sparsity_sae",
        "Title": "Permutation-Tested Targeted Sparsity for Robust Knowledge Unlearning",
        "Experiment": "1. Implement permutation test for feature significance\n2. Add precision/recall validation metrics\n3. Include multiple testing correction\n4. Train SAE with validated penalty assignments\n5. Compare unlearning performance on WMDP-bio and MMLU\n6. Analyze false positive/negative rates in feature identification",
        "Technical_Details": "Analysis Phase:\n1. Process N_batch = 50 batches of size 512 from each dataset\n2. For each feature i:\n   - Compute base activation rates: p_forget[i], p_retain[i]\n   - Perform permutation test (1000 permutations)\n   - Apply Bonferroni correction: p_adj[i] = min(p_value[i] * n_features, 1.0)\n   - Calculate confidence: conf[i] = -log10(p_adj[i])\n3. Validate on held-out data:\n   - Compute precision/recall on held-out batches\n   - Require precision > 0.8 for identified features\n\nTraining Phase:\nPenalty multiplier m[i] for feature i:\nm[i] = 1.0 + 0.5 * min(conf[i] / conf_threshold, 1.0) * passed_validation[i]\n\nLoss function:\nL = reconstruction_loss + base_penalty * sum_i(m[i] * |activation[i]|)\n\nHyperparameters:\n- base_penalty: 0.04\n- N_batch: 50\n- batch_size: 512\n- n_permutations: 1000\n- max_multiplier: 1.5\n- precision_threshold: 0.8",
        "Rationale": "The final refinements provide several key improvements:\n1. Permutation tests handle sequential dependencies in text data\n2. Precision/recall metrics ensure reliable feature identification\n3. Bonferroni correction controls false positive rate\n4. Larger batches with fewer iterations maintain statistical power while reducing computation\n\nExpected improvements in unlearning are well-justified:\n1. More reliable feature identification through appropriate statistical testing\n2. Reduced false positives from multiple testing correction\n3. Validated feature selection through precision threshold\n4. Efficient computation through optimized batch processing\n\nThe approach makes minimal assumptions while providing robust, statistically-sound feature identification and penalty assignment.",
        "Implementation_Plan": "1. Implement permutation test function\n2. Add precision/recall computation\n3. Include Bonferroni correction\n4. Modify penalty calculation\n5. Update configuration parameters\n6. Add detailed validation logging",
        "novel": true
    },
    {
        "Name": "chunk_variance_sae",
        "Title": "Chunk-based Activation Variance Analysis for Knowledge Unlearning",
        "Experiment": "1. Implement chunk-based activation analysis\n2. Add variance-based feature selection\n3. Compute dataset-relative thresholds\n4. Compare unlearning performance against baseline\n5. Analyze preserved model capabilities\n6. Test different chunk sizes",
        "Technical_Details": "The method analyzes activation patterns in fixed chunks:\n1. Split data into chunks of size context_length (e.g. 128 tokens)\n2. For each feature i, compute:\n   - chunk_rates[i] = mean activation rate per chunk\n   - rate_variance[i] = variance of chunk_rates\n   - variance_ratio[i] = rate_variance_forget[i] / rate_variance_retain[i]\n3. Compute percentile thresholds:\n   - ratio_threshold = 90th percentile of variance_ratio\n4. Feature selection criteria:\n   - retain_sparsity[i] < retain_threshold\n   - forget_sparsity[i] > forget_threshold\n   - variance_ratio[i] > ratio_threshold\n5. Parameters:\n   - chunk_size: matches model context length\n   - minimum_chunks: 500 (balance between reliability and efficiency)\n   - percentile_threshold: 90",
        "Rationale": "1. Features specific to dangerous knowledge should show:\n   - Higher activation variance in forget set (strong activation for relevant content)\n   - Lower activation variance in retain set (more uniform or inactive)\n   - Variance ratios in the top percentile across features\n2. Using percentile-based thresholds:\n   - Naturally adapts to data distribution\n   - Robust to outliers\n   - Provides consistent feature selection pressure\n3. Fixed chunk size matching context length:\n   - Aligns with model's natural processing units\n   - Avoids boundary effects\n   - Computationally efficient\n4. Simplified criteria focus on most reliable signals:\n   - Variance ratio captures temporal clustering\n   - Sparsity thresholds ensure basic feature relevance\n   - Percentile selection maintains consistent feature count",
        "Implementation_Plan": "1. Add chunk_analysis.py for chunk-based statistics\n2. Modify feature_selection.py to use percentile thresholds\n3. Update unlearning evaluation criteria\n4. Add configuration for chunk size and percentile\n5. Implement basic statistics logging\n6. Add distribution plots for variance ratios",
        "novel": true
    },
    {
        "Name": "sequential_correlation_sae",
        "Title": "Adaptive Sequential Correlation Analysis for Knowledge Unlearning",
        "Experiment": "1. Implement tokenizer-aware correlation analysis\n2. Add robust statistics computation\n3. Train SAE with adaptive selection method\n4. Compare unlearning performance on WMDP-bio\n5. Analyze MMLU preservation\n6. Evaluate robustness across different models",
        "Technical_Details": "Adaptive correlation analysis method:\n1. For each feature i:\n   - window_size = compute_avg_tokens_per_word(tokenizer)\n   - activation_sequence[i] = binary vector of feature activations\n   - corr[i] = mean correlation in adaptive window\n   - ema_corr[i] = exponential moving average of corr[i]\n2. Feature selection criteria:\n   - retain_sparsity[i] < retain_threshold\n   - forget_sparsity[i] > forget_threshold\n   - correlation_ratio[i] = ema_corr_forget[i] / ema_corr_retain[i]\n   - ratio_threshold = median(correlation_ratio) + mad(correlation_ratio)\n3. Parameters:\n   - window_size = avg_tokens_per_word (computed)\n   - ema_decay = 1 - (1/n_batches_per_epoch)\n   - min_activations = max(100, 0.1% of dataset size)",
        "Rationale": "1. Tokenizer-aware window size:\n   - Adapts to model's token granularity\n   - Matches natural language structure\n   - No manual tuning needed\n2. Robust statistics provide:\n   - Resistance to outliers (median + mad)\n   - No distribution assumptions\n   - Stable feature selection\n3. Adaptive EMA decay:\n   - Meaningful averaging over dataset\n   - Automatically scales with data size\n   - No manual tuning required\n4. Implementation benefits:\n   - Self-tuning parameters\n   - Robust across different models\n   - Minimal hyperparameter sensitivity",
        "Implementation_Plan": "1. Create tokenizer_analysis.py for window size computation\n2. Add robust_statistics.py for median/mad\n3. Update feature_selection.py with adaptive criteria\n4. Modify training loop to use dynamic window\n5. Add automatic parameter computation\n6. Implement adaptive parameter logging",
        "novel": false
    },
    {
        "Name": "semantic_cluster_sae",
        "Title": "Architecture-aware Semantic Clustering for Knowledge Unlearning",
        "Experiment": "1. Implement decoder weight similarity computation\n2. Add model-based cluster count selection\n3. Modify feature selection to use robust cluster statistics\n4. Train SAE with simplified cluster selection\n5. Compare performance on WMDP-bio and MMLU\n6. Analyze relationship between clusters and model components",
        "Technical_Details": "Method:\n1. Compute feature similarities:\n   - sim[i,j] = cosine_similarity(decoder_weights[i], decoder_weights[j])\n2. Set cluster count based on model:\n   - n_clusters = n_attention_heads * n_layers\n   - provides architectural grounding for clustering\n3. Compute cluster statistics:\n   - cluster_forget_rate[c] = 75th_percentile(forget_rate[i] for i in cluster c)\n   - cluster_retain_rate[c] = 75th_percentile(retain_rate[i] for i in cluster c)\n4. Feature selection:\n   - Compute cluster_ratio[c] = cluster_forget_rate[c] / cluster_retain_rate[c]\n   - Select features from clusters with ratio > median(cluster_ratio) + mad(cluster_ratio)\n   - Use only features with individual retain_rate < 0.1\n5. Parameters:\n   - retain_threshold: 0.1 (fixed)\n   - cluster selection uses robust statistics (median + MAD)",
        "Rationale": "1. Architecture-based cluster count:\n   - Matches model's natural feature grouping\n   - Scales automatically with model size\n   - No arbitrary parameters\n2. Robust cluster statistics:\n   - 75th percentile less sensitive to outliers than max\n   - Captures cluster tendency without extreme values\n   - More reliable for feature selection\n3. Simplified selection criteria:\n   - Median + MAD provides robust threshold\n   - Retain threshold prevents over-unlearning\n   - No complex parameter tuning needed\n4. Expected improvements:\n   - Better alignment with model architecture improves feature identification\n   - Robust statistics reduce sensitivity to noise\n   - Simplified approach more likely to generalize\n5. Benefits for unlearning:\n   - Clusters help identify complete sets of related dangerous features\n   - Architecture awareness preserves model's computational structure\n   - Robust statistics prevent over-aggressive feature removal",
        "Implementation_Plan": "1. Create similarity.py for weight-based similarity\n2. Add architecture_clustering.py for model-based clustering\n3. Update feature_selection.py with robust statistics\n4. Modify training loop for cluster-based selection\n5. Add architecture-specific logging\n6. Implement cluster analysis tools",
        "novel": true
    },
    {
        "Name": "aligned_entropy_sae",
        "Title": "Position-Aligned Entropy Selection for Precise Knowledge Unlearning",
        "Experiment": "1. Implement position-wise entropy computation\n2. Add distribution-based threshold selection\n3. Include biology-specific validation\n4. Train SAE with refined entropy selection\n5. Compare unlearning performance on WMDP-bio\n6. Analyze MMLU preservation with focus on biology vs other subjects\n7. Measure position-dependence of feature selection",
        "Technical_Details": "Method:\n1. For each context position p:\n   - Collect activations at position p across batches\n   - entropy[f,p] = -sum(p_i * log(p_i)) for feature f at position p\n   - avg_entropy[f] = mean(entropy[f,p]) across positions\n2. For each feature f:\n   - forget_entropy[f] = avg_entropy on forget dataset\n   - retain_entropy[f] = avg_entropy on retain dataset\n   - entropy_diff[f] = retain_entropy[f] - forget_entropy[f]\n3. Compute thresholds:\n   - diff_threshold = median(entropy_diff) + mad(entropy_diff)\n   where mad = median absolute deviation\n4. Feature selection:\n   - retain_sparsity[f] < 0.1  # Standard threshold\n   - forget_sparsity[f] > 0.3  # Standard threshold\n   - entropy_diff[f] > diff_threshold\n5. Validation:\n   - Compare performance drop between MMLU biology vs other subjects\n   - Accept features where biology drop > 2 * mean drop on other subjects",
        "Rationale": "1. Position-aligned entropy advantages:\n   - Accounts for transformer position-dependence\n   - Reduces noise from mixing different context positions\n   - More accurate measurement of feature predictability\n2. Distribution-based thresholds:\n   - Automatically adapts to model and dataset\n   - Robust to outliers through median + MAD\n   - No manual tuning required\n3. Biology-focused validation:\n   - Directly measures specificity of unlearning\n   - Clear comparison between related and unrelated subjects\n   - Concrete criterion for feature selection\n4. Expected improvements:\n   - More precise feature identification through position-aware analysis\n   - Better threshold selection through distribution-based approach\n   - Clearer validation through subject-specific comparison",
        "Implementation_Plan": "1. Create position_entropy.py for aligned analysis\n2. Add threshold_selection.py for robust statistics\n3. Implement subject_validation.py for MMLU analysis\n4. Update feature_selection.py with new criteria\n5. Add position-wise entropy logging\n6. Create subject-specific performance plots",
        "novel": true
    }
]