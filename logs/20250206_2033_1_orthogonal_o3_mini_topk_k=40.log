Using GPUs: [0]
Using OpenAI API with model o3-mini-2025-01-31.

Generating idea 1/1
Iteration 1/5
!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

THOUGHT:
Building on the previous prototype "sparse_orthogonal_sae", I propose a refinement that adaptively scales the orthogonality penalty based on both the computed sparsity mask intersections and the individual feature activation density. The intuition is to penalize more heavily those feature pairs that not only share overlapping sparsity patterns (indicating potential redundancy) but also activate frequently, as these are more likely to contribute to polysemanticity. In our improved proposal, we dynamically compute a density factor from the activation frequencies of each latent feature, then combine it with the existing competition coefficients to form an adaptive weight that modulates the pairwise orthogonality penalty. This change requires only modifications to how we compute the orthogonality term without introducing any additional architectural complexity or nonstandard training schemes. We expect this adaptive mechanism to yield more consistent and interpretable feature separation by selectively targeting overactive features while sparing rare or specialized ones. Ultimately, the modified objective should improve performance on sparse_probing and core benchmarks by reducing feature absorption and enhancing distinctiveness of latent representations.

NEW IDEA JSON:
```json
{
  "Name": "adaptive_ortho_sae",
  "Title": "Adaptive Orthogonality Constraints for Enhanced Feature Disentanglement in Sparse Autoencoders",
  "Experiment": "1. Compute standard top-k activation masks during encoding. 2. Measure per-feature activation frequency to derive a density factor for each latent. 3. Calculate pairwise competition coefficients by combining the normalized intersection of sparsity masks with the average density factors of the features involved. 4. Integrate an adaptive orthogonality loss term L_adaptive = λ_2 * Σ_(i,j) a_(ij) * |f_i^T f_j|, where a_(ij) = c_(ij) * ((density_i + density_j)/2), into the overall loss. 5. Train the SAE on google/gemma-2-2b using standard datasets. 6. Benchmark performance against baseline SAE and other orthogonal constraints along metrics such as sparse_probing and core.",
  "Technical_Details": "The proposed model computes an activation density for each latent feature over each mini-batch. This density is normalized relative to the maximum activation frequency within the batch. The pairwise competition coefficient a_(ij) is computed by multiplying the standard sparsity intersection coefficient c_(ij) (derived from top-k activation masks) with the average of the normalized activation densities of features i and j. The resulting adaptive orthogonality loss, added to the reconstruction and sparsity losses, penalizes pairs of features that both frequently activate and exhibit high mask intersections, thereby encouraging them to specialize in distinct concepts. The additional computations are lightweight and involve standard tensor operations.",
  "Implementation_Plan": "1. Modify the encode function in AutoEncoderTopK to record per-feature activation frequencies over each mini-batch. 2. Add a new function to compute normalized density factors from these frequencies. 3. Adjust the loss function in TrainerTopK to include an adaptive orthogonality term: compute pairwise cosine similarities for latent features, derive adaptive weights a_(ij) from the density factors and mask intersections, and sum the penalty over all feature pairs. 4. Introduce a configuration parameter for the competition threshold and λ_2 (adaptive orthogonality weight). 5. Update logging to monitor feature density statistics and pairwise correlations. 6. Run experiments and compare performance on sparse_probing and core benchmarks.",
  "Interestingness_Evaluation": "The idea is interesting as it connects activation density with sparsity-pattern intersections to provide a nuanced and targeted orthogonality regularization that directly addresses feature competition.",
  "Interestingness": 9,
  "Feasibility_Evaluation": "The modifications involve extending existing computation of top-k masks with density tracking and simple adaptive scaling, which are lightweight and require only moderate additions to the codebase; they can be implemented and run within the stated constraints.",
  "Feasibility": 9,
  "Novelty_Evaluation": "The novelty lies in the adaptive scaling of orthogonality penalties based on dynamic feature frequency, offering a refined approach to disentangling overlapping latent features that builds on existing techniques without excessive complexity.",
  "Novelty": 8,
  "Expected_Research_Impact": "This approach is expected to improve the interpretability and monosemanticity of latent features by reducing feature absorption, thereby positively impacting key benchmarks such as sparse_probing and core.",
  "Research_Impact": 9,
  "Overall_Score": 9.1,
  "Abstract": "We propose an adaptive orthogonality constraint for sparse autoencoders that enhances feature disentanglement by combining sparsity mask intersections with activation density information. By computing a normalized density factor for each latent feature and integrating it with the standard competition coefficient, our adaptive penalty selectively targets frequently activated, overlapping features. This refined regularization technique is seamlessly incorporated into the existing SAE framework with lightweight modifications. We detail the implementation and evaluation methodology on a large-scale language model, demonstrating the potential of our approach to yield more interpretable and monosemantic latent representations, thereby advancing the state-of-the-art in mechanistic interpretability."
}
```
@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

{'Name': 'adaptive_ortho_sae', 'Title': 'Adaptive Orthogonality Constraints for Enhanced Feature Disentanglement in Sparse Autoencoders', 'Experiment': '1. Compute standard top-k activation masks during encoding. 2. Measure per-feature activation frequency to derive a density factor for each latent. 3. Calculate pairwise competition coefficients by combining the normalized intersection of sparsity masks with the average density factors of the features involved. 4. Integrate an adaptive orthogonality loss term L_adaptive = λ_2 * Σ_(i,j) a_(ij) * |f_i^T f_j|, where a_(ij) = c_(ij) * ((density_i + density_j)/2), into the overall loss. 5. Train the SAE on google/gemma-2-2b using standard datasets. 6. Benchmark performance against baseline SAE and other orthogonal constraints along metrics such as sparse_probing and core.', 'Technical_Details': 'The proposed model computes an activation density for each latent feature over each mini-batch. This density is normalized relative to the maximum activation frequency within the batch. The pairwise competition coefficient a_(ij) is computed by multiplying the standard sparsity intersection coefficient c_(ij) (derived from top-k activation masks) with the average of the normalized activation densities of features i and j. The resulting adaptive orthogonality loss, added to the reconstruction and sparsity losses, penalizes pairs of features that both frequently activate and exhibit high mask intersections, thereby encouraging them to specialize in distinct concepts. The additional computations are lightweight and involve standard tensor operations.', 'Implementation_Plan': '1. Modify the encode function in AutoEncoderTopK to record per-feature activation frequencies over each mini-batch. 2. Add a new function to compute normalized density factors from these frequencies. 3. Adjust the loss function in TrainerTopK to include an adaptive orthogonality term: compute pairwise cosine similarities for latent features, derive adaptive weights a_(ij) from the density factors and mask intersections, and sum the penalty over all feature pairs. 4. Introduce a configuration parameter for the competition threshold and λ_2 (adaptive orthogonality weight). 5. Update logging to monitor feature density statistics and pairwise correlations. 6. Run experiments and compare performance on sparse_probing and core benchmarks.', 'Interestingness_Evaluation': 'The idea is interesting as it connects activation density with sparsity-pattern intersections to provide a nuanced and targeted orthogonality regularization that directly addresses feature competition.', 'Interestingness': 9, 'Feasibility_Evaluation': 'The modifications involve extending existing computation of top-k masks with density tracking and simple adaptive scaling, which are lightweight and require only moderate additions to the codebase; they can be implemented and run within the stated constraints.', 'Feasibility': 9, 'Novelty_Evaluation': 'The novelty lies in the adaptive scaling of orthogonality penalties based on dynamic feature frequency, offering a refined approach to disentangling overlapping latent features that builds on existing techniques without excessive complexity.', 'Novelty': 8, 'Expected_Research_Impact': 'This approach is expected to improve the interpretability and monosemanticity of latent features by reducing feature absorption, thereby positively impacting key benchmarks such as sparse_probing and core.', 'Research_Impact': 9, 'Overall_Score': 9.1, 'Abstract': 'We propose an adaptive orthogonality constraint for sparse autoencoders that enhances feature disentanglement by combining sparsity mask intersections with activation density information. By computing a normalized density factor for each latent feature and integrating it with the standard competition coefficient, our adaptive penalty selectively targets frequently activated, overlapping features. This refined regularization technique is seamlessly incorporated into the existing SAE framework with lightweight modifications. We detail the implementation and evaluation methodology on a large-scale language model, demonstrating the potential of our approach to yield more interpretable and monosemantic latent representations, thereby advancing the state-of-the-art in mechanistic interpretability.'}
Iteration 2/5
!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

THOUGHT:
In this revised idea, I've refined the adaptive orthogonality concept by incorporating a temporal moving average for the activation density factors. This helps stabilize the density estimates across mini-batches, mitigating the potential volatility of instantaneous batch statistics. The temporal smoothing will yield more robust and consistent adaptive coefficients, leading to better disentanglement of features while still relying on simple and standard operations. The novelty remains high because it leverages temporal information in a natural yet underexplored manner for this context. Overall, the modifications are minimal but impactful, and all ratings remain above the required threshold. I am done.

NEW IDEA JSON:
```json
{
  "Name": "temp_adaptive_ortho_sae",
  "Title": "Temporal Adaptive Orthogonality Constraints for Enhanced Feature Disentanglement in Sparse Autoencoders",
  "Experiment": "1. In the encoding step, compute standard top-k activation masks and record per-feature activation frequencies. 2. Maintain an exponential moving average (EMA) of the activation densities over time. 3. Compute pairwise competition coefficients by combining the normalized intersection of sparsity masks with the averaged density factors from the EMA. 4. Integrate a temporal adaptive orthogonality loss term L_adaptive = λ_2 * Σ_(i,j) a_(ij) * |f_i^T f_j|, where a_(ij) = c_(ij) * ((EMA_density_i + EMA_density_j)/2), into the overall loss. 5. Train the SAE on google/gemma-2-2b using standard datasets and evaluate using benchmarks such as sparse_probing and core.",
  "Technical_Details": "The modified SAE computes an EMA of the activation density for each latent feature to capture temporal stability. This EMA is normalized relative to the maximum observed density over time. The pairwise competition coefficient a_(ij) is then obtained by multiplying the standard sparsity intersection coefficient c_(ij) (derived from top-k activation masks) with the mean of the EMA density factors for features i and j. The resulting temporal adaptive orthogonality loss is added to the reconstruction and sparsity losses, penalizing pairs of features that frequently activate in overlapping contexts over time, thereby promoting distinct feature specialization. All additional computations are lightweight, leveraging standard tensor operations and an EMA update.",
  "Implementation_Plan": "1. Modify the encode function in AutoEncoderTopK to update a per-feature EMA of activation frequencies using a fixed decay factor. 2. Add a function to compute normalized EMA density factors. 3. Adjust the loss function in TrainerTopK to include the temporal adaptive orthogonality term by computing pairwise cosine similarities for latent features and deriving adaptive weights a_(ij) from the EMA densities and mask intersections. 4. Introduce configuration parameters for the EMA decay factor, competition threshold, and λ_2 (adaptive orthogonality weight). 5. Update logging to monitor EMA density statistics and pairwise correlations. 6. Run experiments to compare the performance against baseline SAE models.",
  "Interestingness_Evaluation": "The refined idea is highly interesting as it leverages temporal information to stabilize density measurements, offering a nuanced improvement over static adaptive orthogonality that directly targets feature overlap.",
  "Interestingness": 9,
  "Feasibility_Evaluation": "Incorporating an EMA for density measurements requires minimal extra computation and code changes, making the approach feasible without introducing complexity beyond the current framework.",
  "Feasibility": 9,
  "Novelty_Evaluation": "The novelty lies in the integration of temporal smoothing with adaptive orthogonality constraints, representing an elegant refinement that remains within the bounds of standard practices while offering a fresh perspective.",
  "Novelty": 9,
  "Expected_Research_Impact": "The inclusion of temporal smoothing is expected to further improve feature disentanglement and interpretability, which should positively influence the sparse_probing and core benchmark results.",
  "Research_Impact": 9,
  "Overall_Score": 9.2,
  "Abstract": "We propose a refined regularization approach for sparse autoencoders that incorporates temporal smoothing into adaptive orthogonality constraints. Our method maintains an exponential moving average of per-feature activation densities, which is combined with sparsity mask intersections to compute adaptive pairwise penalties. By penalizing pairs of frequently co-activating features in a temporally stable manner, this approach encourages distinct feature specialization without adding significant computational cost. We detail the implementation of the temporal adaptive orthogonality loss within the existing SAE framework and outline the evaluation methodology on a large-scale language model. This method aims to improve the interpretability and monotonicity of latent representations while remaining within standard modeling practices."
}
```
@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

{'Name': 'temp_adaptive_ortho_sae', 'Title': 'Temporal Adaptive Orthogonality Constraints for Enhanced Feature Disentanglement in Sparse Autoencoders', 'Experiment': '1. In the encoding step, compute standard top-k activation masks and record per-feature activation frequencies. 2. Maintain an exponential moving average (EMA) of the activation densities over time. 3. Compute pairwise competition coefficients by combining the normalized intersection of sparsity masks with the averaged density factors from the EMA. 4. Integrate a temporal adaptive orthogonality loss term L_adaptive = λ_2 * Σ_(i,j) a_(ij) * |f_i^T f_j|, where a_(ij) = c_(ij) * ((EMA_density_i + EMA_density_j)/2), into the overall loss. 5. Train the SAE on google/gemma-2-2b using standard datasets and evaluate using benchmarks such as sparse_probing and core.', 'Technical_Details': 'The modified SAE computes an EMA of the activation density for each latent feature to capture temporal stability. This EMA is normalized relative to the maximum observed density over time. The pairwise competition coefficient a_(ij) is then obtained by multiplying the standard sparsity intersection coefficient c_(ij) (derived from top-k activation masks) with the mean of the EMA density factors for features i and j. The resulting temporal adaptive orthogonality loss is added to the reconstruction and sparsity losses, penalizing pairs of features that frequently activate in overlapping contexts over time, thereby promoting distinct feature specialization. All additional computations are lightweight, leveraging standard tensor operations and an EMA update.', 'Implementation_Plan': '1. Modify the encode function in AutoEncoderTopK to update a per-feature EMA of activation frequencies using a fixed decay factor. 2. Add a function to compute normalized EMA density factors. 3. Adjust the loss function in TrainerTopK to include the temporal adaptive orthogonality term by computing pairwise cosine similarities for latent features and deriving adaptive weights a_(ij) from the EMA densities and mask intersections. 4. Introduce configuration parameters for the EMA decay factor, competition threshold, and λ_2 (adaptive orthogonality weight). 5. Update logging to monitor EMA density statistics and pairwise correlations. 6. Run experiments to compare the performance against baseline SAE models.', 'Interestingness_Evaluation': 'The refined idea is highly interesting as it leverages temporal information to stabilize density measurements, offering a nuanced improvement over static adaptive orthogonality that directly targets feature overlap.', 'Interestingness': 9, 'Feasibility_Evaluation': 'Incorporating an EMA for density measurements requires minimal extra computation and code changes, making the approach feasible without introducing complexity beyond the current framework.', 'Feasibility': 9, 'Novelty_Evaluation': 'The novelty lies in the integration of temporal smoothing with adaptive orthogonality constraints, representing an elegant refinement that remains within the bounds of standard practices while offering a fresh perspective.', 'Novelty': 9, 'Expected_Research_Impact': 'The inclusion of temporal smoothing is expected to further improve feature disentanglement and interpretability, which should positively influence the sparse_probing and core benchmark results.', 'Research_Impact': 9, 'Overall_Score': 9.2, 'Abstract': 'We propose a refined regularization approach for sparse autoencoders that incorporates temporal smoothing into adaptive orthogonality constraints. Our method maintains an exponential moving average of per-feature activation densities, which is combined with sparsity mask intersections to compute adaptive pairwise penalties. By penalizing pairs of frequently co-activating features in a temporally stable manner, this approach encourages distinct feature specialization without adding significant computational cost. We detail the implementation of the temporal adaptive orthogonality loss within the existing SAE framework and outline the evaluation methodology on a large-scale language model. This method aims to improve the interpretability and monotonicity of latent representations while remaining within standard modeling practices.'}
Idea generation converged after 2 iterations.
Skipping seed idea 0
Skipping seed idea 1
Skipping seed idea 2
Skipping seed idea 3
Skipping seed idea 4
Skipping seed idea 5
Skipping seed idea 6
Skipping seed idea 7

Checking novelty of idea 8: temp_adaptive_ortho_sae
!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

!!!

THOUGHT:
The idea presents a temporal adaptive orthogonality loss based on an EMA of activation densities to enhance feature disentanglement in sparse autoencoders. I want to search for related work on "temporal adaptive orthogonality constraints" or "EMA-based adaptive orthogonality in sparse autoencoders" to check if similar methods have been previously proposed.

RESPONSE:
```json
{
  "Query": "temporal adaptive orthogonality constraints EMA activation density sparse autoencoders",
  "Decision": "undecided"
}
```
@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

@@@

Response Status Code: 200
Response Content: {"total": 0, "offset": 0}

Error: 'NoneType' object is not iterable
Decision made: novel after round 1
saved
Processing idea: temp_adaptive_ortho_sae

[2025-02-06 20:35:28]  
*Starting idea: 20250206_203345_temp_adaptive_ortho_sae*

[2025-02-06 20:35:31] Starting experiments execution
Starting experiment with prompt for coder: Your goal is to implement the following idea: Temporal Adaptive Orthogonality Constraints for Enhanced Feature Disentanglement in Sparse Autoencoders. Pay attention to the following details from the idea:
The proposed experiment is as follows: 1. In the encoding step, compute standard top-k activation masks and record per-feature activation frequencies. 2. Maintain an exponential moving average (EMA) of the activation densities over time. 3. Compute pairwise competition coefficients by combining the normalized intersection of sparsity masks with the averaged density factors from the EMA. 4. Integrate a temporal adaptive orthogonality loss term L_adaptive = λ_2 * Σ_(i,j) a_(ij) * |f_i^T f_j|, where a_(ij) = c_(ij) * ((EMA_density_i + EMA_density_j)/2), into the overall loss. 5. Train the SAE on google/gemma-2-2b using standard datasets and evaluate using benchmarks such as sparse_probing and core..
The implementation plan is as follows: 1. Modify the encode function in AutoEncoderTopK to update a per-feature EMA of activation frequencies using a fixed decay factor. 2. Add a function to compute normalized EMA density factors. 3. Adjust the loss function in TrainerTopK to include the temporal adaptive orthogonality term by computing pairwise cosine similarities for latent features and deriving adaptive weights a_(ij) from the EMA densities and mask intersections. 4. Introduce configuration parameters for the EMA decay factor, competition threshold, and λ_2 (adaptive orthogonality weight). 5. Update logging to monitor EMA density statistics and pairwise correlations. 6. Run experiments to compare the performance against baseline SAE models..

You can also refer to other information in the idea: {'Name': 'temp_adaptive_ortho_sae', 'Title': 'Temporal Adaptive Orthogonality Constraints for Enhanced Feature Disentanglement in Sparse Autoencoders', 'Experiment': '1. In the encoding step, compute standard top-k activation masks and record per-feature activation frequencies. 2. Maintain an exponential moving average (EMA) of the activation densities over time. 3. Compute pairwise competition coefficients by combining the normalized intersection of sparsity masks with the averaged density factors from the EMA. 4. Integrate a temporal adaptive orthogonality loss term L_adaptive = λ_2 * Σ_(i,j) a_(ij) * |f_i^T f_j|, where a_(ij) = c_(ij) * ((EMA_density_i + EMA_density_j)/2), into the overall loss. 5. Train the SAE on google/gemma-2-2b using standard datasets and evaluate using benchmarks such as sparse_probing and core.', 'Technical_Details': 'The modified SAE computes an EMA of the activation density for each latent feature to capture temporal stability. This EMA is normalized relative to the maximum observed density over time. The pairwise competition coefficient a_(ij) is then obtained by multiplying the standard sparsity intersection coefficient c_(ij) (derived from top-k activation masks) with the mean of the EMA density factors for features i and j. The resulting temporal adaptive orthogonality loss is added to the reconstruction and sparsity losses, penalizing pairs of features that frequently activate in overlapping contexts over time, thereby promoting distinct feature specialization. All additional computations are lightweight, leveraging standard tensor operations and an EMA update.', 'Implementation_Plan': '1. Modify the encode function in AutoEncoderTopK to update a per-feature EMA of activation frequencies using a fixed decay factor. 2. Add a function to compute normalized EMA density factors. 3. Adjust the loss function in TrainerTopK to include the temporal adaptive orthogonality term by computing pairwise cosine similarities for latent features and deriving adaptive weights a_(ij) from the EMA densities and mask intersections. 4. Introduce configuration parameters for the EMA decay factor, competition threshold, and λ_2 (adaptive orthogonality weight). 5. Update logging to monitor EMA density statistics and pairwise correlations. 6. Run experiments to compare the performance against baseline SAE models.', 'Interestingness_Evaluation': 'The refined idea is highly interesting as it leverages temporal information to stabilize density measurements, offering a nuanced improvement over static adaptive orthogonality that directly targets feature overlap.', 'Interestingness': 9, 'Feasibility_Evaluation': 'Incorporating an EMA for density measurements requires minimal extra computation and code changes, making the approach feasible without introducing complexity beyond the current framework.', 'Feasibility': 9, 'Novelty_Evaluation': 'The novelty lies in the integration of temporal smoothing with adaptive orthogonality constraints, representing an elegant refinement that remains within the bounds of standard practices while offering a fresh perspective.', 'Novelty': 9, 'Expected_Research_Impact': 'The inclusion of temporal smoothing is expected to further improve feature disentanglement and interpretability, which should positively influence the sparse_probing and core benchmark results.', 'Research_Impact': 9, 'Overall_Score': 9.2, 'Abstract': 'We propose a refined regularization approach for sparse autoencoders that incorporates temporal smoothing into adaptive orthogonality constraints. Our method maintains an exponential moving average of per-feature activation densities, which is combined with sparsity mask intersections to compute adaptive pairwise penalties. By penalizing pairs of frequently co-activating features in a temporally stable manner, this approach encourages distinct feature specialization without adding significant computational cost. We detail the implementation of the temporal adaptive orthogonality loss within the existing SAE framework and outline the evaluation methodology on a large-scale language model. This method aims to improve the interpretability and monotonicity of latent representations while remaining within standard modeling practices.', 'novel': True}

You are given a total of up to 10 runs to complete the necessary experiments. You do not need to use all 10.

If the experiments in the idea is already implemented in 'experiment.py' you are given with, you should try to improve its result by further enhancing the implementation.

First, plan the list of experiments you would like to run. For example, if you are sweeping over a specific hyperparameter, plan each value you would like to test for each run (you can try to run with different hyperparameters in the same run across different iterations.).

Note that we already provide the baseline results, so you do not need to re-run it.

For reference, the baseline results are as follows:

Baseline results from TopK SAE: 
{'training results for layer 12': {'config': {'trainer_class': 'TrainerTopK', 'dict_class': 'AutoEncoderTopK', 'lr': 0.0002, 'steps': 2441, 'seed': 42, 'activation_dim': 2304, 'dict_size': 16384, 'k': 40, 'device': 'cuda', 'layer': 12, 'lm_name': 'google/gemma-2-2b', 'wandb_name': 'AutoEncoderTopK', 'submodule_name': 'resid_post_layer_12'}, 'final_info': {'training_steps': 2441, 'final_loss': 4357.5732421875, 'layer': 12, 'dict_size': 16384, 'learning_rate': 0.0003, 'sparsity_penalty': 0.04}}, 'absorption evaluation results': {'eval_type_id': 'absorption_first_letter', 'eval_config': {'model_name': 'google/gemma-2-2b', 'random_seed': 42, 'f1_jump_threshold': 0.03, 'max_k_value': 10, 'prompt_template': '{word} has the first letter:', 'prompt_token_pos': -6, 'llm_batch_size': 32, 'llm_dtype': 'bfloat16', 'k_sparse_probe_l1_decay': 0.01, 'k_sparse_probe_batch_size': 4096, 'k_sparse_probe_num_epochs': 50}, 'eval_id': 'e5d9d74a-c71a-462d-9661-5a7f2d41d4b8', 'datetime_epoch_millis': 1738885451045, 'eval_result_metrics': {'mean': {'mean_absorption_score': 0.1429159584016188, 'mean_num_split_features': 1.12}}, 'eval_result_details': [{'first_letter': 'a', 'absorption_rate': 0.04216867469879518, 'num_absorption': 112, 'num_probe_true_positives': 2656, 'num_split_features': 1}, {'first_letter': 'b', 'absorption_rate': 0.018471337579617834, 'num_absorption': 29, 'num_probe_true_positives': 1570, 'num_split_features': 1}, {'first_letter': 'c', 'absorption_rate': 0.3883746760459089, 'num_absorption': 1049, 'num_probe_true_positives': 2701, 'num_split_features': 1}, {'first_letter': 'd', 'absorption_rate': 0.11044417767106843, 'num_absorption': 184, 'num_probe_true_positives': 1666, 'num_split_features': 2}, {'first_letter': 'e', 'absorption_rate': 0.07116104868913857, 'num_absorption': 114, 'num_probe_true_positives': 1602, 'num_split_features': 1}, {'first_letter': 'f', 'absorption_rate': 0.05956375838926174, 'num_absorption': 71, 'num_probe_true_positives': 1192, 'num_split_features': 1}, {'first_letter': 'g', 'absorption_rate': 0.08423686405337781, 'num_absorption': 101, 'num_probe_true_positives': 1199, 'num_split_features': 1}, {'first_letter': 'h', 'absorption_rate': 0.3019648397104447, 'num_absorption': 292, 'num_probe_true_positives': 967, 'num_split_features': 1}, {'first_letter': 'i', 'absorption_rate': 0.10113704368641532, 'num_absorption': 169, 'num_probe_true_positives': 1671, 'num_split_features': 1}, {'first_letter': 'j', 'absorption_rate': 0.004739336492890996, 'num_absorption': 2, 'num_probe_true_positives': 422, 'num_split_features': 1}, {'first_letter': 'k', 'absorption_rate': 0.007518796992481203, 'num_absorption': 5, 'num_probe_true_positives': 665, 'num_split_features': 1}, {'first_letter': 'l', 'absorption_rate': 0.030377668308702793, 'num_absorption': 37, 'num_probe_true_positives': 1218, 'num_split_features': 1}, {'first_letter': 'm', 'absorption_rate': 0.27388535031847133, 'num_absorption': 473, 'num_probe_true_positives': 1727, 'num_split_features': 1}, {'first_letter': 'n', 'absorption_rate': 0.04790419161676647, 'num_absorption': 40, 'num_probe_true_positives': 835, 'num_split_features': 1}, {'first_letter': 'o', 'absorption_rate': 0.32429906542056075, 'num_absorption': 347, 'num_probe_true_positives': 1070, 'num_split_features': 1}, {'first_letter': 'p', 'absorption_rate': 0.4584221748400853, 'num_absorption': 1075, 'num_probe_true_positives': 2345, 'num_split_features': 2}, {'first_letter': 'q', 'absorption_rate': 0.07567567567567568, 'num_absorption': 14, 'num_probe_true_positives': 185, 'num_split_features': 1}, {'first_letter': 'r', 'absorption_rate': 0.004294478527607362, 'num_absorption': 7, 'num_probe_true_positives': 1630, 'num_split_features': 1}, {'first_letter': 's', 'absorption_rate': 0.39844026940801136, 'num_absorption': 1124, 'num_probe_true_positives': 2821, 'num_split_features': 2}, {'first_letter': 't', 'absorption_rate': 0.0267639902676399, 'num_absorption': 44, 'num_probe_true_positives': 1644, 'num_split_features': 1}, {'first_letter': 'u', 'absorption_rate': 0.21963824289405684, 'num_absorption': 170, 'num_probe_true_positives': 774, 'num_split_features': 1}, {'first_letter': 'v', 'absorption_rate': 0.008333333333333333, 'num_absorption': 7, 'num_probe_true_positives': 840, 'num_split_features': 1}, {'first_letter': 'w', 'absorption_rate': 0.14390602055800295, 'num_absorption': 98, 'num_probe_true_positives': 681, 'num_split_features': 1}, {'first_letter': 'y', 'absorption_rate': 0.3473684210526316, 'num_absorption': 66, 'num_probe_true_positives': 190, 'num_split_features': 1}, {'first_letter': 'z', 'absorption_rate': 0.023809523809523808, 'num_absorption': 6, 'num_probe_true_positives': 252, 'num_split_features': 1}], 'sae_bench_commit_hash': 'ed9b5672e8e2efb4d1319445d042023416923af6', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_12_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 16384, 'hook_layer': 12, 'hook_name': 'blocks.12.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'TopK', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'TopK', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}, 'core evaluation results': {'unique_id': 'google/gemma-2-2b_layer_12_sae_custom_sae', 'sae_set': 'google/gemma-2-2b_layer_12_sae', 'sae_id': 'custom_sae', 'eval_cfg': {'model_name': 'google/gemma-2-2b', 'llm_dtype': 'bfloat16', 'batch_size_prompts': 16, 'n_eval_reconstruction_batches': 200, 'n_eval_sparsity_variance_batches': 2000, 'dataset': 'Skylion007/openwebtext', 'context_size': 128, 'compute_kl': True, 'compute_ce_loss': True, 'compute_l2_norms': True, 'compute_sparsity_metrics': True, 'compute_variance_metrics': True, 'compute_featurewise_density_statistics': False, 'compute_featurewise_weight_based_metrics': False, 'exclude_special_tokens_from_reconstruction': True, 'verbose': False}, 'metrics': {'model_behavior_preservation': {'kl_div_score': 0.9596273291925466, 'kl_div_with_ablation': 10.0625, 'kl_div_with_sae': 0.40625}, 'model_performance_preservation': {'ce_loss_score': 0.9588815789473685, 'ce_loss_with_ablation': 12.4375, 'ce_loss_with_sae': 3.328125, 'ce_loss_without_sae': 2.9375}, 'reconstruction_quality': {'explained_variance': 0.609375, 'mse': 2.484375, 'cossim': 0.875}, 'shrinkage': {'l2_norm_in': 149.0, 'l2_norm_out': 131.0, 'l2_ratio': 0.875, 'relative_reconstruction_bias': 0.99609375}, 'sparsity': {'l0': 40.0, 'l1': 364.0}, 'token_stats': {'total_tokens_eval_reconstruction': 409600, 'total_tokens_eval_sparsity_variance': 4096000}}}, 'sparse probing evaluation results': {'eval_type_id': 'sparse_probing', 'eval_config': {'random_seed': 42, 'dataset_names': ['LabHC/bias_in_bios_class_set1', 'LabHC/bias_in_bios_class_set2', 'LabHC/bias_in_bios_class_set3', 'canrager/amazon_reviews_mcauley_1and5', 'canrager/amazon_reviews_mcauley_1and5_sentiment', 'codeparrot/github-code', 'fancyzhx/ag_news', 'Helsinki-NLP/europarl'], 'probe_train_set_size': 4000, 'probe_test_set_size': 1000, 'context_length': 128, 'sae_batch_size': 125, 'llm_batch_size': 32, 'llm_dtype': 'bfloat16', 'model_name': 'google/gemma-2-2b', 'k_values': [1, 2, 5, 10, 20, 50], 'lower_vram_usage': False}, 'eval_id': '0a27606c-8d4d-449f-ad67-c23bba779fc9', 'datetime_epoch_millis': 1738886529707, 'eval_result_metrics': {'llm': {'llm_test_accuracy': 0.94985, 'llm_top_1_test_accuracy': 0.66250625, 'llm_top_2_test_accuracy': 0.7216312500000001, 'llm_top_5_test_accuracy': 0.7799, 'llm_top_10_test_accuracy': 0.8296999999999999, 'llm_top_20_test_accuracy': 0.87843125, 'llm_top_50_test_accuracy': 0.9207375, 'llm_top_100_test_accuracy': None}, 'sae': {'sae_test_accuracy': 0.9509000509977341, 'sae_top_1_test_accuracy': 0.75075625, 'sae_top_2_test_accuracy': 0.8130499999999999, 'sae_top_5_test_accuracy': 0.8722624999999999, 'sae_top_10_test_accuracy': 0.90165625, 'sae_top_20_test_accuracy': 0.9201937499999998, 'sae_top_50_test_accuracy': 0.93555625, 'sae_top_100_test_accuracy': None}}, 'eval_result_details': [{'dataset_name': 'LabHC/bias_in_bios_class_set1_results', 'llm_test_accuracy': 0.96, 'llm_top_1_test_accuracy': 0.6436, 'llm_top_2_test_accuracy': 0.6911999999999999, 'llm_top_5_test_accuracy': 0.792, 'llm_top_10_test_accuracy': 0.8333999999999999, 'llm_top_20_test_accuracy': 0.897, 'llm_top_50_test_accuracy': 0.9378, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.96260005235672, 'sae_top_1_test_accuracy': 0.8308000000000002, 'sae_top_2_test_accuracy': 0.8662000000000001, 'sae_top_5_test_accuracy': 0.8854, 'sae_top_10_test_accuracy': 0.8987999999999999, 'sae_top_20_test_accuracy': 0.9468, 'sae_top_50_test_accuracy': 0.9583999999999999, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'LabHC/bias_in_bios_class_set2_results', 'llm_test_accuracy': 0.9454, 'llm_top_1_test_accuracy': 0.6724, 'llm_top_2_test_accuracy': 0.7358, 'llm_top_5_test_accuracy': 0.7624000000000001, 'llm_top_10_test_accuracy': 0.8026, 'llm_top_20_test_accuracy': 0.8661999999999999, 'llm_top_50_test_accuracy': 0.9042000000000001, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.941200053691864, 'sae_top_1_test_accuracy': 0.7767999999999999, 'sae_top_2_test_accuracy': 0.8154, 'sae_top_5_test_accuracy': 0.8486, 'sae_top_10_test_accuracy': 0.9022, 'sae_top_20_test_accuracy': 0.9246000000000001, 'sae_top_50_test_accuracy': 0.9346, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'LabHC/bias_in_bios_class_set3_results', 'llm_test_accuracy': 0.9109999999999999, 'llm_top_1_test_accuracy': 0.6849999999999999, 'llm_top_2_test_accuracy': 0.7438, 'llm_top_5_test_accuracy': 0.7618, 'llm_top_10_test_accuracy': 0.7934, 'llm_top_20_test_accuracy': 0.851, 'llm_top_50_test_accuracy': 0.8879999999999999, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9250000596046448, 'sae_top_1_test_accuracy': 0.8310000000000001, 'sae_top_2_test_accuracy': 0.8448, 'sae_top_5_test_accuracy': 0.8725999999999999, 'sae_top_10_test_accuracy': 0.8865999999999999, 'sae_top_20_test_accuracy': 0.8985999999999998, 'sae_top_50_test_accuracy': 0.9106, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_results', 'llm_test_accuracy': 0.8964000000000001, 'llm_top_1_test_accuracy': 0.6024, 'llm_top_2_test_accuracy': 0.6397999999999999, 'llm_top_5_test_accuracy': 0.6666, 'llm_top_10_test_accuracy': 0.7491999999999999, 'llm_top_20_test_accuracy': 0.8138, 'llm_top_50_test_accuracy': 0.8566, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9076000452041626, 'sae_top_1_test_accuracy': 0.7055999999999999, 'sae_top_2_test_accuracy': 0.791, 'sae_top_5_test_accuracy': 0.818, 'sae_top_10_test_accuracy': 0.8550000000000001, 'sae_top_20_test_accuracy': 0.8708, 'sae_top_50_test_accuracy': 0.883, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_sentiment_results', 'llm_test_accuracy': 0.982, 'llm_top_1_test_accuracy': 0.673, 'llm_top_2_test_accuracy': 0.724, 'llm_top_5_test_accuracy': 0.766, 'llm_top_10_test_accuracy': 0.826, 'llm_top_20_test_accuracy': 0.848, 'llm_top_50_test_accuracy': 0.932, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9625000655651093, 'sae_top_1_test_accuracy': 0.649, 'sae_top_2_test_accuracy': 0.813, 'sae_top_5_test_accuracy': 0.875, 'sae_top_10_test_accuracy': 0.928, 'sae_top_20_test_accuracy': 0.935, 'sae_top_50_test_accuracy': 0.953, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'codeparrot/github-code_results', 'llm_test_accuracy': 0.9662000000000001, 'llm_top_1_test_accuracy': 0.666, 'llm_top_2_test_accuracy': 0.6900000000000001, 'llm_top_5_test_accuracy': 0.7613999999999999, 'llm_top_10_test_accuracy': 0.8039999999999999, 'llm_top_20_test_accuracy': 0.8622, 'llm_top_50_test_accuracy': 0.923, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9688000440597534, 'sae_top_1_test_accuracy': 0.6042, 'sae_top_2_test_accuracy': 0.6302, 'sae_top_5_test_accuracy': 0.8632, 'sae_top_10_test_accuracy': 0.8856000000000002, 'sae_top_20_test_accuracy': 0.9151999999999999, 'sae_top_50_test_accuracy': 0.9425999999999999, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'fancyzhx/ag_news_results', 'llm_test_accuracy': 0.9380000000000001, 'llm_top_1_test_accuracy': 0.63325, 'llm_top_2_test_accuracy': 0.76825, 'llm_top_5_test_accuracy': 0.827, 'llm_top_10_test_accuracy': 0.869, 'llm_top_20_test_accuracy': 0.89925, 'llm_top_50_test_accuracy': 0.9265000000000001, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9455000460147858, 'sae_top_1_test_accuracy': 0.79725, 'sae_top_2_test_accuracy': 0.85, 'sae_top_5_test_accuracy': 0.8865, 'sae_top_10_test_accuracy': 0.90925, 'sae_top_20_test_accuracy': 0.91675, 'sae_top_50_test_accuracy': 0.93625, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'Helsinki-NLP/europarl_results', 'llm_test_accuracy': 0.9998000000000001, 'llm_top_1_test_accuracy': 0.7243999999999999, 'llm_top_2_test_accuracy': 0.7802, 'llm_top_5_test_accuracy': 0.9019999999999999, 'llm_top_10_test_accuracy': 0.96, 'llm_top_20_test_accuracy': 0.99, 'llm_top_50_test_accuracy': 0.9978, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9940000414848328, 'sae_top_1_test_accuracy': 0.8114000000000001, 'sae_top_2_test_accuracy': 0.8938, 'sae_top_5_test_accuracy': 0.9288000000000001, 'sae_top_10_test_accuracy': 0.9478, 'sae_top_20_test_accuracy': 0.9538, 'sae_top_50_test_accuracy': 0.966, 'sae_top_100_test_accuracy': None}], 'sae_bench_commit_hash': 'ed9b5672e8e2efb4d1319445d042023416923af6', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_12_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 16384, 'hook_layer': 12, 'hook_name': 'blocks.12.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'TopK', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'TopK', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}, 'unlearning evaluation results': {'eval_type_id': 'unlearning', 'eval_config': {'random_seed': 42, 'dataset_names': ['wmdp-bio', 'high_school_us_history', 'college_computer_science', 'high_school_geography', 'human_aging'], 'intervention_method': 'clamp_feature_activation', 'retain_thresholds': [0.001, 0.01], 'n_features_list': [10, 20], 'multipliers': [25, 50, 100, 200], 'dataset_size': 1024, 'seq_len': 1024, 'n_batch_loss_added': 50, 'target_metric': 'correct', 'save_metrics': True, 'model_name': 'google/gemma-2-2b-it', 'llm_batch_size': 32, 'llm_dtype': 'bfloat16'}, 'eval_id': 'e8be4b3c-dfd3-49dd-91ca-e1b0d08e9055', 'datetime_epoch_millis': 1738886775914, 'eval_result_metrics': {'unlearning': {'unlearning_score': 0.026217222213745117}}, 'eval_result_details': [], 'sae_bench_commit_hash': 'ed9b5672e8e2efb4d1319445d042023416923af6', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_12_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 16384, 'hook_layer': 12, 'hook_name': 'blocks.12.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'TopK', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'TopK', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}}
Baseline results from standard SAE: 
{'training results for layer 12': {'config': {'trainer_class': 'CustomTrainer', 'activation_dim': 2304, 'dict_size': 16384, 'lr': 0.0003, 'l1_penalty': 0.04, 'warmup_steps': 1000, 'resample_steps': None, 'device': 'cuda', 'layer': 12, 'lm_name': 'google/gemma-2-2b', 'wandb_name': 'CustomTrainer', 'submodule_name': 'resid_post_layer_12'}, 'final_info': {'training_steps': 2441, 'final_loss': 701.0477905273438, 'layer': 12, 'dict_size': 16384, 'learning_rate': 0.0003, 'sparsity_penalty': 0.04}}, 'absorption evaluation results': {'eval_type_id': 'absorption_first_letter', 'eval_config': {'model_name': 'google/gemma-2-2b', 'random_seed': 42, 'f1_jump_threshold': 0.03, 'max_k_value': 10, 'prompt_template': '{word} has the first letter:', 'prompt_token_pos': -6, 'llm_batch_size': 32, 'llm_dtype': 'bfloat16', 'k_sparse_probe_l1_decay': 0.01, 'k_sparse_probe_batch_size': 4096, 'k_sparse_probe_num_epochs': 50}, 'eval_id': 'b5f3e18f-7844-4d8a-ac26-9b99d357cf9a', 'datetime_epoch_millis': 1738804062497, 'eval_result_metrics': {'mean': {'mean_absorption_score': 0.016138604243358595, 'mean_num_split_features': 1.4166666666666667}}, 'eval_result_details': [{'first_letter': 'a', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 2656, 'num_split_features': 2}, {'first_letter': 'b', 'absorption_rate': 0.0006369426751592356, 'num_absorption': 1, 'num_probe_true_positives': 1570, 'num_split_features': 2}, {'first_letter': 'c', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 2701, 'num_split_features': 3}, {'first_letter': 'd', 'absorption_rate': 0.009603841536614645, 'num_absorption': 16, 'num_probe_true_positives': 1666, 'num_split_features': 1}, {'first_letter': 'e', 'absorption_rate': 0.05305867665418227, 'num_absorption': 85, 'num_probe_true_positives': 1602, 'num_split_features': 1}, {'first_letter': 'f', 'absorption_rate': 0.013422818791946308, 'num_absorption': 16, 'num_probe_true_positives': 1192, 'num_split_features': 1}, {'first_letter': 'g', 'absorption_rate': 0.021684737281067557, 'num_absorption': 26, 'num_probe_true_positives': 1199, 'num_split_features': 1}, {'first_letter': 'h', 'absorption_rate': 0.0062047569803516025, 'num_absorption': 6, 'num_probe_true_positives': 967, 'num_split_features': 1}, {'first_letter': 'i', 'absorption_rate': 0.006582884500299222, 'num_absorption': 11, 'num_probe_true_positives': 1671, 'num_split_features': 2}, {'first_letter': 'j', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 422, 'num_split_features': 1}, {'first_letter': 'k', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 665, 'num_split_features': 2}, {'first_letter': 'l', 'absorption_rate': 0.09770114942528736, 'num_absorption': 119, 'num_probe_true_positives': 1218, 'num_split_features': 1}, {'first_letter': 'm', 'absorption_rate': 0.0005790387955993051, 'num_absorption': 1, 'num_probe_true_positives': 1727, 'num_split_features': 4}, {'first_letter': 'n', 'absorption_rate': 0.013173652694610778, 'num_absorption': 11, 'num_probe_true_positives': 835, 'num_split_features': 1}, {'first_letter': 'o', 'absorption_rate': 0.022429906542056073, 'num_absorption': 24, 'num_probe_true_positives': 1070, 'num_split_features': 1}, {'first_letter': 'p', 'absorption_rate': 0.008955223880597015, 'num_absorption': 21, 'num_probe_true_positives': 2345, 'num_split_features': 1}, {'first_letter': 'q', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 185, 'num_split_features': 1}, {'first_letter': 'r', 'absorption_rate': 0.0006134969325153375, 'num_absorption': 1, 'num_probe_true_positives': 1630, 'num_split_features': 2}, {'first_letter': 's', 'absorption_rate': 0.0857851825593761, 'num_absorption': 242, 'num_probe_true_positives': 2821, 'num_split_features': 1}, {'first_letter': 't', 'absorption_rate': 0.011557177615571776, 'num_absorption': 19, 'num_probe_true_positives': 1644, 'num_split_features': 1}, {'first_letter': 'u', 'absorption_rate': 0.021963824289405683, 'num_absorption': 17, 'num_probe_true_positives': 774, 'num_split_features': 1}, {'first_letter': 'w', 'absorption_rate': 0.0014684287812041115, 'num_absorption': 1, 'num_probe_true_positives': 681, 'num_split_features': 1}, {'first_letter': 'y', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 190, 'num_split_features': 1}, {'first_letter': 'z', 'absorption_rate': 0.011904761904761904, 'num_absorption': 3, 'num_probe_true_positives': 252, 'num_split_features': 1}], 'sae_bench_commit_hash': 'c600ccd8de71ccb5cbbab0eb1c6e8cc361ee3481', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_12_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 16384, 'hook_layer': 12, 'hook_name': 'blocks.12.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'Custom', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'relu', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}, 'core evaluation results': {'unique_id': 'google/gemma-2-2b_layer_12_sae_custom_sae', 'sae_set': 'google/gemma-2-2b_layer_12_sae', 'sae_id': 'custom_sae', 'eval_cfg': {'model_name': 'google/gemma-2-2b', 'llm_dtype': 'bfloat16', 'batch_size_prompts': 16, 'n_eval_reconstruction_batches': 200, 'n_eval_sparsity_variance_batches': 2000, 'dataset': 'Skylion007/openwebtext', 'context_size': 128, 'compute_kl': True, 'compute_ce_loss': True, 'compute_l2_norms': True, 'compute_sparsity_metrics': True, 'compute_variance_metrics': True, 'compute_featurewise_density_statistics': False, 'compute_featurewise_weight_based_metrics': False, 'exclude_special_tokens_from_reconstruction': True, 'verbose': False}, 'metrics': {'model_behavior_preservation': {'kl_div_score': 0.9995723748059007, 'kl_div_with_ablation': 10.0625, 'kl_div_with_sae': 0.004302978515625}, 'model_performance_preservation': {'ce_loss_score': 1.0, 'ce_loss_with_ablation': 12.4375, 'ce_loss_with_sae': 2.9375, 'ce_loss_without_sae': 2.9375}, 'reconstruction_quality': {'explained_variance': 0.984375, 'mse': 0.0888671875, 'cossim': 0.99609375}, 'shrinkage': {'l2_norm_in': 149.0, 'l2_norm_out': 147.0, 'l2_ratio': 0.984375, 'relative_reconstruction_bias': 0.98828125}, 'sparsity': {'l0': 8895.810546875, 'l1': 12608.0}, 'token_stats': {'total_tokens_eval_reconstruction': 409600, 'total_tokens_eval_sparsity_variance': 4096000}}}, 'sparse probing evaluation results': {'eval_type_id': 'sparse_probing', 'eval_config': {'random_seed': 42, 'dataset_names': ['LabHC/bias_in_bios_class_set1', 'LabHC/bias_in_bios_class_set2', 'LabHC/bias_in_bios_class_set3', 'canrager/amazon_reviews_mcauley_1and5', 'canrager/amazon_reviews_mcauley_1and5_sentiment', 'codeparrot/github-code', 'fancyzhx/ag_news', 'Helsinki-NLP/europarl'], 'probe_train_set_size': 4000, 'probe_test_set_size': 1000, 'context_length': 128, 'sae_batch_size': 125, 'llm_batch_size': 32, 'llm_dtype': 'bfloat16', 'model_name': 'google/gemma-2-2b', 'k_values': [1, 2, 5, 10, 20, 50], 'lower_vram_usage': False}, 'eval_id': 'fc35f1d1-c27c-402b-abd2-fe38f12c05aa', 'datetime_epoch_millis': 1738804969188, 'eval_result_metrics': {'llm': {'llm_test_accuracy': 0.95075625, 'llm_top_1_test_accuracy': 0.65444375, 'llm_top_2_test_accuracy': 0.71966875, 'llm_top_5_test_accuracy': 0.7860875, 'llm_top_10_test_accuracy': 0.83056875, 'llm_top_20_test_accuracy': 0.8764437500000001, 'llm_top_50_test_accuracy': 0.9228625, 'llm_top_100_test_accuracy': None}, 'sae': {'sae_test_accuracy': 0.9578625451773405, 'sae_top_1_test_accuracy': 0.6448624999999999, 'sae_top_2_test_accuracy': 0.6875375000000001, 'sae_top_5_test_accuracy': 0.7562874999999999, 'sae_top_10_test_accuracy': 0.8066500000000001, 'sae_top_20_test_accuracy': 0.8664625000000001, 'sae_top_50_test_accuracy': 0.9122750000000001, 'sae_top_100_test_accuracy': None}}, 'eval_result_details': [{'dataset_name': 'LabHC/bias_in_bios_class_set1_results', 'llm_test_accuracy': 0.96, 'llm_top_1_test_accuracy': 0.6436, 'llm_top_2_test_accuracy': 0.6911999999999999, 'llm_top_5_test_accuracy': 0.792, 'llm_top_10_test_accuracy': 0.8333999999999999, 'llm_top_20_test_accuracy': 0.897, 'llm_top_50_test_accuracy': 0.9378, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.965600049495697, 'sae_top_1_test_accuracy': 0.6862, 'sae_top_2_test_accuracy': 0.6885999999999999, 'sae_top_5_test_accuracy': 0.7842, 'sae_top_10_test_accuracy': 0.8386000000000001, 'sae_top_20_test_accuracy': 0.8806, 'sae_top_50_test_accuracy': 0.9252, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'LabHC/bias_in_bios_class_set2_results', 'llm_test_accuracy': 0.9492, 'llm_top_1_test_accuracy': 0.6794, 'llm_top_2_test_accuracy': 0.717, 'llm_top_5_test_accuracy': 0.767, 'llm_top_10_test_accuracy': 0.8, 'llm_top_20_test_accuracy': 0.8614, 'llm_top_50_test_accuracy': 0.9086000000000001, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9546000480651855, 'sae_top_1_test_accuracy': 0.6844, 'sae_top_2_test_accuracy': 0.6834, 'sae_top_5_test_accuracy': 0.7402000000000001, 'sae_top_10_test_accuracy': 0.7884, 'sae_top_20_test_accuracy': 0.8503999999999999, 'sae_top_50_test_accuracy': 0.8998000000000002, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'LabHC/bias_in_bios_class_set3_results', 'llm_test_accuracy': 0.9181999999999999, 'llm_top_1_test_accuracy': 0.6862, 'llm_top_2_test_accuracy': 0.732, 'llm_top_5_test_accuracy': 0.7722, 'llm_top_10_test_accuracy': 0.8008, 'llm_top_20_test_accuracy': 0.8532, 'llm_top_50_test_accuracy': 0.8922000000000001, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9368000507354737, 'sae_top_1_test_accuracy': 0.5932000000000001, 'sae_top_2_test_accuracy': 0.725, 'sae_top_5_test_accuracy': 0.7638, 'sae_top_10_test_accuracy': 0.8056000000000001, 'sae_top_20_test_accuracy': 0.8465999999999999, 'sae_top_50_test_accuracy': 0.8838000000000001, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_results', 'llm_test_accuracy': 0.8948, 'llm_top_1_test_accuracy': 0.6039999999999999, 'llm_top_2_test_accuracy': 0.6508, 'llm_top_5_test_accuracy': 0.6878, 'llm_top_10_test_accuracy': 0.745, 'llm_top_20_test_accuracy': 0.8051999999999999, 'llm_top_50_test_accuracy': 0.8628, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9118000507354737, 'sae_top_1_test_accuracy': 0.5828, 'sae_top_2_test_accuracy': 0.6594, 'sae_top_5_test_accuracy': 0.7343999999999999, 'sae_top_10_test_accuracy': 0.768, 'sae_top_20_test_accuracy': 0.8114000000000001, 'sae_top_50_test_accuracy': 0.8452, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_sentiment_results', 'llm_test_accuracy': 0.982, 'llm_top_1_test_accuracy': 0.673, 'llm_top_2_test_accuracy': 0.724, 'llm_top_5_test_accuracy': 0.766, 'llm_top_10_test_accuracy': 0.826, 'llm_top_20_test_accuracy': 0.848, 'llm_top_50_test_accuracy': 0.932, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9765000343322754, 'sae_top_1_test_accuracy': 0.699, 'sae_top_2_test_accuracy': 0.701, 'sae_top_5_test_accuracy': 0.792, 'sae_top_10_test_accuracy': 0.814, 'sae_top_20_test_accuracy': 0.908, 'sae_top_50_test_accuracy': 0.932, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'codeparrot/github-code_results', 'llm_test_accuracy': 0.9642, 'llm_top_1_test_accuracy': 0.6634, 'llm_top_2_test_accuracy': 0.7002, 'llm_top_5_test_accuracy': 0.7648, 'llm_top_10_test_accuracy': 0.8024000000000001, 'llm_top_20_test_accuracy': 0.8608, 'llm_top_50_test_accuracy': 0.9258, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.965600049495697, 'sae_top_1_test_accuracy': 0.6342000000000001, 'sae_top_2_test_accuracy': 0.6708000000000001, 'sae_top_5_test_accuracy': 0.7096000000000001, 'sae_top_10_test_accuracy': 0.7712, 'sae_top_20_test_accuracy': 0.8295999999999999, 'sae_top_50_test_accuracy': 0.9026, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'fancyzhx/ag_news_results', 'llm_test_accuracy': 0.93825, 'llm_top_1_test_accuracy': 0.63375, 'llm_top_2_test_accuracy': 0.7607499999999999, 'llm_top_5_test_accuracy': 0.8265, 'llm_top_10_test_accuracy': 0.8727499999999999, 'llm_top_20_test_accuracy': 0.8977499999999999, 'llm_top_50_test_accuracy': 0.9265, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9530000537633896, 'sae_top_1_test_accuracy': 0.6285, 'sae_top_2_test_accuracy': 0.7015, 'sae_top_5_test_accuracy': 0.7515000000000001, 'sae_top_10_test_accuracy': 0.856, 'sae_top_20_test_accuracy': 0.8875, 'sae_top_50_test_accuracy': 0.9199999999999999, 'sae_top_100_test_accuracy': None}, {'dataset_name': 'Helsinki-NLP/europarl_results', 'llm_test_accuracy': 0.9994, 'llm_top_1_test_accuracy': 0.6522, 'llm_top_2_test_accuracy': 0.7814, 'llm_top_5_test_accuracy': 0.9123999999999999, 'llm_top_10_test_accuracy': 0.9642, 'llm_top_20_test_accuracy': 0.9882, 'llm_top_50_test_accuracy': 0.9972000000000001, 'llm_top_100_test_accuracy': None, 'sae_test_accuracy': 0.9990000247955322, 'sae_top_1_test_accuracy': 0.6506000000000001, 'sae_top_2_test_accuracy': 0.6706, 'sae_top_5_test_accuracy': 0.7745999999999998, 'sae_top_10_test_accuracy': 0.8114000000000001, 'sae_top_20_test_accuracy': 0.9176, 'sae_top_50_test_accuracy': 0.9895999999999999, 'sae_top_100_test_accuracy': None}], 'sae_bench_commit_hash': 'c600ccd8de71ccb5cbbab0eb1c6e8cc361ee3481', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_12_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 16384, 'hook_layer': 12, 'hook_name': 'blocks.12.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'Custom', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'relu', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}, 'unlearning evaluation results': {'eval_type_id': 'unlearning', 'eval_config': {'random_seed': 42, 'dataset_names': ['wmdp-bio', 'high_school_us_history', 'college_computer_science', 'high_school_geography', 'human_aging'], 'intervention_method': 'clamp_feature_activation', 'retain_thresholds': [0.001, 0.01], 'n_features_list': [10, 20], 'multipliers': [25, 50, 100, 200], 'dataset_size': 1024, 'seq_len': 1024, 'n_batch_loss_added': 50, 'target_metric': 'correct', 'save_metrics': True, 'model_name': 'google/gemma-2-2b-it', 'llm_batch_size': 32, 'llm_dtype': 'bfloat16'}, 'eval_id': 'b48744e1-4f43-4d25-af92-4f1a46abab60', 'datetime_epoch_millis': 1738805225729, 'eval_result_metrics': {'unlearning': {'unlearning_score': 0.0}}, 'eval_result_details': [], 'sae_bench_commit_hash': 'c600ccd8de71ccb5cbbab0eb1c6e8cc361ee3481', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_12_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 16384, 'hook_layer': 12, 'hook_name': 'blocks.12.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'Custom', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'relu', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}}

After you complete each change, we will run the command `python experiment.py --out_dir=run_i' where i is the run number and evaluate the results.
YOUR PROPOSED CHANGE MUST USE THIS COMMAND FORMAT, DO NOT ADD ADDITIONAL COMMAND LINE ARGS.
You can then implement the next thing on your list.
Currently on iteration 0 of run 1
litellm.BadRequestError: OpenAIException - Error code: 400 - {'error': {'message': "Unsupported parameter: 'temperature' is not supported with this model.", 'type': 
'invalid_request_error', 'param': 'temperature', 'code': 'unsupported_parameter'}}

