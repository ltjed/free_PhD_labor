Using GPUs: [0]
Using Anthropic API with model claude-3-5-sonnet-20241022.
ideas
Loaded existing ideas:
[{'Name': 'adaptive_orthogonal_sae', 'Title': 'Instantaneous Top-k Orthogonality Constraints for Feature Disentanglement', 'Experiment': '1. Select top 0.1% f_i*f_j pairs per batch\n2. Apply orthogonality loss to selected pairs\n3. Use L2 weight normalization on W_dec\n4. Compare fixed vs adaptive τ values\n5. Measure absorption reduction efficiency\n6. Analyze pair selection stability\n7. Ablate top-k threshold impact', 'Technical_Details': 'Loss: L = L_recon + λ_1||f||_1 + λ_2Σ_{(i,j)∈TopK(batch)} |w_i·w_j|. Top pairs selected via torch.topk on (f @ f.T).flatten(). L2 normalization: W_dec = W / ||W||_2. Fixed τ=0.2. No history tracking - pure batch-level selection. Orthogonality loss applied only to top 0.1% of non-diagonal pairs each batch.', 'Implementation_Plan': '1. Add batch_topk_pair_selector using torch.topk\n2. Modify loss to use instantaneous top pairs\n3. Implement L2 weight normalization via hook\n4. Add τ as fixed config parameter\n5. Integrate pair stability analysis\n6. Add top-k percentage parameter\n7. Update config with normalization type', 'Interestingness_Evaluation': 'Pure batch-level targeting maximizes simplicity while maintaining absorption resistance.', 'Interestingness': 8, 'Feasibility_Evaluation': 'torch.topk is O(n log k) and native. L2 norm via vectorized ops. Entire implementation adds <50 lines. Runs in 20 mins/H100.', 'Feasibility': 10, 'Novelty_Evaluation': 'Instantaneous top-k constraints without history provide novel middle ground between fixed and adaptive methods.', 'Novelty': 7, 'Expected_Research_Impact': 'Focused batch-level constraints directly prevent feature merging, improving sparse_probing through better feature isolation.', 'Research_Impact': 9, 'Overall_Score': 9.0, 'Abstract': 'Deep representation learning often encounters polysemantic features—single dimensions that encode multiple, unrelated concepts—complicating both interpretability and downstream usage. To address this challenge, we propose an orthogonal sparse autoencoder that enforces feature separation in a simple, batch-level fashion. During each training step, our method targets only a small fraction of the most strongly co-activated feature pairs and applies an orthogonality penalty to them, preventing the merging of unrelated representations. By focusing on the most problematic interactions as they happen rather than tracking them over the entire training history, we reduce computational overhead and maintain a streamlined implementation. We assess the effectiveness of both fixed and adaptive strategies for selecting top pairs based on activations from models with up to 2 billion parameters. Our evaluation encompasses metrics that measure debiasing and the unlearning of dangerous knowledge, highlighting improvements in interpretability and reduced feature overlap without compromising reconstruction fidelity. Overall, our approach provides a flexible and efficient solution for mitigating polysemanticity while maintaining the simplicity and speed of batch-level updates, taking another step toward preventing the harmful use of state-of-the-art language models.', 'novel': True, 'NOTE': "IGNORE the benchmark 'UNLEARNING'"}]
Processing idea: adaptive_orthogonal_sae
2025-01-26 02:27:47
*Starting idea: 20250126_022438_adaptive_orthogonal_sae*
2025-01-26 02:27:47
*Starting Experiments*
Starting experiment with prompt for coder: Your goal is to implement the following idea: Instantaneous Top-k Orthogonality Constraints for Feature Disentanglement. Pay attention to the following details from the idea:
The proposed experiment is as follows: 1. Select top 0.1% f_i*f_j pairs per batch
2. Apply orthogonality loss to selected pairs
3. Use L2 weight normalization on W_dec
4. Compare fixed vs adaptive τ values
5. Measure absorption reduction efficiency
6. Analyze pair selection stability
7. Ablate top-k threshold impact.
The implementation plan is as follows: 1. Add batch_topk_pair_selector using torch.topk
2. Modify loss to use instantaneous top pairs
3. Implement L2 weight normalization via hook
4. Add τ as fixed config parameter
5. Integrate pair stability analysis
6. Add top-k percentage parameter
7. Update config with normalization type.

You can also refer to other information in the idea: {'Name': 'adaptive_orthogonal_sae', 'Title': 'Instantaneous Top-k Orthogonality Constraints for Feature Disentanglement', 'Experiment': '1. Select top 0.1% f_i*f_j pairs per batch\n2. Apply orthogonality loss to selected pairs\n3. Use L2 weight normalization on W_dec\n4. Compare fixed vs adaptive τ values\n5. Measure absorption reduction efficiency\n6. Analyze pair selection stability\n7. Ablate top-k threshold impact', 'Technical_Details': 'Loss: L = L_recon + λ_1||f||_1 + λ_2Σ_{(i,j)∈TopK(batch)} |w_i·w_j|. Top pairs selected via torch.topk on (f @ f.T).flatten(). L2 normalization: W_dec = W / ||W||_2. Fixed τ=0.2. No history tracking - pure batch-level selection. Orthogonality loss applied only to top 0.1% of non-diagonal pairs each batch.', 'Implementation_Plan': '1. Add batch_topk_pair_selector using torch.topk\n2. Modify loss to use instantaneous top pairs\n3. Implement L2 weight normalization via hook\n4. Add τ as fixed config parameter\n5. Integrate pair stability analysis\n6. Add top-k percentage parameter\n7. Update config with normalization type', 'Interestingness_Evaluation': 'Pure batch-level targeting maximizes simplicity while maintaining absorption resistance.', 'Interestingness': 8, 'Feasibility_Evaluation': 'torch.topk is O(n log k) and native. L2 norm via vectorized ops. Entire implementation adds <50 lines. Runs in 20 mins/H100.', 'Feasibility': 10, 'Novelty_Evaluation': 'Instantaneous top-k constraints without history provide novel middle ground between fixed and adaptive methods.', 'Novelty': 7, 'Expected_Research_Impact': 'Focused batch-level constraints directly prevent feature merging, improving sparse_probing through better feature isolation.', 'Research_Impact': 9, 'Overall_Score': 9.0, 'Abstract': 'Deep representation learning often encounters polysemantic features—single dimensions that encode multiple, unrelated concepts—complicating both interpretability and downstream usage. To address this challenge, we propose an orthogonal sparse autoencoder that enforces feature separation in a simple, batch-level fashion. During each training step, our method targets only a small fraction of the most strongly co-activated feature pairs and applies an orthogonality penalty to them, preventing the merging of unrelated representations. By focusing on the most problematic interactions as they happen rather than tracking them over the entire training history, we reduce computational overhead and maintain a streamlined implementation. We assess the effectiveness of both fixed and adaptive strategies for selecting top pairs based on activations from models with up to 2 billion parameters. Our evaluation encompasses metrics that measure debiasing and the unlearning of dangerous knowledge, highlighting improvements in interpretability and reduced feature overlap without compromising reconstruction fidelity. Overall, our approach provides a flexible and efficient solution for mitigating polysemanticity while maintaining the simplicity and speed of batch-level updates, taking another step toward preventing the harmful use of state-of-the-art language models.', 'novel': True, 'NOTE': "IGNORE the benchmark 'UNLEARNING'"}

You are given a total of up to 10 runs to complete the necessary experiments. You do not need to use all 10.

First, plan the list of experiments you would like to run. For example, if you are sweeping over a specific hyperparameter, plan each value you would like to test for each run.

Note that we already provide the vanilla baseline results, so you do not need to re-run it.

For reference, the baseline results are as follows:

{'training results': {'training_log': {'step 0': {'loss': 280.3485107421875, 'l1_loss': 2692.192626953125, 'l2_loss': 172.6608123779297}, 'step 1': {'loss': 243.578369140625, 'l1_loss': 2632.935546875, 'l2_loss': 138.26095581054688}, 'step 2': {'loss': 249.86807250976562, 'l1_loss': 2702.075927734375, 'l2_loss': 141.7850341796875}, 'step 3': {'loss': 249.8067626953125, 'l1_loss': 2702.37939453125, 'l2_loss': 141.71157836914062}, 'step 4': {'loss': 252.651123046875, 'l1_loss': 2733.4326171875, 'l2_loss': 143.31381225585938}, 'step 5': {'loss': 244.89901733398438, 'l1_loss': 2648.08056640625, 'l2_loss': 138.97579956054688}, 'step 6': {'loss': 247.49098205566406, 'l1_loss': 2678.156005859375, 'l2_loss': 140.36474609375}, 'step 7': {'loss': 250.32537841796875, 'l1_loss': 2710.021484375, 'l2_loss': 141.92453002929688}, 'step 8': {'loss': 247.69447326660156, 'l1_loss': 2682.05615234375, 'l2_loss': 140.4122314453125}, 'step 9': {'loss': 246.83868408203125, 'l1_loss': 2673.4755859375, 'l2_loss': 139.89967346191406}}, 'config': {'trainer_class': 'CustomTrainer', 'activation_dim': 2304, 'dict_size': 2304, 'lr': 0.0003, 'l1_penalty': 0.04, 'warmup_steps': 1000, 'resample_steps': None, 'device': 'cuda', 'layer': 5, 'lm_name': 'google/gemma-2-2b', 'wandb_name': 'CustomTrainer', 'submodule_name': 'resid_post_layer_5'}, 'final_info': {'training_steps': 48, 'final_loss': 226.3124237060547, 'layer': 5, 'dict_size': 2304, 'learning_rate': 0.0003, 'sparsity_penalty': 0.04}}, 'core evaluation results': {'unique_id': 'google/gemma-2-2b_layer_5_sae_custom_sae', 'sae_set': 'google/gemma-2-2b_layer_5_sae', 'sae_id': 'custom_sae', 'eval_cfg': {'model_name': 'google/gemma-2-2b', 'llm_dtype': 'bfloat16', 'batch_size_prompts': 16, 'n_eval_reconstruction_batches': 200, 'n_eval_sparsity_variance_batches': 2000, 'dataset': 'Skylion007/openwebtext', 'context_size': 128, 'compute_kl': True, 'compute_ce_loss': True, 'compute_l2_norms': True, 'compute_sparsity_metrics': True, 'compute_variance_metrics': True, 'compute_featurewise_density_statistics': False, 'compute_featurewise_weight_based_metrics': False, 'exclude_special_tokens_from_reconstruction': True, 'verbose': False}, 'metrics': {'model_behavior_preservation': {'kl_div_score': 0.2546583850931677, 'kl_div_with_ablation': 10.0625, 'kl_div_with_sae': 7.5}, 'model_performance_preservation': {'ce_loss_score': 0.23684210526315788, 'ce_loss_with_ablation': 12.4375, 'ce_loss_with_sae': 10.1875, 'ce_loss_without_sae': 2.9375}, 'reconstruction_quality': {'explained_variance': -1.390625, 'mse': 6.53125, 'cossim': 0.0242919921875}, 'shrinkage': {'l2_norm_in': 90.0, 'l2_norm_out': 72.0, 'l2_ratio': 0.80078125, 'relative_reconstruction_bias': 34.25}, 'sparsity': {'l0': 1100.94287109375, 'l1': 2272.0}, 'token_stats': {'total_tokens_eval_reconstruction': 409600, 'total_tokens_eval_sparsity_variance': 4096000}}}, 'scr and tpp evaluations results': {'eval_type_id': 'scr', 'eval_config': {'random_seed': 42, 'dataset_names': ['LabHC/bias_in_bios_class_set1', 'canrager/amazon_reviews_mcauley_1and5'], 'perform_scr': True, 'early_stopping_patience': 20, 'train_set_size': 4000, 'test_set_size': 1000, 'context_length': 128, 'probe_train_batch_size': 16, 'probe_test_batch_size': 500, 'probe_epochs': 20, 'probe_lr': 0.001, 'probe_l1_penalty': 0.001, 'sae_batch_size': 125, 'llm_batch_size': 32, 'llm_dtype': 'bfloat16', 'lower_vram_usage': False, 'model_name': 'google/gemma-2-2b', 'n_values': [2, 5, 10, 20, 50, 100, 500], 'column1_vals_lookup': {'LabHC/bias_in_bios_class_set1': [['professor', 'nurse'], ['architect', 'journalist'], ['surgeon', 'psychologist'], ['attorney', 'teacher']], 'canrager/amazon_reviews_mcauley_1and5': [['Books', 'CDs_and_Vinyl'], ['Software', 'Electronics'], ['Pet_Supplies', 'Office_Products'], ['Industrial_and_Scientific', 'Toys_and_Games']]}}, 'eval_id': 'a1ef0f0f-8bd4-42f5-bebb-87b6e6c7c843', 'datetime_epoch_millis': 1737870711988, 'eval_result_metrics': {'scr_metrics': {'scr_dir1_threshold_2': 0.02863244406650325, 'scr_metric_threshold_2': -0.0016716282676866603, 'scr_dir2_threshold_2': -0.0016716282676866603, 'scr_dir1_threshold_5': -0.014163769825244135, 'scr_metric_threshold_5': -0.0014869121509806411, 'scr_dir2_threshold_5': -0.0014869121509806411, 'scr_dir1_threshold_10': -0.06220171617182817, 'scr_metric_threshold_10': -0.004677122392150762, 'scr_dir2_threshold_10': -0.004677122392150762, 'scr_dir1_threshold_20': -0.004443416068216732, 'scr_metric_threshold_20': 0.0068963592576969015, 'scr_dir2_threshold_20': 0.0068963592576969015, 'scr_dir1_threshold_50': -0.11900962496206421, 'scr_metric_threshold_50': 0.028485643456313173, 'scr_dir2_threshold_50': 0.028485643456313173, 'scr_dir1_threshold_100': -0.07172709132039413, 'scr_metric_threshold_100': 0.02666520527062645, 'scr_dir2_threshold_100': 0.02666520527062645, 'scr_dir1_threshold_500': -0.17745045796083983, 'scr_metric_threshold_500': 0.027854774058978304, 'scr_dir2_threshold_500': 0.027854774058978304}}, 'eval_result_details': [{'dataset_name': 'LabHC/bias_in_bios_class_set1_scr_professor_nurse_results', 'scr_dir1_threshold_2': -0.034482333379235786, 'scr_metric_threshold_2': 0.002347387623557211, 'scr_dir2_threshold_2': 0.002347387623557211, 'scr_dir1_threshold_5': -0.41379416655191054, 'scr_metric_threshold_5': 0.00469491516412125, 'scr_dir2_threshold_5': 0.00469491516412125, 'scr_dir1_threshold_10': -0.7586216110116558, 'scr_metric_threshold_10': 0.009389690411235671, 'scr_dir2_threshold_10': 0.009389690411235671, 'scr_dir1_threshold_20': -0.37930977783898107, 'scr_metric_threshold_20': 0.002347387623557211, 'scr_dir2_threshold_20': 0.002347387623557211, 'scr_dir1_threshold_50': -0.3448274444597453, 'scr_metric_threshold_50': 0.0, 'scr_dir2_threshold_50': 0.0, 'scr_dir1_threshold_100': -0.7931039443908916, 'scr_metric_threshold_100': 0.009389690411235671, 'scr_dir2_threshold_100': 0.009389690411235671, 'scr_dir1_threshold_500': -0.4482764999311463, 'scr_metric_threshold_500': 0.01643199319891413, 'scr_dir2_threshold_500': 0.01643199319891413}, {'dataset_name': 'LabHC/bias_in_bios_class_set1_scr_architect_journalist_results', 'scr_dir1_threshold_2': 0.05970163859464643, 'scr_metric_threshold_2': 0.012953356274431536, 'scr_dir2_threshold_2': 0.012953356274431536, 'scr_dir1_threshold_5': 0.10447720032417823, 'scr_metric_threshold_5': 0.0077719211149466375, 'scr_dir2_threshold_5': 0.0077719211149466375, 'scr_dir1_threshold_10': 0.0746268258378237, 'scr_metric_threshold_10': 0.0, 'scr_dir2_threshold_10': 0.0, 'scr_dir1_threshold_20': 0.0447755617295318, 'scr_metric_threshold_20': 0.0077719211149466375, 'scr_dir2_threshold_20': 0.0077719211149466375, 'scr_dir1_threshold_50': 0.029850374486354535, 'scr_metric_threshold_50': 0.0077719211149466375, 'scr_dir2_threshold_50': 0.0077719211149466375, 'scr_dir1_threshold_100': 0.10447720032417823, 'scr_metric_threshold_100': 0.002590640371648879, 'scr_dir2_threshold_100': 0.002590640371648879, 'scr_dir1_threshold_500': -0.34328375470276395, 'scr_metric_threshold_500': 0.015543996646080416, 'scr_dir2_threshold_500': 0.015543996646080416}, {'dataset_name': 'LabHC/bias_in_bios_class_set1_scr_surgeon_psychologist_results', 'scr_dir1_threshold_2': 0.023256877745449607, 'scr_metric_threshold_2': -0.0076336410429387, 'scr_dir2_threshold_2': -0.0076336410429387, 'scr_dir1_threshold_5': 0.023256877745449607, 'scr_metric_threshold_5': 0.0, 'scr_dir2_threshold_5': 0.0, 'scr_dir1_threshold_10': 0.023256877745449607, 'scr_metric_threshold_10': 0.0, 'scr_dir2_threshold_10': 0.0, 'scr_dir1_threshold_20': 0.04651236933773761, 'scr_metric_threshold_20': -0.002544648124819707, 'scr_dir2_threshold_20': -0.002544648124819707, 'scr_dir1_threshold_50': -0.1162788441146016, 'scr_metric_threshold_50': 0.0, 'scr_dir2_threshold_50': 0.0, 'scr_dir1_threshold_100': 0.023256877745449607, 'scr_metric_threshold_100': -0.010178137501998197, 'scr_dir2_threshold_100': -0.010178137501998197, 'scr_dir1_threshold_500': -0.9999986138468384, 'scr_metric_threshold_500': 0.061068673346228966, 'scr_dir2_threshold_500': 0.061068673346228966}, {'dataset_name': 'LabHC/bias_in_bios_class_set1_scr_attorney_teacher_results', 'scr_dir1_threshold_2': 0.16049390892266485, 'scr_metric_threshold_2': -0.016128983156081637, 'scr_dir2_threshold_2': -0.016128983156081637, 'scr_dir1_threshold_5': 0.18518493989867213, 'scr_metric_threshold_5': -0.005376274309519518, 'scr_dir2_threshold_5': -0.005376274309519518, 'scr_dir1_threshold_10': 0.08642008013510381, 'scr_metric_threshold_10': 0.00806457169180236, 'scr_dir2_threshold_10': 0.00806457169180236, 'scr_dir1_threshold_20': 0.14814839343466119, 'scr_metric_threshold_20': 0.021505417693124237, 'scr_dir2_threshold_20': 0.021505417693124237, 'scr_dir1_threshold_50': -0.49382724225599817, 'scr_metric_threshold_50': 0.12096777423941997, 'scr_dir2_threshold_50': 0.12096777423941997, 'scr_dir1_threshold_100': -0.04938279781155373, 'scr_metric_threshold_100': 0.15053760339682348, 'scr_dir2_threshold_100': 0.15053760339682348, 'scr_dir1_threshold_500': 0.30864230235732604, 'scr_metric_threshold_500': 0.03763440084920587, 'scr_dir2_threshold_500': 0.03763440084920587}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_scr_Books_CDs_and_Vinyl_results', 'scr_dir1_threshold_2': 0.0057145523538213215, 'scr_metric_threshold_2': -0.009132575437985308, 'scr_dir2_threshold_2': -0.009132575437985308, 'scr_dir1_threshold_5': 0.01714297586557008, 'scr_metric_threshold_5': -0.03652975741724071, 'scr_dir2_threshold_5': -0.03652975741724071, 'scr_dir1_threshold_10': 0.09142875048577782, 'scr_metric_threshold_10': -0.027397181979255406, 'scr_dir2_threshold_10': -0.027397181979255406, 'scr_dir1_threshold_20': 0.0971429622416522, 'scr_metric_threshold_20': 0.0, 'scr_dir2_threshold_20': 0.0, 'scr_dir1_threshold_50': 0.0114287641096957, 'scr_metric_threshold_50': 0.03652975741724071, 'scr_dir2_threshold_50': 0.03652975741724071, 'scr_dir1_threshold_100': 0.028571399377318833, 'scr_metric_threshold_100': 0.02283103034393788, 'scr_dir2_threshold_100': 0.02283103034393788, 'scr_dir1_threshold_500': -0.028571399377318833, 'scr_metric_threshold_500': 0.13242003042830977, 'scr_dir2_threshold_500': 0.13242003042830977}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_scr_Software_Electronics_results', 'scr_dir1_threshold_2': 0.007692208939046454, 'scr_metric_threshold_2': -0.012145834962205343, 'scr_dir2_threshold_2': -0.012145834962205343, 'scr_dir1_threshold_5': 0.007692208939046454, 'scr_metric_threshold_5': -0.008097303746260835, 'scr_dir2_threshold_5': -0.008097303746260835, 'scr_dir1_threshold_10': -0.030769294253470136, 'scr_metric_threshold_10': -0.0323887323562997, 'scr_dir2_threshold_10': -0.0323887323562997, 'scr_dir1_threshold_20': 0.0, 'scr_metric_threshold_20': -0.008097303746260835, 'scr_dir2_threshold_20': -0.008097303746260835, 'scr_dir1_threshold_50': 0.023076626817139363, 'scr_metric_threshold_50': 0.012145593647833528, 'scr_dir2_threshold_50': 0.012145593647833528, 'scr_dir1_threshold_100': 0.10000009169945687, 'scr_metric_threshold_100': 0.004048531215944509, 'scr_dir2_threshold_100': 0.004048531215944509, 'scr_dir1_threshold_500': -0.023077085314423682, 'scr_metric_threshold_500': 0.03238849104192789, 'scr_dir2_threshold_500': 0.03238849104192789}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_scr_Pet_Supplies_Office_Products_results', 'scr_dir1_threshold_2': 0.017045568074408247, 'scr_metric_threshold_2': 0.021367498507973648, 'scr_dir2_threshold_2': 0.021367498507973648, 'scr_dir1_threshold_5': -0.011363486274511132, 'scr_metric_threshold_5': 0.025641201986108045, 'scr_dir2_threshold_5': 0.025641201986108045, 'scr_dir1_threshold_10': 0.005682081799897114, 'scr_metric_threshold_10': 0.029914650743567858, 'scr_dir2_threshold_10': 0.029914650743567858, 'scr_dir1_threshold_20': 0.02272731121166381, 'scr_metric_threshold_20': 0.03418809950102767, 'scr_dir2_threshold_20': 0.03418809950102767, 'scr_dir1_threshold_50': -0.051136365560583194, 'scr_metric_threshold_50': 0.08547024875256917, 'scr_dir2_threshold_50': 0.08547024875256917, 'scr_dir1_threshold_100': 0.02272731121166381, 'scr_metric_threshold_100': 0.06410249552392094, 'scr_dir2_threshold_100': 0.06410249552392094, 'scr_dir1_threshold_500': 0.18750023283056608, 'scr_metric_threshold_500': -0.07264939303884058, 'scr_dir2_threshold_500': -0.07264939303884058}, {'dataset_name': 'canrager/amazon_reviews_mcauley_1and5_scr_Industrial_and_Scientific_Toys_and_Games_results', 'scr_dir1_threshold_2': -0.010362868718775122, 'scr_metric_threshold_2': -0.005000233948244687, 'scr_dir2_threshold_2': -0.005000233948244687, 'scr_dir1_threshold_5': -0.025906708548447916, 'scr_metric_threshold_5': 0.0, 'scr_dir2_threshold_5': 0.0, 'scr_dir1_threshold_10': 0.01036255988644853, 'scr_metric_threshold_10': -0.02499997764825688, 'scr_dir2_threshold_10': -0.02499997764825688, 'scr_dir1_threshold_20': -0.015544148661999387, 'scr_metric_threshold_20': 0.0, 'scr_dir2_threshold_20': 0.0, 'scr_dir1_threshold_50': -0.010362868718775122, 'scr_metric_threshold_50': -0.03500014752150461, 'scr_dir2_threshold_50': -0.03500014752150461, 'scr_dir1_threshold_100': -0.010362868718775122, 'scr_metric_threshold_100': -0.030000211596501566, 'scr_dir2_threshold_100': -0.030000211596501566, 'scr_dir1_threshold_500': -0.07253884570211949, 'scr_metric_threshold_500': 0.0, 'scr_dir2_threshold_500': 0.0}], 'sae_bench_commit_hash': 'd8a9fbf2e09c6353944addaddfb5ca77a0714984', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_5_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 2304, 'hook_layer': 5, 'hook_name': 'blocks.5.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'Custom', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'relu', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}, 'absorption evaluation results': {'eval_type_id': 'absorption_first_letter', 'eval_config': {'model_name': 'google/gemma-2-2b', 'random_seed': 42, 'f1_jump_threshold': 0.03, 'max_k_value': 10, 'prompt_template': '{word} has the first letter:', 'prompt_token_pos': -6, 'llm_batch_size': 32, 'llm_dtype': 'bfloat16', 'k_sparse_probe_l1_decay': 0.01, 'k_sparse_probe_batch_size': 4096, 'k_sparse_probe_num_epochs': 50}, 'eval_id': '3ed934fc-775e-4d6c-8b9e-07722a992dbc', 'datetime_epoch_millis': 1737870918914, 'eval_result_metrics': {'mean': {'mean_absorption_score': 0.006710192260088017, 'mean_num_split_features': 1.4230769230769231}}, 'eval_result_details': [{'first_letter': 'a', 'absorption_rate': 0.0007671653241273494, 'num_absorption': 2, 'num_probe_true_positives': 2607, 'num_split_features': 3}, {'first_letter': 'b', 'absorption_rate': 0.01322418136020151, 'num_absorption': 21, 'num_probe_true_positives': 1588, 'num_split_features': 2}, {'first_letter': 'c', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 2851, 'num_split_features': 3}, {'first_letter': 'd', 'absorption_rate': 0.012582384661473937, 'num_absorption': 21, 'num_probe_true_positives': 1669, 'num_split_features': 1}, {'first_letter': 'e', 'absorption_rate': 0.0018656716417910447, 'num_absorption': 3, 'num_probe_true_positives': 1608, 'num_split_features': 1}, {'first_letter': 'f', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 1255, 'num_split_features': 2}, {'first_letter': 'g', 'absorption_rate': 0.004642525533890436, 'num_absorption': 5, 'num_probe_true_positives': 1077, 'num_split_features': 1}, {'first_letter': 'h', 'absorption_rate': 0.006349206349206349, 'num_absorption': 6, 'num_probe_true_positives': 945, 'num_split_features': 1}, {'first_letter': 'i', 'absorption_rate': 0.000612369871402327, 'num_absorption': 1, 'num_probe_true_positives': 1633, 'num_split_features': 2}, {'first_letter': 'j', 'absorption_rate': 0.009174311926605505, 'num_absorption': 4, 'num_probe_true_positives': 436, 'num_split_features': 1}, {'first_letter': 'k', 'absorption_rate': 0.005934718100890208, 'num_absorption': 4, 'num_probe_true_positives': 674, 'num_split_features': 1}, {'first_letter': 'l', 'absorption_rate': 0.002437043054427295, 'num_absorption': 3, 'num_probe_true_positives': 1231, 'num_split_features': 2}, {'first_letter': 'm', 'absorption_rate': 0.009836065573770493, 'num_absorption': 18, 'num_probe_true_positives': 1830, 'num_split_features': 1}, {'first_letter': 'n', 'absorption_rate': 0.0035335689045936395, 'num_absorption': 3, 'num_probe_true_positives': 849, 'num_split_features': 1}, {'first_letter': 'o', 'absorption_rate': 0.029906542056074768, 'num_absorption': 32, 'num_probe_true_positives': 1070, 'num_split_features': 1}, {'first_letter': 'p', 'absorption_rate': 0.000423908435777872, 'num_absorption': 1, 'num_probe_true_positives': 2359, 'num_split_features': 3}, {'first_letter': 'q', 'absorption_rate': 0.01092896174863388, 'num_absorption': 2, 'num_probe_true_positives': 183, 'num_split_features': 1}, {'first_letter': 'r', 'absorption_rate': 0.008860011813349085, 'num_absorption': 15, 'num_probe_true_positives': 1693, 'num_split_features': 1}, {'first_letter': 's', 'absorption_rate': 0.0010504201680672268, 'num_absorption': 3, 'num_probe_true_positives': 2856, 'num_split_features': 2}, {'first_letter': 't', 'absorption_rate': 0.007597895967270602, 'num_absorption': 13, 'num_probe_true_positives': 1711, 'num_split_features': 1}, {'first_letter': 'u', 'absorption_rate': 0.014492753623188406, 'num_absorption': 11, 'num_probe_true_positives': 759, 'num_split_features': 1}, {'first_letter': 'v', 'absorption_rate': 0.005820721769499418, 'num_absorption': 5, 'num_probe_true_positives': 859, 'num_split_features': 1}, {'first_letter': 'w', 'absorption_rate': 0.004531722054380665, 'num_absorption': 3, 'num_probe_true_positives': 662, 'num_split_features': 1}, {'first_letter': 'x', 'absorption_rate': 0.0, 'num_absorption': 0, 'num_probe_true_positives': 99, 'num_split_features': 1}, {'first_letter': 'y', 'absorption_rate': 0.012345679012345678, 'num_absorption': 2, 'num_probe_true_positives': 162, 'num_split_features': 1}, {'first_letter': 'z', 'absorption_rate': 0.007547169811320755, 'num_absorption': 2, 'num_probe_true_positives': 265, 'num_split_features': 1}], 'sae_bench_commit_hash': 'd8a9fbf2e09c6353944addaddfb5ca77a0714984', 'sae_lens_id': 'custom_sae', 'sae_lens_release_id': 'google/gemma-2-2b_layer_5_sae', 'sae_lens_version': '5.3.0', 'sae_cfg_dict': {'model_name': 'google/gemma-2-2b', 'd_in': 2304, 'd_sae': 2304, 'hook_layer': 5, 'hook_name': 'blocks.5.hook_resid_post', 'context_size': None, 'hook_head_index': None, 'architecture': 'Custom', 'apply_b_dec_to_input': True, 'finetuning_scaling_factor': None, 'activation_fn_str': 'relu', 'prepend_bos': True, 'normalize_activations': 'none', 'dtype': 'bfloat16', 'device': '', 'dataset_path': '', 'dataset_trust_remote_code': True, 'seqpos_slice': [None], 'training_tokens': -100000, 'sae_lens_training_version': None, 'neuronpedia_id': None}, 'eval_result_unstructured': None}}

After you complete each change, we will run the command `python experiment.py --out_dir=run_i' where i is the run number and evaluate the results.
YOUR PROPOSED CHANGE MUST USE THIS COMMAND FORMAT, DO NOT ADD ADDITIONAL COMMAND LINE ARGS.
You can then implement the next thing on your list.
Currently on iteration 0 of run 1
I'll help plan and implement the experiments for the Instantaneous Top-k Orthogonality Constraints idea. Let's break this down into a series of runs:                                                                                 

Planned Experiments:                                                                                                                                                                                                                  

 1 Run 1: Implement base orthogonal SAE with fixed τ=0.2 and top 0.1% pairs                                                                                                                                                           
 2 Run 2: Test adaptive τ (based on activation magnitudes)                                                                                                                                                                            
 3 Run 3: Ablation with 0.05% pairs (half baseline)                                                                                                                                                                                   
 4 Run 4: Ablation with 0.2% pairs (double baseline)                                                                                                                                                                                  
 5 Run 5: Stronger orthogonality weight (2x)                                                                                                                                                                                          

Let's start with Run 1 - implementing the base orthogonal SAE. We need to:                                                                                                                                                            

 1 Rename CustomSAE to OrthogonalSAE                                                                                                                                                                                                  
 2 Add top-k pair selection                                                                                                                                                                                                           
 3 Add orthogonality loss                                                                                                                                                                                                             
 4 Implement L2 normalization                                                                                                                                                                                                         

Here are the changes:                                                                                                                                                                                                                 

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
 class CustomSAE(nn.Module):                                                                                                                                                                                                          
     """Implementation of a Custom Sparse Autoencoder."""                                                                                                                                                                             
 =======                                                                                                                                                                                                                              
 class OrthogonalSAE(nn.Module):                                                                                                                                                                                                      
     """Implementation of Sparse Autoencoder with orthogonality constraints."""                                                                                                                                                       
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
         self.cfg = CustomSAEConfig(                                                                                                                                                                                                  
             model_name=model_name,                                                                                                                                                                                                   
             d_in=d_in,                                                                                                                                                                                                               
             d_sae=d_sae,                                                                                                                                                                                                             
             hook_name=hook_name,                                                                                                                                                                                                     
             hook_layer=hook_layer,                                                                                                                                                                                                   
             architecture="Custom",                                                                                                                                                                                                   
             activation_fn_str="relu",                                                                                                                                                                                                
             apply_b_dec_to_input=True,                                                                                                                                                                                               
         )                                                                                                                                                                                                                            
 =======                                                                                                                                                                                                                              
         self.cfg = CustomSAEConfig(                                                                                                                                                                                                  
             model_name=model_name,                                                                                                                                                                                                   
             d_in=d_in,                                                                                                                                                                                                               
             d_sae=d_sae,                                                                                                                                                                                                             
             hook_name=hook_name,                                                                                                                                                                                                     
             hook_layer=hook_layer,                                                                                                                                                                                                   
             architecture="Orthogonal",                                                                                                                                                                                               
             activation_fn_str="relu",                                                                                                                                                                                                
             apply_b_dec_to_input=True,                                                                                                                                                                                               
         )                                                                                                                                                                                                                            
                                                                                                                                                                                                                                      
         # Orthogonality parameters                                                                                                                                                                                                   
         self.tau = 0.2  # Fixed tau value                                                                                                                                                                                            
         self.topk_percent = 0.001  # Top 0.1% pairs                                                                                                                                                                                  
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
     def forward(self, acts, output_features=False):                                                                                                                                                                                  
         encoded = self.encode(acts)                                                                                                                                                                                                  
         decoded = self.decode(encoded)                                                                                                                                                                                               
         if output_features:                                                                                                                                                                                                          
             return decoded, encoded                                                                                                                                                                                                  
         return decoded                                                                                                                                                                                                               
 =======                                                                                                                                                                                                                              
     def select_top_pairs(self, features):                                                                                                                                                                                            
         """Select top-k most activated feature pairs"""                                                                                                                                                                              
         # Compute feature correlations                                                                                                                                                                                               
         feat_corr = torch.abs(features @ features.T)                                                                                                                                                                                 
         # Zero out diagonal                                                                                                                                                                                                          
         feat_corr.fill_diagonal_(0)                                                                                                                                                                                                  
         # Get total number of pairs                                                                                                                                                                                                  
         n_total_pairs = (feat_corr.shape[0] * (feat_corr.shape[0] - 1)) // 2                                                                                                                                                         
         # Calculate k based on percentage                                                                                                                                                                                            
         k = max(1, int(n_total_pairs * self.topk_percent))                                                                                                                                                                           
         # Get top k pairs                                                                                                                                                                                                            
         topk_values, topk_indices = torch.topk(feat_corr.view(-1), k)                                                                                                                                                                
         # Convert flat indices to 2D                                                                                                                                                                                                 
         row_indices = topk_indices // feat_corr.shape[1]                                                                                                                                                                             
         col_indices = topk_indices % feat_corr.shape[1]                                                                                                                                                                              
         return row_indices, col_indices, topk_values                                                                                                                                                                                 
                                                                                                                                                                                                                                      
     def orthogonality_loss(self, features):                                                                                                                                                                                          
         """Compute orthogonality loss on most active feature pairs"""                                                                                                                                                                
         row_idx, col_idx, _ = self.select_top_pairs(features)                                                                                                                                                                        
         # Get corresponding weight vectors                                                                                                                                                                                           
         w_i = self.W_dec[:, row_idx]                                                                                                                                                                                                 
         w_j = self.W_dec[:, col_idx]                                                                                                                                                                                                 
         # Normalize weights                                                                                                                                                                                                          
         w_i = w_i / w_i.norm(dim=0, keepdim=True)                                                                                                                                                                                    
         w_j = w_j / w_j.norm(dim=0, keepdim=True)                                                                                                                                                                                    
         # Compute dot products                                                                                                                                                                                                       
         dots = (w_i * w_j).sum(0)                                                                                                                                                                                                    
         return (dots ** 2).mean()                                                                                                                                                                                                    
                                                                                                                                                                                                                                      
     def forward(self, acts, output_features=False):                                                                                                                                                                                  
         encoded = self.encode(acts)                                                                                                                                                                                                  
         # L2 normalize decoder weights                                                                                                                                                                                               
         with torch.no_grad():                                                                                                                                                                                                        
             self.W_dec.data = self.W_dec.data / self.W_dec.data.norm(dim=0, keepdim=True)                                                                                                                                            
         decoded = self.decode(encoded)                                                                                                                                                                                               
         if output_features:                                                                                                                                                                                                          
             return decoded, encoded                                                                                                                                                                                                  
         return decoded                                                                                                                                                                                                               
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
 class CustomTrainer(SAETrainer):                                                                                                                                                                                                     
     """Trainer for Custom Sparse Autoencoder using L1 regularization."""                                                                                                                                                             
 =======                                                                                                                                                                                                                              
 class OrthogonalTrainer(SAETrainer):                                                                                                                                                                                                 
     """Trainer for Orthogonal Sparse Autoencoder using L1 regularization and orthogonality constraints."""                                                                                                                           
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
         self.ae = CustomSAE(d_in=activation_dim, d_sae=dict_size, hook_layer=layer, model_name=lm_name)                                                                                                                              
 =======                                                                                                                                                                                                                              
         self.ae = OrthogonalSAE(d_in=activation_dim, d_sae=dict_size, hook_layer=layer, model_name=lm_name)                                                                                                                          
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
     def loss(self, x, logging=False, **kwargs):                                                                                                                                                                                      
         x_hat, f = self.ae(x, output_features=True)                                                                                                                                                                                  
         l2_loss = torch.linalg.norm(x - x_hat, dim=-1).mean()                                                                                                                                                                        
         l1_loss = f.norm(p=1, dim=-1).mean()                                                                                                                                                                                         
                                                                                                                                                                                                                                      
         if self.steps_since_active is not None:                                                                                                                                                                                      
             # Update steps_since_active                                                                                                                                                                                              
             deads = (f == 0).all(dim=0)                                                                                                                                                                                              
             self.steps_since_active[deads] += 1                                                                                                                                                                                      
             self.steps_since_active[~deads] = 0                                                                                                                                                                                      
                                                                                                                                                                                                                                      
         loss = l2_loss + self.l1_penalty * l1_loss                                                                                                                                                                                   
 =======                                                                                                                                                                                                                              
     def loss(self, x, logging=False, **kwargs):                                                                                                                                                                                      
         x_hat, f = self.ae(x, output_features=True)                                                                                                                                                                                  
         l2_loss = torch.linalg.norm(x - x_hat, dim=-1).mean()                                                                                                                                                                        
         l1_loss = f.norm(p=1, dim=-1).mean()                                                                                                                                                                                         
         ortho_loss = self.ae.orthogonality_loss(f)                                                                                                                                                                                   
                                                                                                                                                                                                                                      
         if self.steps_since_active is not None:                                                                                                                                                                                      
             # Update steps_since_active                                                                                                                                                                                              
             deads = (f == 0).all(dim=0)                                                                                                                                                                                              
             self.steps_since_active[deads] += 1                                                                                                                                                                                      
             self.steps_since_active[~deads] = 0                                                                                                                                                                                      
                                                                                                                                                                                                                                      
         loss = l2_loss + self.l1_penalty * l1_loss + self.ae.tau * ortho_loss                                                                                                                                                        
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
         return {"loss_for_backward": loss, "loss" : loss.cpu().item(), "l1_loss" : l1_loss.cpu().item(), "l2_loss" : l2_loss.cpu().item()}                                                                                           
 =======                                                                                                                                                                                                                              
         return {                                                                                                                                                                                                                     
             "loss_for_backward": loss,                                                                                                                                                                                               
             "loss": loss.cpu().item(),                                                                                                                                                                                               
             "l1_loss": l1_loss.cpu().item(),                                                                                                                                                                                         
             "l2_loss": l2_loss.cpu().item(),                                                                                                                                                                                         
             "ortho_loss": ortho_loss.cpu().item()                                                                                                                                                                                    
         }                                                                                                                                                                                                                            
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

Let's run the first experiment with these changes:                                                                                                                                                                                    

                                                                                                                                                                                                                                      
 python experiment.py --out_dir=run_1                                                                                                                                                                                                 
                                                                                                                                                                                                                                      

This implements the base orthogonal SAE with:                                                                                                                                                                                         

 • Top 0.1% most active feature pairs selected per batch                                                                                                                                                                              
 • Fixed τ=0.2 orthogonality weight                                                                                                                                                                                                   
 • L2 weight normalization on decoder                                                                                                                                                                                                 
 • Tracking of orthogonality loss                                                                                                                                                                                                     

After we see the results, we can proceed with the next experiment focusing on adaptive τ.                                                                                                                                             

Tokens: 29k sent, 2.1k received. Cost: $0.12 message, $0.12 session.
Applied edit to experiment.py

# Fix any errors below, if possible.

## Running: /gpfs/radev/home/tl784/.conda/envs/ai_scientist/bin/python -m flake8 --select=E9,F821,F823,F831,F406,F407,F701,F702,F704,F706 --show-source --isolated experiment.py

experiment.py:447:15: F821 undefined name 'CustomTrainer'
    trainer = CustomTrainer(
              ^

## See relevant line below marked with █.

experiment.py:
...⋮...
387│def run_sae_training(
388│    layer: int,
389│    dict_size: int,
390│    num_tokens: int,
391│    out_dir: str,  # Changed from save_dir to out_dir for consistency
392│    device: str,
393│    model_name: str = "google/gemma-2-2b",
394│    context_length: int = 128,
395│    buffer_size: int = 2048,
396│    llm_batch_size: int = 24,
...⋮...
407│    out_dir = os.path.abspath(out_dir)
...⋮...
444│    )
445│
446│    # Initialize trainer  
447█    trainer = CustomTrainer(
448│        activation_dim=activation_dim,
449│        dict_size=dict_size,
450│        lr=learning_rate,
451│        l1_penalty=sparsity_penalty,
452│        warmup_steps=warmup_steps,
453│        seed=seed,
454│        device=device,
455│        layer=layer,
456│        lm_name=model_name,
...⋮...


Ah yes, I see the error. We need to update the trainer initialization to use OrthogonalTrainer instead of CustomTrainer since we renamed the class. Here's the fix:                                                                   

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
     trainer = CustomTrainer(                                                                                                                                                                                                         
 =======                                                                                                                                                                                                                              
     trainer = OrthogonalTrainer(                                                                                                                                                                                                     
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

This change aligns with our earlier renaming of the trainer class from CustomTrainer to OrthogonalTrainer. Now the code should run without the undefined name error.                                                                  

                                                                                                                                                                                                                                      
 python experiment.py --out_dir=run_1                                                                                                                                                                                                 
                                                                                                                                                                                                                                      

Tokens: 22k sent, 143 received. Cost: $0.07 message, $0.19 session.
Applied edit to experiment.py

python experiment.py --out_dir=run_1
Step 0: {'loss': 248.86587524414062, 'l1_loss': 2692.192626953125, 'l2_loss': 141.17808532714844, 'ortho_loss': 0.0004728343919850886}
Step 10: {'loss': 245.58883666992188, 'l1_loss': 2660.13720703125, 'l2_loss': 139.18325805664062, 'ortho_loss': 0.00044218619586899877}
Step 20: {'loss': 243.43617248535156, 'l1_loss': 2651.158447265625, 'l2_loss': 137.3897705078125, 'ortho_loss': 0.00040804868331179023}
Step 30: {'loss': 244.974365234375, 'l1_loss': 2690.677734375, 'l2_loss': 137.34716796875, 'ortho_loss': 0.0004473089356906712}
Step 40: {'loss': 233.0592041015625, 'l1_loss': 2578.55908203125, 'l2_loss': 129.916748046875, 'ortho_loss': 0.00045636642607860267}
Step 50: {'loss': 221.3266143798828, 'l1_loss': 2453.399169921875, 'l2_loss': 123.19056701660156, 'ortho_loss': 0.0004046608810313046}
Step 60: {'loss': 217.12852478027344, 'l1_loss': 2407.962646484375, 'l2_loss': 120.80992889404297, 'ortho_loss': 0.0004329198563937098}
Step 70: {'loss': 208.2866973876953, 'l1_loss': 2293.65673828125, 'l2_loss': 116.54034423828125, 'ortho_loss': 0.0004027698596473783}
Step 80: {'loss': 198.66873168945312, 'l1_loss': 2156.995361328125, 'l2_loss': 112.38883972167969, 'ortho_loss': 0.0004155921924393624}
Step 90: {'loss': 196.57550048828125, 'l1_loss': 2108.71435546875, 'l2_loss': 112.22683715820312, 'ortho_loss': 0.0004594643833115697}
Step 100: {'loss': 188.3547821044922, 'l1_loss': 1980.31884765625, 'l2_loss': 109.14193725585938, 'ortho_loss': 0.00043072603875771165}
Step 110: {'loss': 193.78944396972656, 'l1_loss': 2015.559326171875, 'l2_loss': 113.16700744628906, 'ortho_loss': 0.00041037064511328936}
Step 120: {'loss': 182.2876434326172, 'l1_loss': 1832.183837890625, 'l2_loss': 109.00019836425781, 'ortho_loss': 0.0004345400375314057}
Step 130: {'loss': 174.83926391601562, 'l1_loss': 1709.0594482421875, 'l2_loss': 106.47679138183594, 'ortho_loss': 0.00045015328214503825}
Step 140: {'loss': 167.74630737304688, 'l1_loss': 1576.645751953125, 'l2_loss': 104.68038940429688, 'ortho_loss': 0.0004542022361420095}
Step 150: {'loss': 161.39675903320312, 'l1_loss': 1453.109375, 'l2_loss': 103.27229309082031, 'ortho_loss': 0.0004371712275315076}
Step 160: {'loss': 158.03195190429688, 'l1_loss': 1381.210693359375, 'l2_loss': 102.78343963623047, 'ortho_loss': 0.0004842074413318187}
Step 170: {'loss': 147.25, 'l1_loss': 1208.619873046875, 'l2_loss': 98.90512084960938, 'ortho_loss': 0.00046256056521087885}
Step 180: {'loss': 142.78012084960938, 'l1_loss': 1114.75439453125, 'l2_loss': 98.18986511230469, 'ortho_loss': 0.00041411592974327505}
Step 190: {'loss': 136.5749969482422, 'l1_loss': 992.3172607421875, 'l2_loss': 96.88221740722656, 'ortho_loss': 0.0004244203446432948}
Step 200: {'loss': 135.99789428710938, 'l1_loss': 955.4842529296875, 'l2_loss': 97.77845001220703, 'ortho_loss': 0.00041774456622079015}
Step 210: {'loss': 136.232177734375, 'l1_loss': 936.8616333007812, 'l2_loss': 98.75761413574219, 'ortho_loss': 0.0004383971099741757}
Step 220: {'loss': 124.70523071289062, 'l1_loss': 752.7188720703125, 'l2_loss': 94.59638977050781, 'ortho_loss': 0.0004055919998791069}
Step 230: {'loss': 123.38032531738281, 'l1_loss': 719.3602294921875, 'l2_loss': 94.60581970214844, 'ortho_loss': 0.00048724841326475143}
Step 240: {'loss': 115.44696807861328, 'l1_loss': 582.415771484375, 'l2_loss': 92.15025329589844, 'ortho_loss': 0.00041969623998738825}
Step 250: {'loss': 118.64585876464844, 'l1_loss': 606.0382080078125, 'l2_loss': 94.40425109863281, 'ortho_loss': 0.00039151255623437464}
Step 260: {'loss': 117.04029083251953, 'l1_loss': 558.1466064453125, 'l2_loss': 94.71434020996094, 'ortho_loss': 0.00042170751839876175}
Step 270: {'loss': 113.05028533935547, 'l1_loss': 480.34075927734375, 'l2_loss': 93.8365707397461, 'ortho_loss': 0.00043188189738430083}
Step 280: {'loss': 111.74140167236328, 'l1_loss': 451.1986083984375, 'l2_loss': 93.69337463378906, 'ortho_loss': 0.000422472512582317}
Step 290: {'loss': 112.54986572265625, 'l1_loss': 456.0408630371094, 'l2_loss': 94.30813598632812, 'ortho_loss': 0.0004493581654969603}
Step 300: {'loss': 110.30482482910156, 'l1_loss': 422.89581298828125, 'l2_loss': 93.3888931274414, 'ortho_loss': 0.0004804822092410177}
Step 310: {'loss': 107.0864028930664, 'l1_loss': 358.34344482421875, 'l2_loss': 92.75257873535156, 'ortho_loss': 0.0004233228100929409}
Step 320: {'loss': 113.4212646484375, 'l1_loss': 451.44842529296875, 'l2_loss': 95.36323547363281, 'ortho_loss': 0.00044926657574251294}
Step 330: {'loss': 104.6191177368164, 'l1_loss': 305.27099609375, 'l2_loss': 92.40818786621094, 'ortho_loss': 0.0004498613707255572}
Step 340: {'loss': 102.3971939086914, 'l1_loss': 272.0723571777344, 'l2_loss': 91.51420593261719, 'ortho_loss': 0.0004452402063179761}
Step 350: {'loss': 108.59137725830078, 'l1_loss': 372.17840576171875, 'l2_loss': 93.70414733886719, 'ortho_loss': 0.00044331655954010785}
Step 360: {'loss': 106.92115783691406, 'l1_loss': 329.25604248046875, 'l2_loss': 93.75082397460938, 'ortho_loss': 0.0004400072793941945}
Step 370: {'loss': 105.99415588378906, 'l1_loss': 317.0500183105469, 'l2_loss': 93.31207275390625, 'ortho_loss': 0.00043565500527620316}
Step 380: {'loss': 107.21981811523438, 'l1_loss': 342.382080078125, 'l2_loss': 93.52445983886719, 'ortho_loss': 0.0003931910905521363}
Step 390: {'loss': 105.4281997680664, 'l1_loss': 301.99169921875, 'l2_loss': 93.34844970703125, 'ortho_loss': 0.00043145634117536247}
Step 400: {'loss': 102.56570434570312, 'l1_loss': 258.22100830078125, 'l2_loss': 92.23677062988281, 'ortho_loss': 0.0004531031590886414}
Step 410: {'loss': 102.36199951171875, 'l1_loss': 250.8138427734375, 'l2_loss': 92.32936096191406, 'ortho_loss': 0.0004354613774921745}
Step 420: {'loss': 101.34487915039062, 'l1_loss': 247.6346893310547, 'l2_loss': 91.43940734863281, 'ortho_loss': 0.0004302230372559279}
Step 430: {'loss': 103.39386749267578, 'l1_loss': 289.74896240234375, 'l2_loss': 91.80381774902344, 'ortho_loss': 0.000449279643362388}
Step 440: {'loss': 99.8937759399414, 'l1_loss': 242.05892944335938, 'l2_loss': 90.21133422851562, 'ortho_loss': 0.00042849653982557356}
Step 450: {'loss': 99.91354370117188, 'l1_loss': 257.2643737792969, 'l2_loss': 89.62287902832031, 'ortho_loss': 0.0004525520489551127}
Step 460: {'loss': 100.87635803222656, 'l1_loss': 284.5103759765625, 'l2_loss': 89.495849609375, 'ortho_loss': 0.00045634465641342103}
Step 470: {'loss': 99.94668579101562, 'l1_loss': 293.3426513671875, 'l2_loss': 88.212890625, 'ortho_loss': 0.0004582812252920121}
Step 480: {'loss': 98.91067504882812, 'l1_loss': 287.51611328125, 'l2_loss': 87.40994262695312, 'ortho_loss': 0.0004639238177333027}
Step 490: {'loss': 99.2503433227539, 'l1_loss': 324.9349365234375, 'l2_loss': 86.25285339355469, 'ortho_loss': 0.0004688073240686208}
Step 500: {'loss': 95.4098129272461, 'l1_loss': 259.7789001464844, 'l2_loss': 85.01856231689453, 'ortho_loss': 0.00045026722364127636}
Step 510: {'loss': 95.60211181640625, 'l1_loss': 278.5357666015625, 'l2_loss': 84.46058654785156, 'ortho_loss': 0.00045729661360383034}
Step 520: {'loss': 92.8136215209961, 'l1_loss': 241.5064697265625, 'l2_loss': 83.15328216552734, 'ortho_loss': 0.0004303056630305946}
Step 530: {'loss': 93.69339752197266, 'l1_loss': 280.7398986816406, 'l2_loss': 82.46371459960938, 'ortho_loss': 0.0004304925096221268}
Step 540: {'loss': 92.30337524414062, 'l1_loss': 273.7734375, 'l2_loss': 81.35235595703125, 'ortho_loss': 0.00043467996874824166}
Step 550: {'loss': 90.28205871582031, 'l1_loss': 240.21463012695312, 'l2_loss': 80.67338562011719, 'ortho_loss': 0.0004387211229186505}
Step 560: {'loss': 91.9858169555664, 'l1_loss': 280.3611145019531, 'l2_loss': 80.77127838134766, 'ortho_loss': 0.0004468460101634264}
Step 570: {'loss': 88.82798767089844, 'l1_loss': 233.11766052246094, 'l2_loss': 79.5031967163086, 'ortho_loss': 0.000436882401118055}
Step 580: {'loss': 89.20767211914062, 'l1_loss': 247.8493194580078, 'l2_loss': 79.29362487792969, 'ortho_loss': 0.00039845937862992287}
Step 590: {'loss': 88.7399673461914, 'l1_loss': 272.552001953125, 'l2_loss': 77.83779907226562, 'ortho_loss': 0.0004559709341265261}
Step 600: {'loss': 88.43863677978516, 'l1_loss': 262.9830322265625, 'l2_loss': 77.91921997070312, 'ortho_loss': 0.0004913861048407853}
Step 610: {'loss': 87.5774154663086, 'l1_loss': 270.77978515625, 'l2_loss': 76.74613189697266, 'ortho_loss': 0.00045124543248675764}
Step 620: {'loss': 86.48152923583984, 'l1_loss': 248.6125030517578, 'l2_loss': 76.53692626953125, 'ortho_loss': 0.00048212529509328306}
Step 630: {'loss': 86.33244323730469, 'l1_loss': 239.77029418945312, 'l2_loss': 76.74154663085938, 'ortho_loss': 0.0004305865440983325}
Step 640: {'loss': 86.69666290283203, 'l1_loss': 275.1360778808594, 'l2_loss': 75.69113159179688, 'ortho_loss': 0.0004468162951525301}
Step 650: {'loss': 86.65406036376953, 'l1_loss': 274.2228088378906, 'l2_loss': 75.68506622314453, 'ortho_loss': 0.0004257224500179291}
Step 660: {'loss': 86.70098876953125, 'l1_loss': 285.3919372558594, 'l2_loss': 75.28521728515625, 'ortho_loss': 0.0004466778482310474}
Step 670: {'loss': 85.71427154541016, 'l1_loss': 278.08453369140625, 'l2_loss': 74.5907974243164, 'ortho_loss': 0.0004429378022905439}
Step 680: {'loss': 83.87599182128906, 'l1_loss': 234.93658447265625, 'l2_loss': 74.47844696044922, 'ortho_loss': 0.00042948531336151063}
Step 690: {'loss': 84.2204818725586, 'l1_loss': 253.9578399658203, 'l2_loss': 74.06208801269531, 'ortho_loss': 0.00042065809248015285}
Step 700: {'loss': 83.33727264404297, 'l1_loss': 245.48681640625, 'l2_loss': 73.51771545410156, 'ortho_loss': 0.0004331276868470013}
Step 710: {'loss': 82.71000671386719, 'l1_loss': 251.2346649169922, 'l2_loss': 72.6605224609375, 'ortho_loss': 0.000497053493745625}
Step 720: {'loss': 81.77657318115234, 'l1_loss': 219.49647521972656, 'l2_loss': 72.99662017822266, 'ortho_loss': 0.00044480941141955554}
Step 730: {'loss': 81.43861389160156, 'l1_loss': 235.9864044189453, 'l2_loss': 71.99906921386719, 'ortho_loss': 0.0004469923733267933}
Step 740: {'loss': 81.42109680175781, 'l1_loss': 221.5208740234375, 'l2_loss': 72.56017303466797, 'ortho_loss': 0.0004596149083226919}
Step 750: {'loss': 80.72306060791016, 'l1_loss': 241.01632690429688, 'l2_loss': 71.08232116699219, 'ortho_loss': 0.0004072764131706208}
Step 760: {'loss': 79.92341613769531, 'l1_loss': 208.37994384765625, 'l2_loss': 71.58811950683594, 'ortho_loss': 0.00048114574747160077}
Step 770: {'loss': 81.20868682861328, 'l1_loss': 262.8384094238281, 'l2_loss': 70.69506072998047, 'ortho_loss': 0.0004482112417463213}
Step 780: {'loss': 80.70985412597656, 'l1_loss': 250.72698974609375, 'l2_loss': 70.6806869506836, 'ortho_loss': 0.000466254074126482}
Step 790: {'loss': 79.22661590576172, 'l1_loss': 194.01983642578125, 'l2_loss': 71.46572875976562, 'ortho_loss': 0.00045238720485940576}
Step 800: {'loss': 79.50415802001953, 'l1_loss': 239.9719696044922, 'l2_loss': 69.90519714355469, 'ortho_loss': 0.00042396329808980227}
Step 810: {'loss': 80.42988586425781, 'l1_loss': 235.9569091796875, 'l2_loss': 70.99150848388672, 'ortho_loss': 0.0004779264854732901}
Step 820: {'loss': 78.61762237548828, 'l1_loss': 208.99127197265625, 'l2_loss': 70.25788879394531, 'ortho_loss': 0.0004359640006441623}
Step 830: {'loss': 78.21337890625, 'l1_loss': 217.45428466796875, 'l2_loss': 69.5151138305664, 'ortho_loss': 0.00046199403004720807}
Step 840: {'loss': 78.95952606201172, 'l1_loss': 234.45008850097656, 'l2_loss': 69.5814208984375, 'ortho_loss': 0.0004877231549471617}
Step 850: {'loss': 78.94596862792969, 'l1_loss': 259.0264587402344, 'l2_loss': 68.58482360839844, 'ortho_loss': 0.0004221194249112159}
Step 860: {'loss': 77.82139587402344, 'l1_loss': 214.7880096435547, 'l2_loss': 69.22978210449219, 'ortho_loss': 0.0004729913198389113}
Step 870: {'loss': 76.7306900024414, 'l1_loss': 209.6317138671875, 'l2_loss': 68.34532165527344, 'ortho_loss': 0.0004901017528027296}
Step 880: {'loss': 77.99510955810547, 'l1_loss': 241.03872680664062, 'l2_loss': 68.35346984863281, 'ortho_loss': 0.0004545903648249805}
Step 890: {'loss': 77.9338150024414, 'l1_loss': 216.76889038085938, 'l2_loss': 69.2629623413086, 'ortho_loss': 0.0004899243358522654}
Step 900: {'loss': 76.20780944824219, 'l1_loss': 199.14462280273438, 'l2_loss': 68.24192810058594, 'ortho_loss': 0.00047722505405545235}
Step 910: {'loss': 77.232666015625, 'l1_loss': 209.26219177246094, 'l2_loss': 68.86209106445312, 'ortho_loss': 0.0004640095285139978}
Step 920: {'loss': 77.67574310302734, 'l1_loss': 233.06707763671875, 'l2_loss': 68.35296630859375, 'ortho_loss': 0.00045621368917636573}
Step 930: {'loss': 75.68844604492188, 'l1_loss': 200.4488983154297, 'l2_loss': 67.67039489746094, 'ortho_loss': 0.00047340692253783345}
Step 940: {'loss': 75.25912475585938, 'l1_loss': 196.105224609375, 'l2_loss': 67.4148178100586, 'ortho_loss': 0.00048319119377993047}
Step 950: {'loss': 75.08287048339844, 'l1_loss': 204.18865966796875, 'l2_loss': 66.91522216796875, 'ortho_loss': 0.0005026311264373362}
Step 960: {'loss': 74.78965759277344, 'l1_loss': 187.33151245117188, 'l2_loss': 67.29630279541016, 'ortho_loss': 0.000472725136205554}
Step 970: {'loss': 74.82505798339844, 'l1_loss': 187.4141845703125, 'l2_loss': 67.32839965820312, 'ortho_loss': 0.0004522601666394621}
Step 980: {'loss': 75.23622131347656, 'l1_loss': 199.23159790039062, 'l2_loss': 67.26687622070312, 'ortho_loss': 0.0004362244508229196}
Step 990: {'loss': 74.5361557006836, 'l1_loss': 187.70556640625, 'l2_loss': 67.02783203125, 'ortho_loss': 0.0004982596728950739}
Step 1000: {'loss': 76.04585266113281, 'l1_loss': 210.1380615234375, 'l2_loss': 67.64022827148438, 'ortho_loss': 0.0004928325652144849}
Step 1010: {'loss': 73.58773040771484, 'l1_loss': 175.26466369628906, 'l2_loss': 66.57705688476562, 'ortho_loss': 0.00043252232717350125}
Step 1020: {'loss': 73.78301239013672, 'l1_loss': 201.72943115234375, 'l2_loss': 65.7137451171875, 'ortho_loss': 0.0004644917498808354}
Step 1030: {'loss': 74.26063537597656, 'l1_loss': 201.52322387695312, 'l2_loss': 66.19961547851562, 'ortho_loss': 0.00047205862938426435}
Step 1040: {'loss': 73.52349090576172, 'l1_loss': 170.31045532226562, 'l2_loss': 66.71098327636719, 'ortho_loss': 0.0004485778044909239}
Step 1050: {'loss': 73.2712173461914, 'l1_loss': 168.78936767578125, 'l2_loss': 66.51954650878906, 'ortho_loss': 0.0004966684500686824}
Step 1060: {'loss': 73.42349243164062, 'l1_loss': 176.41510009765625, 'l2_loss': 66.3667984008789, 'ortho_loss': 0.00045215754653327167}
Step 1070: {'loss': 72.590087890625, 'l1_loss': 179.98365783691406, 'l2_loss': 65.3906478881836, 'ortho_loss': 0.00047345421626232564}
Step 1080: {'loss': 73.00086212158203, 'l1_loss': 169.52040100097656, 'l2_loss': 66.2199478149414, 'ortho_loss': 0.000513751117978245}
Step 1090: {'loss': 73.23541259765625, 'l1_loss': 178.74734497070312, 'l2_loss': 66.0854263305664, 'ortho_loss': 0.00044869325938634574}
Step 1100: {'loss': 72.85869598388672, 'l1_loss': 177.40907287597656, 'l2_loss': 65.76223754882812, 'ortho_loss': 0.0004973480827175081}
Step 1110: {'loss': 72.55215454101562, 'l1_loss': 171.88336181640625, 'l2_loss': 65.67672729492188, 'ortho_loss': 0.0004668781766667962}
Step 1120: {'loss': 72.7963638305664, 'l1_loss': 185.9384765625, 'l2_loss': 65.3587417602539, 'ortho_loss': 0.0004324059991631657}
Step 1130: {'loss': 72.61273193359375, 'l1_loss': 175.1509552001953, 'l2_loss': 65.60659790039062, 'ortho_loss': 0.0004973994218744338}
Step 1140: {'loss': 71.88697814941406, 'l1_loss': 171.94607543945312, 'l2_loss': 65.009033203125, 'ortho_loss': 0.00048590521328151226}
Step 1150: {'loss': 73.22813415527344, 'l1_loss': 185.6961212158203, 'l2_loss': 65.8001937866211, 'ortho_loss': 0.0004919699276797473}
Step 1160: {'loss': 72.08149719238281, 'l1_loss': 166.3777313232422, 'l2_loss': 65.42630004882812, 'ortho_loss': 0.000441490177763626}
Step 1170: {'loss': 71.42040252685547, 'l1_loss': 159.1798095703125, 'l2_loss': 65.05311584472656, 'ortho_loss': 0.0004699791898019612}
Step 1180: {'loss': 71.3843002319336, 'l1_loss': 175.84695434570312, 'l2_loss': 64.35032653808594, 'ortho_loss': 0.0004993441980332136}
Step 1190: {'loss': 71.22447204589844, 'l1_loss': 163.29197692871094, 'l2_loss': 64.69270324707031, 'ortho_loss': 0.000459531118394807}
Step 1200: {'loss': 71.41647338867188, 'l1_loss': 152.69131469726562, 'l2_loss': 65.30873107910156, 'ortho_loss': 0.00047506674309261143}
Step 1210: {'loss': 71.69686889648438, 'l1_loss': 170.60018920898438, 'l2_loss': 64.87277221679688, 'ortho_loss': 0.0004711711953859776}
Step 1220: {'loss': 71.24111938476562, 'l1_loss': 168.37417602539062, 'l2_loss': 64.50605773925781, 'ortho_loss': 0.0004751380765810609}
Step 1230: {'loss': 71.2810287475586, 'l1_loss': 174.6959991455078, 'l2_loss': 64.29309844970703, 'ortho_loss': 0.00046783374273218215}
Step 1240: {'loss': 71.11080932617188, 'l1_loss': 166.25604248046875, 'l2_loss': 64.46047973632812, 'ortho_loss': 0.0004615419020410627}
Step 1250: {'loss': 71.60531616210938, 'l1_loss': 172.5293731689453, 'l2_loss': 64.70403289794922, 'ortho_loss': 0.0005193704273551702}
Step 1260: {'loss': 71.73681640625, 'l1_loss': 176.2769317626953, 'l2_loss': 64.68563842773438, 'ortho_loss': 0.00047948569408617914}
Step 1270: {'loss': 70.601806640625, 'l1_loss': 166.45498657226562, 'l2_loss': 63.94350814819336, 'ortho_loss': 0.00048822362441569567}
Step 1280: {'loss': 70.26261901855469, 'l1_loss': 164.73912048339844, 'l2_loss': 63.67296600341797, 'ortho_loss': 0.0004590238386299461}
Step 1290: {'loss': 71.06304931640625, 'l1_loss': 172.53634643554688, 'l2_loss': 64.1614990234375, 'ortho_loss': 0.0004881830245722085}
Step 1300: {'loss': 70.85033416748047, 'l1_loss': 165.46202087402344, 'l2_loss': 64.23175048828125, 'ortho_loss': 0.000500809692312032}
Step 1310: {'loss': 70.7152328491211, 'l1_loss': 154.325439453125, 'l2_loss': 64.54212188720703, 'ortho_loss': 0.00046789812040515244}
Step 1320: {'loss': 70.27520751953125, 'l1_loss': 178.51577758789062, 'l2_loss': 63.13447952270508, 'ortho_loss': 0.0005096474196761847}
Step 1330: {'loss': 70.39029693603516, 'l1_loss': 161.84442138671875, 'l2_loss': 63.916412353515625, 'ortho_loss': 0.0005430640303529799}
Step 1340: {'loss': 69.988525390625, 'l1_loss': 169.6916046142578, 'l2_loss': 63.20073318481445, 'ortho_loss': 0.0006453615496866405}
Step 1350: {'loss': 70.30702209472656, 'l1_loss': 163.5969696044922, 'l2_loss': 63.76305389404297, 'ortho_loss': 0.00045197541476227343}
Step 1360: {'loss': 69.65025329589844, 'l1_loss': 163.13272094726562, 'l2_loss': 63.124847412109375, 'ortho_loss': 0.0004844566574320197}
Step 1370: {'loss': 69.88392639160156, 'l1_loss': 159.41845703125, 'l2_loss': 63.50709533691406, 'ortho_loss': 0.00047163391718640924}
Step 1380: {'loss': 70.32942962646484, 'l1_loss': 167.8056182861328, 'l2_loss': 63.617103576660156, 'ortho_loss': 0.0004986121202819049}
Step 1390: {'loss': 69.65254211425781, 'l1_loss': 156.877685546875, 'l2_loss': 63.37733459472656, 'ortho_loss': 0.0005125796305947006}
Step 1400: {'loss': 69.85575103759766, 'l1_loss': 168.336669921875, 'l2_loss': 63.12218475341797, 'ortho_loss': 0.0005018303054384887}
Step 1410: {'loss': 69.93031311035156, 'l1_loss': 159.5809326171875, 'l2_loss': 63.546974182128906, 'ortho_loss': 0.000495514424983412}
Step 1420: {'loss': 69.00587463378906, 'l1_loss': 165.6737518310547, 'l2_loss': 62.37882995605469, 'ortho_loss': 0.0004718004784081131}
Step 1430: {'loss': 69.47623443603516, 'l1_loss': 156.86331176757812, 'l2_loss': 63.20161437988281, 'ortho_loss': 0.00043377207475714386}
Step 1440: {'loss': 69.51966857910156, 'l1_loss': 158.4132537841797, 'l2_loss': 63.18301773071289, 'ortho_loss': 0.0005940372939221561}
Step 1450: {'loss': 69.4128189086914, 'l1_loss': 159.31094360351562, 'l2_loss': 63.040287017822266, 'ortho_loss': 0.00046835659304633737}
Step 1460: {'loss': 68.72957611083984, 'l1_loss': 164.07656860351562, 'l2_loss': 62.166404724121094, 'ortho_loss': 0.0005529347690753639}
Step 1470: {'loss': 69.51451873779297, 'l1_loss': 161.17092895507812, 'l2_loss': 63.06757354736328, 'ortho_loss': 0.0005212309188209474}
Step 1480: {'loss': 69.19903564453125, 'l1_loss': 175.34835815429688, 'l2_loss': 62.184993743896484, 'ortho_loss': 0.0005272515118122101}
Step 1490: {'loss': 69.2830581665039, 'l1_loss': 166.73406982421875, 'l2_loss': 62.613582611083984, 'ortho_loss': 0.0005569696077145636}
Step 1500: {'loss': 69.4718246459961, 'l1_loss': 160.44015502929688, 'l2_loss': 63.05413055419922, 'ortho_loss': 0.00045544575550593436}
Step 1510: {'loss': 68.1585693359375, 'l1_loss': 158.38397216796875, 'l2_loss': 61.8231086730957, 'ortho_loss': 0.00048137884004972875}
Step 1520: {'loss': 69.09387969970703, 'l1_loss': 176.94168090820312, 'l2_loss': 62.01610565185547, 'ortho_loss': 0.0005287370295263827}
Step 1530: {'loss': 68.51742553710938, 'l1_loss': 150.49807739257812, 'l2_loss': 62.497413635253906, 'ortho_loss': 0.00046061372268013656}
Step 1540: {'loss': 68.76578521728516, 'l1_loss': 163.60150146484375, 'l2_loss': 62.22160339355469, 'ortho_loss': 0.0006091189570724964}
Step 1550: {'loss': 68.37684631347656, 'l1_loss': 157.00404357910156, 'l2_loss': 62.09657669067383, 'ortho_loss': 0.0005198317230679095}
Step 1560: {'loss': 68.34207916259766, 'l1_loss': 153.74278259277344, 'l2_loss': 62.19226837158203, 'ortho_loss': 0.0005147918709553778}
Step 1570: {'loss': 69.15719604492188, 'l1_loss': 163.2740020751953, 'l2_loss': 62.626136779785156, 'ortho_loss': 0.0004837558954022825}
Step 1580: {'loss': 68.5225830078125, 'l1_loss': 165.04481506347656, 'l2_loss': 61.920684814453125, 'ortho_loss': 0.0005263525526970625}
Step 1590: {'loss': 68.22779846191406, 'l1_loss': 155.56663513183594, 'l2_loss': 62.005008697509766, 'ortho_loss': 0.000617711921222508}
Step 1600: {'loss': 68.74642181396484, 'l1_loss': 161.66201782226562, 'l2_loss': 62.27982711791992, 'ortho_loss': 0.000565635331440717}
Step 1610: {'loss': 67.81814575195312, 'l1_loss': 160.58126831054688, 'l2_loss': 61.39479446411133, 'ortho_loss': 0.00048269343096762896}
Step 1620: {'loss': 69.43306732177734, 'l1_loss': 168.92831420898438, 'l2_loss': 62.67583465576172, 'ortho_loss': 0.00048826850252225995}
Step 1630: {'loss': 68.91539001464844, 'l1_loss': 173.3251190185547, 'l2_loss': 61.982276916503906, 'ortho_loss': 0.000552531739231199}
Step 1640: {'loss': 67.39816284179688, 'l1_loss': 159.4552001953125, 'l2_loss': 61.01985168457031, 'ortho_loss': 0.0005448992014862597}
Step 1650: {'loss': 68.44094848632812, 'l1_loss': 154.1719970703125, 'l2_loss': 62.273963928222656, 'ortho_loss': 0.0005304336664266884}
Step 1660: {'loss': 67.6866455078125, 'l1_loss': 160.74932861328125, 'l2_loss': 61.25657272338867, 'ortho_loss': 0.0004826632793992758}
Step 1670: {'loss': 68.2072525024414, 'l1_loss': 160.51742553710938, 'l2_loss': 61.78645324707031, 'ortho_loss': 0.00047869503032416105}
Step 1680: {'loss': 68.17494201660156, 'l1_loss': 166.67469787597656, 'l2_loss': 61.50782775878906, 'ortho_loss': 0.000633488642051816}
Step 1690: {'loss': 66.8178482055664, 'l1_loss': 152.3610076904297, 'l2_loss': 60.723304748535156, 'ortho_loss': 0.0005162893794476986}
Step 1700: {'loss': 67.65811157226562, 'l1_loss': 159.9783172607422, 'l2_loss': 61.258872985839844, 'ortho_loss': 0.0005274845752865076}
Step 1710: {'loss': 68.41061401367188, 'l1_loss': 171.80450439453125, 'l2_loss': 61.53833770751953, 'ortho_loss': 0.0004818314337171614}
Step 1720: {'loss': 67.75949096679688, 'l1_loss': 168.84060668945312, 'l2_loss': 61.00575256347656, 'ortho_loss': 0.0005634867120534182}
Step 1730: {'loss': 67.75269317626953, 'l1_loss': 158.66200256347656, 'l2_loss': 61.40612030029297, 'ortho_loss': 0.00047172236372716725}
Step 1740: {'loss': 67.98085021972656, 'l1_loss': 175.36187744140625, 'l2_loss': 60.966270446777344, 'ortho_loss': 0.0005500316619873047}
Step 1750: {'loss': 67.63675689697266, 'l1_loss': 152.46371459960938, 'l2_loss': 61.53812026977539, 'ortho_loss': 0.0004472813452593982}
Step 1760: {'loss': 68.73709106445312, 'l1_loss': 172.170166015625, 'l2_loss': 61.85017013549805, 'ortho_loss': 0.0005782457301393151}
Step 1770: {'loss': 67.83875274658203, 'l1_loss': 163.620361328125, 'l2_loss': 61.29383087158203, 'ortho_loss': 0.0005495768855325878}
Step 1780: {'loss': 67.46343231201172, 'l1_loss': 164.0817108154297, 'l2_loss': 60.90007019042969, 'ortho_loss': 0.00047098094364628196}
Step 1790: {'loss': 67.52172088623047, 'l1_loss': 165.89883422851562, 'l2_loss': 60.88566970825195, 'ortho_loss': 0.0004991154419258237}
Step 1800: {'loss': 67.75684356689453, 'l1_loss': 168.0160369873047, 'l2_loss': 61.036094665527344, 'ortho_loss': 0.0005220694583840668}
Step 1810: {'loss': 67.5451889038086, 'l1_loss': 161.29025268554688, 'l2_loss': 61.093475341796875, 'ortho_loss': 0.0005216606077738106}
Step 1820: {'loss': 67.95989227294922, 'l1_loss': 167.64901733398438, 'l2_loss': 61.253841400146484, 'ortho_loss': 0.00046236891648732126}
Step 1830: {'loss': 67.05200958251953, 'l1_loss': 157.7174835205078, 'l2_loss': 60.74319839477539, 'ortho_loss': 0.0005787751288153231}
Step 1840: {'loss': 67.05915069580078, 'l1_loss': 160.6488800048828, 'l2_loss': 60.633087158203125, 'ortho_loss': 0.0005202981410548091}
Step 1850: {'loss': 67.45015716552734, 'l1_loss': 164.05606079101562, 'l2_loss': 60.88780975341797, 'ortho_loss': 0.0005226099747233093}
Step 1860: {'loss': 67.22590637207031, 'l1_loss': 162.6328125, 'l2_loss': 60.72047424316406, 'ortho_loss': 0.0006217377376742661}
Step 1870: {'loss': 67.97480010986328, 'l1_loss': 169.52313232421875, 'l2_loss': 61.19377899169922, 'ortho_loss': 0.0005032201879657805}
Step 1880: {'loss': 65.87673950195312, 'l1_loss': 170.228515625, 'l2_loss': 59.06748962402344, 'ortho_loss': 0.0005256214062683284}
Step 1890: {'loss': 66.98845672607422, 'l1_loss': 159.73602294921875, 'l2_loss': 60.598899841308594, 'ortho_loss': 0.0005788778071291745}
Step 1900: {'loss': 67.27742004394531, 'l1_loss': 165.9197998046875, 'l2_loss': 60.6405143737793, 'ortho_loss': 0.0005575414397753775}
Step 1910: {'loss': 67.2135009765625, 'l1_loss': 167.08770751953125, 'l2_loss': 60.52986526489258, 'ortho_loss': 0.0006317945662885904}
Step 1920: {'loss': 67.7445297241211, 'l1_loss': 163.52418518066406, 'l2_loss': 61.20346450805664, 'ortho_loss': 0.0005142491427250206}
Step 1930: {'loss': 67.4168930053711, 'l1_loss': 160.86856079101562, 'l2_loss': 60.98204040527344, 'ortho_loss': 0.0005312121938914061}
Step 1940: {'loss': 67.00164794921875, 'l1_loss': 166.9993896484375, 'l2_loss': 60.32157516479492, 'ortho_loss': 0.0004880095075350255}
Step 1950: {'loss': 67.3876953125, 'l1_loss': 164.05076599121094, 'l2_loss': 60.82555389404297, 'ortho_loss': 0.0005579091375693679}
Step 1960: {'loss': 67.4402847290039, 'l1_loss': 172.0364990234375, 'l2_loss': 60.55873107910156, 'ortho_loss': 0.0004686654719989747}
Step 1970: {'loss': 66.38925170898438, 'l1_loss': 166.83004760742188, 'l2_loss': 59.71596145629883, 'ortho_loss': 0.0004744752368424088}
Step 1980: {'loss': 66.86528015136719, 'l1_loss': 160.93704223632812, 'l2_loss': 60.42765808105469, 'ortho_loss': 0.0006916671409271657}
Step 1990: {'loss': 67.32923889160156, 'l1_loss': 159.6686553955078, 'l2_loss': 60.942359924316406, 'ortho_loss': 0.0006486102356575429}
Step 2000: {'loss': 67.27350616455078, 'l1_loss': 167.3831787109375, 'l2_loss': 60.57806396484375, 'ortho_loss': 0.0005821273080073297}
Step 2010: {'loss': 66.89056396484375, 'l1_loss': 173.82025146484375, 'l2_loss': 59.93763732910156, 'ortho_loss': 0.0005762791261076927}
Step 2020: {'loss': 66.47074127197266, 'l1_loss': 161.39437866210938, 'l2_loss': 60.014869689941406, 'ortho_loss': 0.0004955879412591457}
Step 2030: {'loss': 67.29841613769531, 'l1_loss': 167.17529296875, 'l2_loss': 60.611289978027344, 'ortho_loss': 0.0005602040910162032}
Step 2040: {'loss': 67.2009048461914, 'l1_loss': 167.67648315429688, 'l2_loss': 60.49372863769531, 'ortho_loss': 0.0005868305452167988}
Step 2050: {'loss': 65.82783508300781, 'l1_loss': 159.67892456054688, 'l2_loss': 59.440582275390625, 'ortho_loss': 0.0004948892164975405}
Step 2060: {'loss': 66.50599670410156, 'l1_loss': 160.53553771972656, 'l2_loss': 60.08446502685547, 'ortho_loss': 0.0005166417686268687}
Step 2070: {'loss': 66.35724639892578, 'l1_loss': 164.0159454345703, 'l2_loss': 59.7965087890625, 'ortho_loss': 0.0005009039887227118}
Step 2080: {'loss': 66.84213256835938, 'l1_loss': 166.5046844482422, 'l2_loss': 60.18183135986328, 'ortho_loss': 0.0005652094841934741}
Step 2090: {'loss': 65.78252410888672, 'l1_loss': 166.30081176757812, 'l2_loss': 59.130374908447266, 'ortho_loss': 0.000565793423447758}
Step 2100: {'loss': 66.66878509521484, 'l1_loss': 165.67042541503906, 'l2_loss': 60.041847229003906, 'ortho_loss': 0.0006036775303073227}
Step 2110: {'loss': 66.07421112060547, 'l1_loss': 163.10992431640625, 'l2_loss': 59.54970932006836, 'ortho_loss': 0.0005520855193026364}
Step 2120: {'loss': 66.83256530761719, 'l1_loss': 168.14144897460938, 'l2_loss': 60.106807708740234, 'ortho_loss': 0.0005078680696897209}
Step 2130: {'loss': 66.10323333740234, 'l1_loss': 172.46908569335938, 'l2_loss': 59.204368591308594, 'ortho_loss': 0.0005099273985251784}
Step 2140: {'loss': 66.02111053466797, 'l1_loss': 170.8197784423828, 'l2_loss': 59.188201904296875, 'ortho_loss': 0.0005774983437731862}
Step 2150: {'loss': 65.51136779785156, 'l1_loss': 166.8919219970703, 'l2_loss': 58.83558654785156, 'ortho_loss': 0.0005290784756653011}
Step 2160: {'loss': 66.08625030517578, 'l1_loss': 168.3695831298828, 'l2_loss': 59.351356506347656, 'ortho_loss': 0.0005598023417405784}
Step 2170: {'loss': 65.85011291503906, 'l1_loss': 165.02671813964844, 'l2_loss': 59.248931884765625, 'ortho_loss': 0.000580216757953167}
Step 2180: {'loss': 66.76485443115234, 'l1_loss': 168.44686889648438, 'l2_loss': 60.02687072753906, 'ortho_loss': 0.0005278574535623193}
Step 2190: {'loss': 66.45582580566406, 'l1_loss': 179.15817260742188, 'l2_loss': 59.28938293457031, 'ortho_loss': 0.0005787905538454652}
Step 2200: {'loss': 65.99591064453125, 'l1_loss': 158.0819854736328, 'l2_loss': 59.672523498535156, 'ortho_loss': 0.00055120192700997}
Step 2210: {'loss': 66.35169219970703, 'l1_loss': 172.40045166015625, 'l2_loss': 59.4555778503418, 'ortho_loss': 0.0005011857720091939}
Step 2220: {'loss': 66.7564926147461, 'l1_loss': 173.97021484375, 'l2_loss': 59.797550201416016, 'ortho_loss': 0.0006730408640578389}
Step 2230: {'loss': 66.47942352294922, 'l1_loss': 173.5441131591797, 'l2_loss': 59.537540435791016, 'ortho_loss': 0.0006016955594532192}
Step 2240: {'loss': 66.3728256225586, 'l1_loss': 162.8714599609375, 'l2_loss': 59.85783386230469, 'ortho_loss': 0.0006418346310965717}
Step 2250: {'loss': 65.83631134033203, 'l1_loss': 162.6149139404297, 'l2_loss': 59.33159255981445, 'ortho_loss': 0.0005981619469821453}
Step 2260: {'loss': 65.36273193359375, 'l1_loss': 166.8157958984375, 'l2_loss': 58.689971923828125, 'ortho_loss': 0.000634640920907259}
Step 2270: {'loss': 65.59527587890625, 'l1_loss': 168.71212768554688, 'l2_loss': 58.8466796875, 'ortho_loss': 0.0005831148591823876}
Step 2280: {'loss': 65.15638732910156, 'l1_loss': 167.94375610351562, 'l2_loss': 58.43852233886719, 'ortho_loss': 0.0005781971267424524}
Step 2290: {'loss': 66.24333190917969, 'l1_loss': 168.40457153320312, 'l2_loss': 59.507041931152344, 'ortho_loss': 0.0005367218982428312}
Step 2300: {'loss': 65.24748229980469, 'l1_loss': 170.32176208496094, 'l2_loss': 58.43450164794922, 'ortho_loss': 0.0005451654433272779}
Step 2310: {'loss': 65.8731460571289, 'l1_loss': 166.224365234375, 'l2_loss': 59.22406768798828, 'ortho_loss': 0.0005270192632451653}
Step 2320: {'loss': 65.61410522460938, 'l1_loss': 162.7269287109375, 'l2_loss': 59.10488510131836, 'ortho_loss': 0.0007061761571094394}
Step 2330: {'loss': 65.49615478515625, 'l1_loss': 170.77651977539062, 'l2_loss': 58.66497039794922, 'ortho_loss': 0.0005921658012084663}
Step 2340: {'loss': 64.8115463256836, 'l1_loss': 164.78140258789062, 'l2_loss': 58.22018051147461, 'ortho_loss': 0.0005434696795418859}
Step 2350: {'loss': 65.69554138183594, 'l1_loss': 164.30282592773438, 'l2_loss': 59.123291015625, 'ortho_loss': 0.0006735154893249273}
Step 2360: {'loss': 66.28976440429688, 'l1_loss': 169.67526245117188, 'l2_loss': 59.502655029296875, 'ortho_loss': 0.0005066386074759066}
Step 2370: {'loss': 66.34342193603516, 'l1_loss': 175.13388061523438, 'l2_loss': 59.33794403076172, 'ortho_loss': 0.0005912899505347013}
Step 2380: {'loss': 64.75042724609375, 'l1_loss': 170.5135498046875, 'l2_loss': 57.929786682128906, 'ortho_loss': 0.0004895515157841146}
Step 2390: {'loss': 65.27289581298828, 'l1_loss': 165.4122314453125, 'l2_loss': 58.65626525878906, 'ortho_loss': 0.0007343890611082315}
Step 2400: {'loss': 65.41508483886719, 'l1_loss': 169.50157165527344, 'l2_loss': 58.63492202758789, 'ortho_loss': 0.0004926910623908043}
Step 2410: {'loss': 65.48703002929688, 'l1_loss': 164.07815551757812, 'l2_loss': 58.92376708984375, 'ortho_loss': 0.0006829925114288926}
Step 2420: {'loss': 65.13860321044922, 'l1_loss': 171.864990234375, 'l2_loss': 58.263885498046875, 'ortho_loss': 0.000553482212126255}
Step 2430: {'loss': 65.68071746826172, 'l1_loss': 175.18319702148438, 'l2_loss': 58.67329025268555, 'ortho_loss': 0.0004954614560119808}
Step 2440: {'loss': 65.87991333007812, 'l1_loss': 169.03652954101562, 'l2_loss': 59.11833953857422, 'ortho_loss': 0.0005596772534772754}
Step 2450: {'loss': 65.50839233398438, 'l1_loss': 169.25900268554688, 'l2_loss': 58.73792266845703, 'ortho_loss': 0.0005424453411251307}
Step 2460: {'loss': 65.41851043701172, 'l1_loss': 166.54718017578125, 'l2_loss': 58.75651550292969, 'ortho_loss': 0.0005283120553940535}
Step 2470: {'loss': 66.05091857910156, 'l1_loss': 172.16046142578125, 'l2_loss': 59.16437911987305, 'ortho_loss': 0.000596635858528316}
Step 2480: {'loss': 65.73818969726562, 'l1_loss': 170.4943084716797, 'l2_loss': 58.918296813964844, 'ortho_loss': 0.0006154776783660054}
Step 2490: {'loss': 65.47650146484375, 'l1_loss': 164.9766845703125, 'l2_loss': 58.87730407714844, 'ortho_loss': 0.0006648250855505466}
Step 2500: {'loss': 64.84073638916016, 'l1_loss': 172.2618865966797, 'l2_loss': 57.950111389160156, 'ortho_loss': 0.0007480607600882649}
Step 2510: {'loss': 65.91706848144531, 'l1_loss': 177.42788696289062, 'l2_loss': 58.819847106933594, 'ortho_loss': 0.0005226446082815528}
Step 2520: {'loss': 65.66606140136719, 'l1_loss': 164.8095703125, 'l2_loss': 59.07354736328125, 'ortho_loss': 0.0006457183044403791}
Step 2530: {'loss': 64.50696563720703, 'l1_loss': 164.342041015625, 'l2_loss': 57.93318557739258, 'ortho_loss': 0.0004961587255820632}
Step 2540: {'loss': 65.2710952758789, 'l1_loss': 186.9463348388672, 'l2_loss': 57.793121337890625, 'ortho_loss': 0.0006015577237121761}
Step 2550: {'loss': 64.99939727783203, 'l1_loss': 164.560302734375, 'l2_loss': 58.41687774658203, 'ortho_loss': 0.0005461616674438119}
Step 2560: {'loss': 64.96802520751953, 'l1_loss': 173.95326232910156, 'l2_loss': 58.00978088378906, 'ortho_loss': 0.0005812802701257169}
Step 2570: {'loss': 65.62387084960938, 'l1_loss': 177.53329467773438, 'l2_loss': 58.52241516113281, 'ortho_loss': 0.0006202601362019777}
Step 2580: {'loss': 64.99604797363281, 'l1_loss': 178.82443237304688, 'l2_loss': 57.842926025390625, 'ortho_loss': 0.0007233499782159925}
Step 2590: {'loss': 64.6029052734375, 'l1_loss': 168.9445037841797, 'l2_loss': 57.84502029418945, 'ortho_loss': 0.0005508922622539103}
Step 2600: {'loss': 65.54093933105469, 'l1_loss': 178.91946411132812, 'l2_loss': 58.38400650024414, 'ortho_loss': 0.0007490288699045777}
Step 2610: {'loss': 64.86090087890625, 'l1_loss': 172.88699340820312, 'l2_loss': 57.945308685302734, 'ortho_loss': 0.0005742597277276218}
Step 2620: {'loss': 65.43038177490234, 'l1_loss': 169.32666015625, 'l2_loss': 58.657196044921875, 'ortho_loss': 0.0006022084853611887}
Step 2630: {'loss': 64.94537353515625, 'l1_loss': 172.3895721435547, 'l2_loss': 58.04966354370117, 'ortho_loss': 0.0006520264432765543}
Step 2640: {'loss': 64.94742584228516, 'l1_loss': 168.85726928710938, 'l2_loss': 58.192989349365234, 'ortho_loss': 0.0007127663702704012}
Step 2650: {'loss': 65.65779876708984, 'l1_loss': 173.09283447265625, 'l2_loss': 58.733985900878906, 'ortho_loss': 0.0005086787859909236}
Step 2660: {'loss': 65.05867767333984, 'l1_loss': 166.29696655273438, 'l2_loss': 58.40666198730469, 'ortho_loss': 0.0006978159653954208}
Step 2670: {'loss': 65.20547485351562, 'l1_loss': 176.9425811767578, 'l2_loss': 58.127647399902344, 'ortho_loss': 0.0006164179067127407}
Step 2680: {'loss': 64.64727020263672, 'l1_loss': 169.70050048828125, 'l2_loss': 57.85913848876953, 'ortho_loss': 0.0005866570281796157}
Step 2690: {'loss': 65.18456268310547, 'l1_loss': 169.4151611328125, 'l2_loss': 58.407814025878906, 'ortho_loss': 0.0007396306027658284}
Step 2700: {'loss': 65.03577423095703, 'l1_loss': 174.0441436767578, 'l2_loss': 58.07386779785156, 'ortho_loss': 0.0006950812530703843}
Step 2710: {'loss': 64.7863998413086, 'l1_loss': 166.29916381835938, 'l2_loss': 58.13429260253906, 'ortho_loss': 0.0006980590987950563}
Step 2720: {'loss': 64.75127410888672, 'l1_loss': 171.59500122070312, 'l2_loss': 57.88734436035156, 'ortho_loss': 0.0006308184820227325}
Step 2730: {'loss': 64.98442077636719, 'l1_loss': 169.04539489746094, 'l2_loss': 58.22248840332031, 'ortho_loss': 0.0005887641455046833}
Step 2740: {'loss': 64.01154327392578, 'l1_loss': 167.639892578125, 'l2_loss': 57.30580139160156, 'ortho_loss': 0.0007257320685312152}
Step 2750: {'loss': 64.72633361816406, 'l1_loss': 169.84498596191406, 'l2_loss': 57.93241882324219, 'ortho_loss': 0.0005598108982667327}
Step 2760: {'loss': 64.76990509033203, 'l1_loss': 175.12933349609375, 'l2_loss': 57.764610290527344, 'ortho_loss': 0.0006225417018868029}
Step 2770: {'loss': 65.08819580078125, 'l1_loss': 171.58953857421875, 'l2_loss': 58.22447967529297, 'ortho_loss': 0.0006881570443511009}
Step 2780: {'loss': 64.3392562866211, 'l1_loss': 165.96771240234375, 'l2_loss': 57.700355529785156, 'ortho_loss': 0.0009352026972919703}
Step 2790: {'loss': 64.61432647705078, 'l1_loss': 176.64739990234375, 'l2_loss': 57.54829788208008, 'ortho_loss': 0.0006417439435608685}
Step 2800: {'loss': 65.38203430175781, 'l1_loss': 171.21746826171875, 'l2_loss': 58.533203125, 'ortho_loss': 0.0006450774963013828}
Step 2810: {'loss': 65.3472671508789, 'l1_loss': 179.24810791015625, 'l2_loss': 58.177207946777344, 'ortho_loss': 0.0006679215584881604}
Step 2820: {'loss': 64.14878845214844, 'l1_loss': 171.97972106933594, 'l2_loss': 57.26947021484375, 'ortho_loss': 0.000637591234408319}
Step 2830: {'loss': 65.07810974121094, 'l1_loss': 182.92233276367188, 'l2_loss': 57.76110076904297, 'ortho_loss': 0.0005553784430958331}
Step 2840: {'loss': 64.8520278930664, 'l1_loss': 171.93133544921875, 'l2_loss': 57.974639892578125, 'ortho_loss': 0.000678349519148469}
Step 2850: {'loss': 65.47468566894531, 'l1_loss': 177.57574462890625, 'l2_loss': 58.371498107910156, 'ortho_loss': 0.000805095536634326}
Step 2860: {'loss': 64.66394805908203, 'l1_loss': 170.8104248046875, 'l2_loss': 57.8314094543457, 'ortho_loss': 0.0006253393949009478}
Step 2870: {'loss': 64.43832397460938, 'l1_loss': 172.43548583984375, 'l2_loss': 57.54072189331055, 'ortho_loss': 0.0009080528980121017}
Step 2880: {'loss': 64.6063461303711, 'l1_loss': 171.51028442382812, 'l2_loss': 57.745819091796875, 'ortho_loss': 0.0005808982532471418}
Step 2890: {'loss': 64.36373901367188, 'l1_loss': 171.3391571044922, 'l2_loss': 57.5100212097168, 'ortho_loss': 0.0007672271458432078}
Step 2900: {'loss': 64.46955871582031, 'l1_loss': 168.97518920898438, 'l2_loss': 57.710411071777344, 'ortho_loss': 0.0006691434537060559}
Step 2910: {'loss': 64.99266052246094, 'l1_loss': 170.54119873046875, 'l2_loss': 58.1709098815918, 'ortho_loss': 0.0005390524747781456}
Step 2920: {'loss': 64.35591888427734, 'l1_loss': 170.48440551757812, 'l2_loss': 57.53642272949219, 'ortho_loss': 0.0006083683692850173}
Step 2930: {'loss': 64.4731674194336, 'l1_loss': 177.47219848632812, 'l2_loss': 57.37416076660156, 'ortho_loss': 0.0005997382686473429}
Step 2940: {'loss': 63.92465591430664, 'l1_loss': 171.88568115234375, 'l2_loss': 57.04911422729492, 'ortho_loss': 0.0005778793129138649}
Step 2950: {'loss': 64.67083740234375, 'l1_loss': 168.7051544189453, 'l2_loss': 57.92249298095703, 'ortho_loss': 0.0006688072462566197}
Step 2960: {'loss': 63.63196563720703, 'l1_loss': 167.835205078125, 'l2_loss': 56.91841125488281, 'ortho_loss': 0.0007263726438395679}
Step 2970: {'loss': 64.29800415039062, 'l1_loss': 176.32276916503906, 'l2_loss': 57.24496078491211, 'ortho_loss': 0.0006433229427784681}
Step 2980: {'loss': 65.37239837646484, 'l1_loss': 176.84072875976562, 'l2_loss': 58.29863357543945, 'ortho_loss': 0.0006973639829084277}
Step 2990: {'loss': 65.37092590332031, 'l1_loss': 179.65135192871094, 'l2_loss': 58.184749603271484, 'ortho_loss': 0.0006263481918722391}
Step 3000: {'loss': 64.5606918334961, 'l1_loss': 178.4877471923828, 'l2_loss': 57.42104721069336, 'ortho_loss': 0.0006719735683873296}
Step 3010: {'loss': 64.21060943603516, 'l1_loss': 175.2598876953125, 'l2_loss': 57.2000732421875, 'ortho_loss': 0.0006908312789164484}
Step 3020: {'loss': 65.54127502441406, 'l1_loss': 179.24319458007812, 'l2_loss': 58.371421813964844, 'ortho_loss': 0.0006230884464457631}
Step 3030: {'loss': 64.0693359375, 'l1_loss': 178.53445434570312, 'l2_loss': 56.92783737182617, 'ortho_loss': 0.000600950384978205}
Step 3040: {'loss': 64.36763763427734, 'l1_loss': 176.62835693359375, 'l2_loss': 57.302364349365234, 'ortho_loss': 0.0007015003357082605}
Step 3050: {'loss': 64.67892456054688, 'l1_loss': 176.9827880859375, 'l2_loss': 57.59947967529297, 'ortho_loss': 0.0006747565348632634}
Step 3060: {'loss': 63.76374816894531, 'l1_loss': 175.1959228515625, 'l2_loss': 56.755760192871094, 'ortho_loss': 0.0007555083138868213}
Step 3070: {'loss': 63.71904754638672, 'l1_loss': 168.93438720703125, 'l2_loss': 56.96152877807617, 'ortho_loss': 0.0007304681348614395}
Step 3080: {'loss': 64.51985931396484, 'l1_loss': 178.10414123535156, 'l2_loss': 57.39556884765625, 'ortho_loss': 0.000622370804194361}
Step 3090: {'loss': 64.72280883789062, 'l1_loss': 173.65553283691406, 'l2_loss': 57.776458740234375, 'ortho_loss': 0.000656354648526758}
Step 3100: {'loss': 64.22280883789062, 'l1_loss': 177.95211791992188, 'l2_loss': 57.10456848144531, 'ortho_loss': 0.0007637455128133297}
Step 3110: {'loss': 64.47730255126953, 'l1_loss': 175.0191650390625, 'l2_loss': 57.476409912109375, 'ortho_loss': 0.0006491062231361866}
Step 3120: {'loss': 64.38463592529297, 'l1_loss': 177.26219177246094, 'l2_loss': 57.29401397705078, 'ortho_loss': 0.0006831279024481773}
Step 3130: {'loss': 64.081298828125, 'l1_loss': 174.7112274169922, 'l2_loss': 57.092708587646484, 'ortho_loss': 0.0006691988673992455}
Step 3140: {'loss': 63.708499908447266, 'l1_loss': 173.14828491210938, 'l2_loss': 56.78242111206055, 'ortho_loss': 0.0007459461921826005}
Step 3150: {'loss': 63.84930419921875, 'l1_loss': 180.51312255859375, 'l2_loss': 56.62862777709961, 'ortho_loss': 0.0007629608735442162}
Step 3160: {'loss': 63.8271598815918, 'l1_loss': 176.04608154296875, 'l2_loss': 56.78518295288086, 'ortho_loss': 0.0006706631975248456}
Step 3170: {'loss': 64.43184661865234, 'l1_loss': 178.81109619140625, 'l2_loss': 57.279266357421875, 'ortho_loss': 0.0006969684618525207}
Step 3180: {'loss': 63.9429817199707, 'l1_loss': 170.39227294921875, 'l2_loss': 57.127174377441406, 'ortho_loss': 0.0005908353487029672}
Step 3190: {'loss': 64.10415649414062, 'l1_loss': 175.11141967773438, 'l2_loss': 57.099552154541016, 'ortho_loss': 0.0007110377191565931}
Step 3200: {'loss': 64.18431854248047, 'l1_loss': 175.4783172607422, 'l2_loss': 57.16504669189453, 'ortho_loss': 0.0006804914446547627}
Step 3210: {'loss': 64.77972412109375, 'l1_loss': 181.81723022460938, 'l2_loss': 57.506858825683594, 'ortho_loss': 0.0008602550951763988}
Step 3220: {'loss': 64.29571533203125, 'l1_loss': 171.9217529296875, 'l2_loss': 57.418697357177734, 'ortho_loss': 0.0007255443488247693}
Step 3230: {'loss': 64.70808410644531, 'l1_loss': 173.21829223632812, 'l2_loss': 57.779212951660156, 'ortho_loss': 0.0006775126093998551}
Step 3240: {'loss': 63.89341735839844, 'l1_loss': 175.1821746826172, 'l2_loss': 56.88599395751953, 'ortho_loss': 0.000691636058036238}
Step 3250: {'loss': 63.93903350830078, 'l1_loss': 176.06552124023438, 'l2_loss': 56.89626693725586, 'ortho_loss': 0.0007224236615002155}
Step 3260: {'loss': 63.767616271972656, 'l1_loss': 176.55572509765625, 'l2_loss': 56.70525360107422, 'ortho_loss': 0.0006580608896911144}
Step 3270: {'loss': 64.2547607421875, 'l1_loss': 173.07151794433594, 'l2_loss': 57.331756591796875, 'ortho_loss': 0.000711449421942234}
Step 3280: {'loss': 64.17190551757812, 'l1_loss': 176.47088623046875, 'l2_loss': 57.11292266845703, 'ortho_loss': 0.0007349129882641137}
Step 3290: {'loss': 63.81977081298828, 'l1_loss': 174.13092041015625, 'l2_loss': 56.854373931884766, 'ortho_loss': 0.0007975414046086371}
Step 3300: {'loss': 64.41299438476562, 'l1_loss': 173.84605407714844, 'l2_loss': 57.4589958190918, 'ortho_loss': 0.0007732867379672825}
Step 3310: {'loss': 63.5878791809082, 'l1_loss': 170.59649658203125, 'l2_loss': 56.76387023925781, 'ortho_loss': 0.0007424299255944788}
Step 3320: {'loss': 63.991390228271484, 'l1_loss': 173.24197387695312, 'l2_loss': 57.06156921386719, 'ortho_loss': 0.0007119610090740025}
Step 3330: {'loss': 63.89642333984375, 'l1_loss': 172.29867553710938, 'l2_loss': 57.004337310791016, 'ortho_loss': 0.0006936506251804531}
Step 3340: {'loss': 64.70649719238281, 'l1_loss': 180.96298217773438, 'l2_loss': 57.46784591674805, 'ortho_loss': 0.0006670260918326676}
Step 3350: {'loss': 63.995140075683594, 'l1_loss': 174.9434356689453, 'l2_loss': 56.99723815917969, 'ortho_loss': 0.0008213231340050697}
Step 3360: {'loss': 63.591365814208984, 'l1_loss': 177.17855834960938, 'l2_loss': 56.50408935546875, 'ortho_loss': 0.0006732400506734848}
Step 3370: {'loss': 63.785423278808594, 'l1_loss': 172.43252563476562, 'l2_loss': 56.88795471191406, 'ortho_loss': 0.000832617050036788}
Step 3380: {'loss': 64.52362060546875, 'l1_loss': 170.16885375976562, 'l2_loss': 57.7166862487793, 'ortho_loss': 0.0009070672676898539}
Step 3390: {'loss': 64.2907943725586, 'l1_loss': 173.28350830078125, 'l2_loss': 57.35927200317383, 'ortho_loss': 0.0009108184603974223}
Step 3400: {'loss': 63.800384521484375, 'l1_loss': 181.92654418945312, 'l2_loss': 56.52313995361328, 'ortho_loss': 0.0009196561295539141}
Step 3410: {'loss': 64.4019775390625, 'l1_loss': 177.85458374023438, 'l2_loss': 57.28759002685547, 'ortho_loss': 0.001046567689627409}
Step 3420: {'loss': 64.01123046875, 'l1_loss': 179.25689697265625, 'l2_loss': 56.840797424316406, 'ortho_loss': 0.0007936182664707303}
Step 3430: {'loss': 64.248779296875, 'l1_loss': 177.63043212890625, 'l2_loss': 57.143402099609375, 'ortho_loss': 0.0008084644214250147}
Step 3440: {'loss': 64.40184020996094, 'l1_loss': 175.6685028076172, 'l2_loss': 57.374935150146484, 'ortho_loss': 0.0008308503311127424}
Step 3450: {'loss': 63.27427291870117, 'l1_loss': 178.69137573242188, 'l2_loss': 56.12649917602539, 'ortho_loss': 0.000589602452237159}
Step 3460: {'loss': 63.6919059753418, 'l1_loss': 179.89317321777344, 'l2_loss': 56.496002197265625, 'ortho_loss': 0.0008708913228474557}
Step 3470: {'loss': 63.215782165527344, 'l1_loss': 178.58123779296875, 'l2_loss': 56.0723876953125, 'ortho_loss': 0.0007271153735928237}
Step 3480: {'loss': 63.69619369506836, 'l1_loss': 174.35235595703125, 'l2_loss': 56.721927642822266, 'ortho_loss': 0.0008519035181961954}
Step 3490: {'loss': 63.944602966308594, 'l1_loss': 182.38156127929688, 'l2_loss': 56.64910888671875, 'ortho_loss': 0.001158784725703299}
Step 3500: {'loss': 62.966426849365234, 'l1_loss': 174.23587036132812, 'l2_loss': 55.99685287475586, 'ortho_loss': 0.000712070323061198}
Step 3510: {'loss': 63.654685974121094, 'l1_loss': 178.594970703125, 'l2_loss': 56.510738372802734, 'ortho_loss': 0.0007375414716079831}
Step 3520: {'loss': 63.84228515625, 'l1_loss': 178.90362548828125, 'l2_loss': 56.685977935791016, 'ortho_loss': 0.0008102832944132388}
Step 3530: {'loss': 63.901973724365234, 'l1_loss': 176.74447631835938, 'l2_loss': 56.83203125, 'ortho_loss': 0.0008132793591357768}
Step 3540: {'loss': 63.8420524597168, 'l1_loss': 175.72242736816406, 'l2_loss': 56.813018798828125, 'ortho_loss': 0.0006874137907288969}
Step 3550: {'loss': 63.878902435302734, 'l1_loss': 175.28526306152344, 'l2_loss': 56.867347717285156, 'ortho_loss': 0.0007167051080614328}
Step 3560: {'loss': 63.85017013549805, 'l1_loss': 178.31005859375, 'l2_loss': 56.71759033203125, 'ortho_loss': 0.0008945809677243233}
Step 3570: {'loss': 64.08451843261719, 'l1_loss': 176.56948852539062, 'l2_loss': 57.021522521972656, 'ortho_loss': 0.0010541348019614816}
Step 3580: {'loss': 63.92983627319336, 'l1_loss': 175.58367919921875, 'l2_loss': 56.906314849853516, 'ortho_loss': 0.0008716866141185164}
Step 3590: {'loss': 63.91309356689453, 'l1_loss': 181.5689697265625, 'l2_loss': 56.65018844604492, 'ortho_loss': 0.0007187178707681596}
Step 3600: {'loss': 63.96508026123047, 'l1_loss': 181.46917724609375, 'l2_loss': 56.7061767578125, 'ortho_loss': 0.0006838304689154029}
Step 3610: {'loss': 63.442195892333984, 'l1_loss': 178.84962463378906, 'l2_loss': 56.28797912597656, 'ortho_loss': 0.0011662987526506186}
Step 3620: {'loss': 63.05949020385742, 'l1_loss': 179.93878173828125, 'l2_loss': 55.86177444458008, 'ortho_loss': 0.0008292446727864444}
Step 3630: {'loss': 63.282283782958984, 'l1_loss': 178.37823486328125, 'l2_loss': 56.147010803222656, 'ortho_loss': 0.0007288394845090806}
Step 3640: {'loss': 63.23929214477539, 'l1_loss': 181.3958740234375, 'l2_loss': 55.983299255371094, 'ortho_loss': 0.0007830578251741827}
Step 3650: {'loss': 63.662288665771484, 'l1_loss': 181.39088439941406, 'l2_loss': 56.40641784667969, 'ortho_loss': 0.0011810798896476626}
Step 3660: {'loss': 63.74930953979492, 'l1_loss': 179.79910278320312, 'l2_loss': 56.55718231201172, 'ortho_loss': 0.0008239202434197068}
Step 3670: {'loss': 63.11724090576172, 'l1_loss': 179.6702880859375, 'l2_loss': 55.93022155761719, 'ortho_loss': 0.0010312286904081702}
Step 3680: {'loss': 63.356231689453125, 'l1_loss': 181.64837646484375, 'l2_loss': 56.090087890625, 'ortho_loss': 0.0010517508490011096}
Step 3690: {'loss': 63.43960189819336, 'l1_loss': 180.33889770507812, 'l2_loss': 56.22583770751953, 'ortho_loss': 0.0010404117638245225}
Step 3700: {'loss': 63.71462631225586, 'l1_loss': 178.49594116210938, 'l2_loss': 56.574623107910156, 'ortho_loss': 0.0008294970029965043}
Step 3710: {'loss': 62.853824615478516, 'l1_loss': 177.7620391845703, 'l2_loss': 55.74313735961914, 'ortho_loss': 0.001036152825690806}
Step 3720: {'loss': 63.71725845336914, 'l1_loss': 183.96786499023438, 'l2_loss': 56.35838317871094, 'ortho_loss': 0.0007918927585706115}
Step 3730: {'loss': 64.35283660888672, 'l1_loss': 181.72552490234375, 'l2_loss': 57.08363342285156, 'ortho_loss': 0.0009150775731541216}
Step 3740: {'loss': 63.0242805480957, 'l1_loss': 175.0360565185547, 'l2_loss': 56.02265930175781, 'ortho_loss': 0.0008936555241234601}
Step 3750: {'loss': 62.77044677734375, 'l1_loss': 175.40769958496094, 'l2_loss': 55.75395965576172, 'ortho_loss': 0.00089785095769912}
Step 3760: {'loss': 63.29667663574219, 'l1_loss': 179.31019592285156, 'l2_loss': 56.12409591674805, 'ortho_loss': 0.0008492567576467991}
Step 3770: {'loss': 64.40834045410156, 'l1_loss': 180.25387573242188, 'l2_loss': 57.198036193847656, 'ortho_loss': 0.000772377010434866}
Step 3780: {'loss': 63.739654541015625, 'l1_loss': 177.0817413330078, 'l2_loss': 56.656227111816406, 'ortho_loss': 0.0007796626887284219}
Step 3790: {'loss': 63.75358200073242, 'l1_loss': 186.99346923828125, 'l2_loss': 56.27366256713867, 'ortho_loss': 0.0009014158276841044}
Step 3800: {'loss': 63.16774368286133, 'l1_loss': 181.70298767089844, 'l2_loss': 55.899444580078125, 'ortho_loss': 0.0008955656667239964}
Step 3810: {'loss': 64.09027862548828, 'l1_loss': 181.73782348632812, 'l2_loss': 56.82059097290039, 'ortho_loss': 0.0008607238414697349}
Step 3820: {'loss': 63.969600677490234, 'l1_loss': 185.12413024902344, 'l2_loss': 56.56446838378906, 'ortho_loss': 0.0008418334182351828}
Step 3830: {'loss': 63.64362716674805, 'l1_loss': 176.65213012695312, 'l2_loss': 56.57733917236328, 'ortho_loss': 0.0010087344562634826}
Step 3840: {'loss': 63.05681610107422, 'l1_loss': 182.3430938720703, 'l2_loss': 55.76291275024414, 'ortho_loss': 0.0008947703754529357}
Step 3850: {'loss': 63.01494216918945, 'l1_loss': 176.8226318359375, 'l2_loss': 55.94181823730469, 'ortho_loss': 0.0010861163027584553}
Step 3860: {'loss': 63.63779830932617, 'l1_loss': 182.72988891601562, 'l2_loss': 56.32843780517578, 'ortho_loss': 0.0008248875965364277}
Step 3870: {'loss': 63.26393127441406, 'l1_loss': 184.06689453125, 'l2_loss': 55.90106964111328, 'ortho_loss': 0.0009322697296738625}
Step 3880: {'loss': 62.599849700927734, 'l1_loss': 182.6305694580078, 'l2_loss': 55.294456481933594, 'ortho_loss': 0.0008670716779306531}
Step 3890: {'loss': 63.694183349609375, 'l1_loss': 177.7960205078125, 'l2_loss': 56.5821533203125, 'ortho_loss': 0.0009572211420163512}
Step 3900: {'loss': 62.6331787109375, 'l1_loss': 180.00172424316406, 'l2_loss': 55.43292236328125, 'ortho_loss': 0.0009407079196535051}
Step 3910: {'loss': 63.38048553466797, 'l1_loss': 180.22525024414062, 'l2_loss': 56.17129135131836, 'ortho_loss': 0.0009137946180999279}
Step 3920: {'loss': 62.95455551147461, 'l1_loss': 186.48214721679688, 'l2_loss': 55.49507522583008, 'ortho_loss': 0.0009686093544587493}
Step 3930: {'loss': 63.43494415283203, 'l1_loss': 178.76498413085938, 'l2_loss': 56.284149169921875, 'ortho_loss': 0.0009731409372761846}
Step 3940: {'loss': 63.439205169677734, 'l1_loss': 180.5653076171875, 'l2_loss': 56.216426849365234, 'ortho_loss': 0.0008227202924899757}
Step 3950: {'loss': 63.049007415771484, 'l1_loss': 177.8306884765625, 'l2_loss': 55.93559265136719, 'ortho_loss': 0.0009416640968993306}
Step 3960: {'loss': 63.27206039428711, 'l1_loss': 184.22108459472656, 'l2_loss': 55.903038024902344, 'ortho_loss': 0.0008876995998434722}
Step 3970: {'loss': 63.980777740478516, 'l1_loss': 185.51524353027344, 'l2_loss': 56.55998992919922, 'ortho_loss': 0.0009050453663803637}
Step 3980: {'loss': 63.414398193359375, 'l1_loss': 182.00909423828125, 'l2_loss': 56.13382339477539, 'ortho_loss': 0.0010408906964585185}
Step 3990: {'loss': 63.17015838623047, 'l1_loss': 183.32101440429688, 'l2_loss': 55.83707809448242, 'ortho_loss': 0.0012053112732246518}
Step 4000: {'loss': 63.33390808105469, 'l1_loss': 176.5230712890625, 'l2_loss': 56.27280044555664, 'ortho_loss': 0.00090724544133991}
Step 4010: {'loss': 62.91765213012695, 'l1_loss': 182.51376342773438, 'l2_loss': 55.61689376831055, 'ortho_loss': 0.0010443259961903095}
Step 4020: {'loss': 62.51445770263672, 'l1_loss': 179.81900024414062, 'l2_loss': 55.321495056152344, 'ortho_loss': 0.0010179238161072135}
Step 4030: {'loss': 62.5583381652832, 'l1_loss': 179.5225372314453, 'l2_loss': 55.37724304199219, 'ortho_loss': 0.0009818206308409572}
Step 4040: {'loss': 63.271305084228516, 'l1_loss': 182.1817169189453, 'l2_loss': 55.98383712768555, 'ortho_loss': 0.0009851964423432946}
Step 4050: {'loss': 63.35408020019531, 'l1_loss': 176.82310485839844, 'l2_loss': 56.28094482421875, 'ortho_loss': 0.0010424192296341062}
Step 4060: {'loss': 63.668148040771484, 'l1_loss': 179.1547393798828, 'l2_loss': 56.5017204284668, 'ortho_loss': 0.0011990265920758247}
Step 4070: {'loss': 63.976463317871094, 'l1_loss': 185.3041229248047, 'l2_loss': 56.56409454345703, 'ortho_loss': 0.0010380534222349524}
Step 4080: {'loss': 62.81724548339844, 'l1_loss': 177.79148864746094, 'l2_loss': 55.70538330078125, 'ortho_loss': 0.0010087571572512388}
Step 4090: {'loss': 63.830047607421875, 'l1_loss': 180.12379455566406, 'l2_loss': 56.624900817871094, 'ortho_loss': 0.0009657666669227183}
Step 4100: {'loss': 62.267765045166016, 'l1_loss': 177.1649169921875, 'l2_loss': 55.180965423583984, 'ortho_loss': 0.001007394283078611}
Step 4110: {'loss': 63.06991195678711, 'l1_loss': 183.47970581054688, 'l2_loss': 55.73056411743164, 'ortho_loss': 0.0008066422306001186}
Step 4120: {'loss': 64.17274475097656, 'l1_loss': 184.81454467773438, 'l2_loss': 56.7799186706543, 'ortho_loss': 0.001210779999382794}
Step 4130: {'loss': 63.404048919677734, 'l1_loss': 182.7091064453125, 'l2_loss': 56.095436096191406, 'ortho_loss': 0.001247331383638084}
Step 4140: {'loss': 63.47073745727539, 'l1_loss': 183.33868408203125, 'l2_loss': 56.13701629638672, 'ortho_loss': 0.0008684975327923894}
Step 4150: {'loss': 63.05821990966797, 'l1_loss': 178.4150390625, 'l2_loss': 55.921382904052734, 'ortho_loss': 0.001182927400805056}
Step 4160: {'loss': 62.72020721435547, 'l1_loss': 185.53118896484375, 'l2_loss': 55.29876708984375, 'ortho_loss': 0.000962166057433933}
Step 4170: {'loss': 62.525917053222656, 'l1_loss': 183.14144897460938, 'l2_loss': 55.20006561279297, 'ortho_loss': 0.0009735716739669442}
Step 4180: {'loss': 62.332054138183594, 'l1_loss': 184.07432556152344, 'l2_loss': 54.968868255615234, 'ortho_loss': 0.0010642227716743946}
Step 4190: {'loss': 62.3061408996582, 'l1_loss': 185.90834045410156, 'l2_loss': 54.869598388671875, 'ortho_loss': 0.0010550068691372871}
Step 4200: {'loss': 62.91204833984375, 'l1_loss': 183.30337524414062, 'l2_loss': 55.57971954345703, 'ortho_loss': 0.000977629330009222}
Step 4210: {'loss': 63.313148498535156, 'l1_loss': 180.95001220703125, 'l2_loss': 56.074913024902344, 'ortho_loss': 0.001186390989460051}
Step 4220: {'loss': 62.78567123413086, 'l1_loss': 184.03733825683594, 'l2_loss': 55.42395782470703, 'ortho_loss': 0.0011152001097798347}
Step 4230: {'loss': 63.45413589477539, 'l1_loss': 182.3007354736328, 'l2_loss': 56.16188049316406, 'ortho_loss': 0.0011183290043845773}
Step 4240: {'loss': 62.416744232177734, 'l1_loss': 182.85870361328125, 'l2_loss': 55.10216522216797, 'ortho_loss': 0.0011557231191545725}
Step 4250: {'loss': 62.29948806762695, 'l1_loss': 184.1605224609375, 'l2_loss': 54.932857513427734, 'ortho_loss': 0.0010447928216308355}
Step 4260: {'loss': 61.80970764160156, 'l1_loss': 183.4665069580078, 'l2_loss': 54.470848083496094, 'ortho_loss': 0.000986119033768773}
Step 4270: {'loss': 63.38030242919922, 'l1_loss': 180.5595703125, 'l2_loss': 56.157657623291016, 'ortho_loss': 0.0013122041709721088}
Step 4280: {'loss': 62.796142578125, 'l1_loss': 180.337890625, 'l2_loss': 55.582420349121094, 'ortho_loss': 0.0010373367695137858}
Step 4290: {'loss': 62.37549591064453, 'l1_loss': 181.27154541015625, 'l2_loss': 55.12442398071289, 'ortho_loss': 0.0010433598654344678}
Step 4300: {'loss': 63.05075454711914, 'l1_loss': 183.36309814453125, 'l2_loss': 55.71601104736328, 'ortho_loss': 0.001109411707147956}
Step 4310: {'loss': 62.73001480102539, 'l1_loss': 188.4678192138672, 'l2_loss': 55.19109344482422, 'ortho_loss': 0.001042132149450481}
Step 4320: {'loss': 62.61282730102539, 'l1_loss': 179.22055053710938, 'l2_loss': 55.44380187988281, 'ortho_loss': 0.0010136787313967943}
Step 4330: {'loss': 62.717403411865234, 'l1_loss': 186.487548828125, 'l2_loss': 55.257652282714844, 'ortho_loss': 0.0012419817503541708}
Step 4340: {'loss': 62.15190887451172, 'l1_loss': 183.39683532714844, 'l2_loss': 54.81578063964844, 'ortho_loss': 0.0012730431044474244}
Step 4350: {'loss': 62.84443283081055, 'l1_loss': 183.54257202148438, 'l2_loss': 55.50250244140625, 'ortho_loss': 0.0011501419357955456}
Step 4360: {'loss': 62.29399108886719, 'l1_loss': 187.78643798828125, 'l2_loss': 54.78227996826172, 'ortho_loss': 0.0012523806653916836}
Step 4370: {'loss': 62.28244400024414, 'l1_loss': 185.29653930664062, 'l2_loss': 54.87036895751953, 'ortho_loss': 0.0010699942940846086}
Step 4380: {'loss': 62.55465316772461, 'l1_loss': 182.64678955078125, 'l2_loss': 55.24855422973633, 'ortho_loss': 0.0011525339214131236}
Step 4390: {'loss': 63.04779815673828, 'l1_loss': 182.782470703125, 'l2_loss': 55.73625946044922, 'ortho_loss': 0.0012067342177033424}
Step 4400: {'loss': 62.17499542236328, 'l1_loss': 180.7212371826172, 'l2_loss': 54.945892333984375, 'ortho_loss': 0.001259719138033688}
Step 4410: {'loss': 63.4863395690918, 'l1_loss': 181.50604248046875, 'l2_loss': 56.225860595703125, 'ortho_loss': 0.0011905868304893374}
Step 4420: {'loss': 62.3913688659668, 'l1_loss': 185.74606323242188, 'l2_loss': 54.961273193359375, 'ortho_loss': 0.0012515870621427894}
Step 4430: {'loss': 62.386714935302734, 'l1_loss': 182.5911865234375, 'l2_loss': 55.082855224609375, 'ortho_loss': 0.001072959857992828}
Step 4440: {'loss': 62.77600860595703, 'l1_loss': 179.61187744140625, 'l2_loss': 55.59129333496094, 'ortho_loss': 0.0012099583400413394}
Step 4450: {'loss': 63.19390106201172, 'l1_loss': 183.7971649169922, 'l2_loss': 55.841793060302734, 'ortho_loss': 0.0011030101450160146}
Step 4460: {'loss': 62.3657112121582, 'l1_loss': 184.5576934814453, 'l2_loss': 54.983158111572266, 'ortho_loss': 0.0012136693112552166}
Step 4470: {'loss': 62.465938568115234, 'l1_loss': 185.71392822265625, 'l2_loss': 55.03710174560547, 'ortho_loss': 0.0013925526291131973}
Step 4480: {'loss': 63.1984748840332, 'l1_loss': 186.32327270507812, 'l2_loss': 55.74530029296875, 'ortho_loss': 0.0012273769825696945}
Step 4490: {'loss': 62.49394989013672, 'l1_loss': 184.5950469970703, 'l2_loss': 55.109840393066406, 'ortho_loss': 0.001548517495393753}
Step 4500: {'loss': 62.58477020263672, 'l1_loss': 184.00042724609375, 'l2_loss': 55.224464416503906, 'ortho_loss': 0.0014492998598143458}
Step 4510: {'loss': 62.83958053588867, 'l1_loss': 183.1349334716797, 'l2_loss': 55.51389694213867, 'ortho_loss': 0.0014368153642863035}
Step 4520: {'loss': 62.31195068359375, 'l1_loss': 183.65573120117188, 'l2_loss': 54.96543884277344, 'ortho_loss': 0.0014076196821406484}
Step 4530: {'loss': 62.186771392822266, 'l1_loss': 183.01107788085938, 'l2_loss': 54.86606216430664, 'ortho_loss': 0.0013361388118937612}
Step 4540: {'loss': 62.78776168823242, 'l1_loss': 187.07493591308594, 'l2_loss': 55.30446243286133, 'ortho_loss': 0.0015161196934059262}
Step 4550: {'loss': 62.84384536743164, 'l1_loss': 183.61505126953125, 'l2_loss': 55.49898147583008, 'ortho_loss': 0.0013081638608127832}
Step 4560: {'loss': 61.98515319824219, 'l1_loss': 184.71951293945312, 'l2_loss': 54.59607696533203, 'ortho_loss': 0.0014959650579839945}
Step 4570: {'loss': 62.5765495300293, 'l1_loss': 186.98548889160156, 'l2_loss': 55.09682083129883, 'ortho_loss': 0.001553362817503512}
Step 4580: {'loss': 62.812171936035156, 'l1_loss': 183.74012756347656, 'l2_loss': 55.462249755859375, 'ortho_loss': 0.0015899431891739368}
Step 4590: {'loss': 62.59121322631836, 'l1_loss': 183.53834533691406, 'l2_loss': 55.249393463134766, 'ortho_loss': 0.0014387700939550996}
Step 4600: {'loss': 62.36885452270508, 'l1_loss': 182.78668212890625, 'l2_loss': 55.057151794433594, 'ortho_loss': 0.0011740096379071474}
Step 4610: {'loss': 62.61444091796875, 'l1_loss': 185.58338928222656, 'l2_loss': 55.19084548950195, 'ortho_loss': 0.0013000569306313992}
Step 4620: {'loss': 62.30188751220703, 'l1_loss': 188.30844116210938, 'l2_loss': 54.769309997558594, 'ortho_loss': 0.0012007467448711395}
Step 4630: {'loss': 62.13780975341797, 'l1_loss': 185.4945831298828, 'l2_loss': 54.71771240234375, 'ortho_loss': 0.0015683110104873776}
Step 4640: {'loss': 62.11341857910156, 'l1_loss': 177.8428955078125, 'l2_loss': 54.99945068359375, 'ortho_loss': 0.0012616583844646811}
Step 4650: {'loss': 62.48727035522461, 'l1_loss': 186.41751098632812, 'l2_loss': 55.030330657958984, 'ortho_loss': 0.0011996887624263763}
Step 4660: {'loss': 61.924869537353516, 'l1_loss': 188.00851440429688, 'l2_loss': 54.404266357421875, 'ortho_loss': 0.0013189759338274598}
Step 4670: {'loss': 62.299381256103516, 'l1_loss': 185.39601135253906, 'l2_loss': 54.88326644897461, 'ortho_loss': 0.00136955629568547}
Step 4680: {'loss': 63.41029739379883, 'l1_loss': 182.45193481445312, 'l2_loss': 56.11198425292969, 'ortho_loss': 0.0011874112533405423}
Step 4690: {'loss': 62.83041000366211, 'l1_loss': 190.31320190429688, 'l2_loss': 55.21752166748047, 'ortho_loss': 0.0018083715112879872}
Step 4700: {'loss': 61.69956588745117, 'l1_loss': 187.509521484375, 'l2_loss': 54.198890686035156, 'ortho_loss': 0.0014721185434609652}
Step 4710: {'loss': 62.650081634521484, 'l1_loss': 188.45712280273438, 'l2_loss': 55.11151885986328, 'ortho_loss': 0.0014013383770361543}
Step 4720: {'loss': 62.84490203857422, 'l1_loss': 184.17335510253906, 'l2_loss': 55.477699279785156, 'ortho_loss': 0.0013446443481370807}
Step 4730: {'loss': 61.58531188964844, 'l1_loss': 179.53823852539062, 'l2_loss': 54.40345764160156, 'ortho_loss': 0.0016254825750365853}
Step 4740: {'loss': 62.5534782409668, 'l1_loss': 185.92527770996094, 'l2_loss': 55.116233825683594, 'ortho_loss': 0.0011712322011590004}
Step 4750: {'loss': 62.42917251586914, 'l1_loss': 185.47836303710938, 'l2_loss': 55.009765625, 'ortho_loss': 0.0013485288945958018}
Step 4760: {'loss': 62.073734283447266, 'l1_loss': 184.53309631347656, 'l2_loss': 54.692115783691406, 'ortho_loss': 0.0014717603335157037}
Step 4770: {'loss': 62.32402038574219, 'l1_loss': 186.35653686523438, 'l2_loss': 54.86949157714844, 'ortho_loss': 0.0013406523503363132}
Step 4780: {'loss': 62.06312942504883, 'l1_loss': 186.2432861328125, 'l2_loss': 54.6131591796875, 'ortho_loss': 0.0011956134112551808}
Step 4790: {'loss': 62.209312438964844, 'l1_loss': 183.43142700195312, 'l2_loss': 54.871768951416016, 'ortho_loss': 0.0014377880143001676}
Step 4800: {'loss': 62.376155853271484, 'l1_loss': 185.19906616210938, 'l2_loss': 54.96792984008789, 'ortho_loss': 0.001314243534579873}
Step 4810: {'loss': 62.39958190917969, 'l1_loss': 183.97543334960938, 'l2_loss': 55.040225982666016, 'ortho_loss': 0.0016883801436051726}
Step 4820: {'loss': 62.68785095214844, 'l1_loss': 187.5491485595703, 'l2_loss': 55.18560791015625, 'ortho_loss': 0.001399356173351407}
Step 4830: {'loss': 62.36650466918945, 'l1_loss': 185.69207763671875, 'l2_loss': 54.93853759765625, 'ortho_loss': 0.0014382132794708014}
Step 4840: {'loss': 62.183685302734375, 'l1_loss': 188.5602264404297, 'l2_loss': 54.64103317260742, 'ortho_loss': 0.0012130739632993937}
Step 4850: {'loss': 62.046974182128906, 'l1_loss': 185.08663940429688, 'l2_loss': 54.64319610595703, 'ortho_loss': 0.0015546462964266539}
Step 4860: {'loss': 62.17097854614258, 'l1_loss': 182.89144897460938, 'l2_loss': 54.85499572753906, 'ortho_loss': 0.0016273808432742953}
Step 4870: {'loss': 61.63654708862305, 'l1_loss': 186.37860107421875, 'l2_loss': 54.181148529052734, 'ortho_loss': 0.0012758589582517743}
Step 4880: {'loss': 61.86969757080078, 'l1_loss': 182.7362823486328, 'l2_loss': 54.55995178222656, 'ortho_loss': 0.0014698321465402842}

 training complete! 

all info: /gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/results/sae_variants/20250126_022438_adaptive_orthogonal_sae/run_1/final_info.json

Running absorption evaluation...
Loaded pretrained model google/gemma-2-2b into HookedTransformer
[PosixPath('/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/artifacts/absorption/k_sparse_probing/google/gemma-2-2b_layer_5_sae_custom_sae/layer_5_google/gemma-2-2b_layer_5_sae_custom_sae_metrics.parquet')] exist(s), loading from disk
[PosixPath('/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/artifacts/absorption/feature_absorption/google/gemma-2-2b_layer_5_sae_custom_sae/layer_5_google/gemma-2-2b_layer_5_sae_custom_sae.parquet')] exist(s), loading from disk

Running autointerp evaluation...
Loaded pretrained model google/gemma-2-2b into HookedTransformer
coder_out: Ah yes, I see the error. We need to update the trainer initialization to use OrthogonalTrainer instead of CustomTrainer since we renamed the class. Here's the fix:

experiment.py
```python
<<<<<<< SEARCH
    trainer = CustomTrainer(
=======
    trainer = OrthogonalTrainer(
>>>>>>> REPLACE
```

This change aligns with our earlier renaming of the trainer class from CustomTrainer to OrthogonalTrainer. Now the code should run without the undefined name error.

```bash
python experiment.py --out_dir=run_1
```, type: <class 'str'>
Run 1 failed with return code 1
Run failed with the following error 
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]
Loading checkpoint shards:  33%|███▎      | 1/3 [00:01<00:03,  1.66s/it]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:01,  1.53s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:03<00:00,  1.16s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:03<00:00,  1.27s/it]
You're using a GemmaTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.

Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]
Loading checkpoint shards:  33%|███▎      | 1/3 [00:01<00:03,  1.79s/it]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:03<00:01,  1.77s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:03<00:00,  1.09s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:03<00:00,  1.28s/it]

Running SAE evaluation on all selected SAEs:   0%|          | 0/1 [00:00<?, ?it/s]
Running SAE evaluation on all selected SAEs: 100%|██████████| 1/1 [00:00<00:00,  1.76it/s]
Running SAE evaluation on all selected SAEs: 100%|██████████| 1/1 [00:00<00:00,  1.76it/s]

Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]
Loading checkpoint shards:  33%|███▎      | 1/3 [00:01<00:02,  1.32s/it]
Loading checkpoint shards:  67%|██████▋   | 2/3 [00:02<00:01,  1.23s/it]
Loading checkpoint shards: 100%|██████████| 3/3 [00:02<00:00,  1.29it/s]
Loading checkpoint shards: 100%|██████████| 3/3 [00:02<00:00,  1.11it/s]

Running SAE evaluation on all selected SAEs:   0%|          | 0/1 [00:00<?, ?it/s]
Running SAE evaluation on all selected SAEs:   0%|          | 0/1 [00:03<?, ?it/s]
Traceback (most recent call last):
  File "/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/results/sae_variants/20250126_022438_adaptive_orthogonal_sae/experiment.py", line 781, in <module>
    evaluate_trained_sae(
  File "/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/results/sae_variants/20250126_022438_adaptive_orthogonal_sae/experiment.py", line 686, in evaluate_trained_sae
    eval_runners[eval_type]()
  File "/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/results/sae_variants/20250126_022438_adaptive_orthogonal_sae/experiment.py", line 606, in <lambda>
    lambda: autointerp.run_eval(
            ^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/evals/autointerp/main.py", line 559, in run_eval
    sae_eval_result = run_eval_single_sae(
                      ^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/radev/project/lafferty/tl784/AIscientist/free_PhD_labor/evals/autointerp/main.py", line 488, in run_eval_single_sae
    torch.save(tokenized_dataset, tokens_path)
  File "/gpfs/radev/home/tl784/.conda/envs/ai_scientist/lib/python3.11/site-packages/torch/serialization.py", line 849, in save
    with _open_zipfile_writer(f) as opened_zipfile:
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/radev/home/tl784/.conda/envs/ai_scientist/lib/python3.11/site-packages/torch/serialization.py", line 716, in _open_zipfile_writer
    return container(name_or_buffer)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/gpfs/radev/home/tl784/.conda/envs/ai_scientist/lib/python3.11/site-packages/torch/serialization.py", line 687, in __init__
    super().__init__(torch._C.PyTorchFileWriter(self.name))
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: Parent directory artifacts/autointerp/google does not exist.

Currently on iteration 1 of run 1
I understand the error - we need to ensure the artifacts directory exists before running the evaluations. Let's modify the experiment.py file to create the necessary directories.                                                    

experiment.py                                                                                                                                                                                                                         

                                                                                                                                                                                                                                      
 <<<<<<< SEARCH                                                                                                                                                                                                                       
 def evaluate_trained_sae(                                                                                                                                                                                                            
     selected_saes: list[tuple[str, Any]],                                                                                                                                                                                            
     model_name: str,                                                                                                                                                                                                                 
     eval_types: list[str],                                                                                                                                                                                                           
     device: str,                                                                                                                                                                                                                     
     llm_batch_size: Optional[int] = None,                                                                                                                                                                                            
     llm_dtype: Optional[str] = None,                                                                                                                                                                                                 
     api_key: Optional[str] = None,                                                                                                                                                                                                   
     force_rerun: bool = False,                                                                                                                                                                                                       
     save_activations: bool = False,                                                                                                                                                                                                  
     out_dir: str = "eval_results",                                                                                                                                                                                                   
 ):                                                                                                                                                                                                                                   
 =======                                                                                                                                                                                                                              
 def evaluate_trained_sae(                                                                                                                                                                                                            
     selected_saes: list[tuple[str, Any]],                                                                                                                                                                                            
     model_name: str,                                                                                                                                                                                                                 
     eval_types: list[str],                                                                                                                                                                                                           
     device: str,                                                                                                                                                                                                                     
     llm_batch_size: Optional[int] = None,                                                                                                                                                                                            
     llm_dtype: Optional[str] = None,                                                                                                                                                                                                 
     api_key: Optional[str] = None,                                                                                                                                                                                                   
     force_rerun: bool = False,                                                                                                                                                                                                       
     save_activations: bool = False,                                                                                                                                                                                                  
     out_dir: str = "eval_results",                                                                                                                                                                                                   
 ):                                                                                                                                                                                                                                   
     # Create necessary directories for artifacts                                                                                                                                                                                     
     os.makedirs("artifacts/autointerp/google", exist_ok=True)                                                                                                                                                                        
     os.makedirs("artifacts/autointerp/EleutherAI", exist_ok=True)                                                                                                                                                                    
 >>>>>>> REPLACE                                                                                                                                                                                                                      
                                                                                                                                                                                                                                      

Now let's create the directories and try running the experiment again:                                                                                                                                                                

                                                                                                                                                                                                                                      
 mkdir -p artifacts/autointerp/google artifacts/autointerp/EleutherAI                                                                                                                                                                 
 python experiment.py                                                                                                                                                                                                                 
                                                                                                                                                                                                                                      

Tokens: 21k sent, 417 received. Cost: $0.07 message, $0.26 session.
Applied edit to experiment.py

mkdir -p artifacts/autointerp/google artifacts/autointerp/EleutherAI
python experiment.py                                                
Step 0: {'loss': 248.86587524414062, 'l1_loss': 2692.192626953125, 'l2_loss': 141.17808532714844, 'ortho_loss': 0.0004728343919850886}
Step 10: {'loss': 245.58883666992188, 'l1_loss': 2660.13720703125, 'l2_loss': 139.18325805664062, 'ortho_loss': 0.00044218619586899877}
Step 20: {'loss': 243.43617248535156, 'l1_loss': 2651.158447265625, 'l2_loss': 137.3897705078125, 'ortho_loss': 0.00040804868331179023}
Step 30: {'loss': 244.974365234375, 'l1_loss': 2690.677734375, 'l2_loss': 137.34716796875, 'ortho_loss': 0.0004473089356906712}
Step 40: {'loss': 233.0592041015625, 'l1_loss': 2578.55908203125, 'l2_loss': 129.916748046875, 'ortho_loss': 0.00045636642607860267}
Step 50: {'loss': 221.3266143798828, 'l1_loss': 2453.399169921875, 'l2_loss': 123.19056701660156, 'ortho_loss': 0.0004046608810313046}
Step 60: {'loss': 217.12852478027344, 'l1_loss': 2407.962646484375, 'l2_loss': 120.80992889404297, 'ortho_loss': 0.0004329198563937098}
Step 70: {'loss': 208.2866973876953, 'l1_loss': 2293.65673828125, 'l2_loss': 116.54034423828125, 'ortho_loss': 0.0004027698596473783}
Step 80: {'loss': 198.66873168945312, 'l1_loss': 2156.995361328125, 'l2_loss': 112.38883972167969, 'ortho_loss': 0.0004155921924393624}
Step 90: {'loss': 196.57550048828125, 'l1_loss': 2108.71435546875, 'l2_loss': 112.22683715820312, 'ortho_loss': 0.0004594643833115697}
Step 100: {'loss': 188.3547821044922, 'l1_loss': 1980.31884765625, 'l2_loss': 109.14193725585938, 'ortho_loss': 0.00043072603875771165}
Step 110: {'loss': 193.78944396972656, 'l1_loss': 2015.559326171875, 'l2_loss': 113.16700744628906, 'ortho_loss': 0.00041037064511328936}
Step 120: {'loss': 182.2876434326172, 'l1_loss': 1832.183837890625, 'l2_loss': 109.00019836425781, 'ortho_loss': 0.0004345400375314057}
Step 130: {'loss': 174.83926391601562, 'l1_loss': 1709.0594482421875, 'l2_loss': 106.47679138183594, 'ortho_loss': 0.00045015328214503825}
Step 140: {'loss': 167.74630737304688, 'l1_loss': 1576.645751953125, 'l2_loss': 104.68038940429688, 'ortho_loss': 0.0004542022361420095}
Step 150: {'loss': 161.39675903320312, 'l1_loss': 1453.109375, 'l2_loss': 103.27229309082031, 'ortho_loss': 0.0004371712275315076}
Step 160: {'loss': 158.03195190429688, 'l1_loss': 1381.210693359375, 'l2_loss': 102.78343963623047, 'ortho_loss': 0.0004842074413318187}
Step 170: {'loss': 147.25, 'l1_loss': 1208.619873046875, 'l2_loss': 98.90512084960938, 'ortho_loss': 0.00046256056521087885}
Step 180: {'loss': 142.78012084960938, 'l1_loss': 1114.75439453125, 'l2_loss': 98.18986511230469, 'ortho_loss': 0.00041411592974327505}
Step 190: {'loss': 136.5749969482422, 'l1_loss': 992.3172607421875, 'l2_loss': 96.88221740722656, 'ortho_loss': 0.0004244203446432948}
Step 200: {'loss': 135.99789428710938, 'l1_loss': 955.4842529296875, 'l2_loss': 97.77845001220703, 'ortho_loss': 0.00041774456622079015}
Step 210: {'loss': 136.232177734375, 'l1_loss': 936.8616333007812, 'l2_loss': 98.75761413574219, 'ortho_loss': 0.0004383971099741757}
Step 220: {'loss': 124.70523071289062, 'l1_loss': 752.7188720703125, 'l2_loss': 94.59638977050781, 'ortho_loss': 0.0004055919998791069}
Step 230: {'loss': 123.38032531738281, 'l1_loss': 719.3602294921875, 'l2_loss': 94.60581970214844, 'ortho_loss': 0.00048724841326475143}
Step 240: {'loss': 115.44696807861328, 'l1_loss': 582.415771484375, 'l2_loss': 92.15025329589844, 'ortho_loss': 0.00041969623998738825}
Step 250: {'loss': 118.64585876464844, 'l1_loss': 606.0382080078125, 'l2_loss': 94.40425109863281, 'ortho_loss': 0.00039151255623437464}
Step 260: {'loss': 117.04029083251953, 'l1_loss': 558.1466064453125, 'l2_loss': 94.71434020996094, 'ortho_loss': 0.00042170751839876175}
Step 270: {'loss': 113.05028533935547, 'l1_loss': 480.34075927734375, 'l2_loss': 93.8365707397461, 'ortho_loss': 0.00043188189738430083}
Step 280: {'loss': 111.74140167236328, 'l1_loss': 451.1986083984375, 'l2_loss': 93.69337463378906, 'ortho_loss': 0.000422472512582317}
Step 290: {'loss': 112.54986572265625, 'l1_loss': 456.0408630371094, 'l2_loss': 94.30813598632812, 'ortho_loss': 0.0004493581654969603}
Step 300: {'loss': 110.30482482910156, 'l1_loss': 422.89581298828125, 'l2_loss': 93.3888931274414, 'ortho_loss': 0.0004804822092410177}
Step 310: {'loss': 107.0864028930664, 'l1_loss': 358.34344482421875, 'l2_loss': 92.75257873535156, 'ortho_loss': 0.0004233228100929409}
Step 320: {'loss': 113.4212646484375, 'l1_loss': 451.44842529296875, 'l2_loss': 95.36323547363281, 'ortho_loss': 0.00044926657574251294}
Step 330: {'loss': 104.6191177368164, 'l1_loss': 305.27099609375, 'l2_loss': 92.40818786621094, 'ortho_loss': 0.0004498613707255572}
Step 340: {'loss': 102.3971939086914, 'l1_loss': 272.0723571777344, 'l2_loss': 91.51420593261719, 'ortho_loss': 0.0004452402063179761}
Step 350: {'loss': 108.59137725830078, 'l1_loss': 372.17840576171875, 'l2_loss': 93.70414733886719, 'ortho_loss': 0.00044331655954010785}
Step 360: {'loss': 106.92115783691406, 'l1_loss': 329.25604248046875, 'l2_loss': 93.75082397460938, 'ortho_loss': 0.0004400072793941945}
Step 370: {'loss': 105.99415588378906, 'l1_loss': 317.0500183105469, 'l2_loss': 93.31207275390625, 'ortho_loss': 0.00043565500527620316}
Step 380: {'loss': 107.21981811523438, 'l1_loss': 342.382080078125, 'l2_loss': 93.52445983886719, 'ortho_loss': 0.0003931910905521363}
Step 390: {'loss': 105.4281997680664, 'l1_loss': 301.99169921875, 'l2_loss': 93.34844970703125, 'ortho_loss': 0.00043145634117536247}
Step 400: {'loss': 102.56570434570312, 'l1_loss': 258.22100830078125, 'l2_loss': 92.23677062988281, 'ortho_loss': 0.0004531031590886414}
Step 410: {'loss': 102.36199951171875, 'l1_loss': 250.8138427734375, 'l2_loss': 92.32936096191406, 'ortho_loss': 0.0004354613774921745}
Step 420: {'loss': 101.34487915039062, 'l1_loss': 247.6346893310547, 'l2_loss': 91.43940734863281, 'ortho_loss': 0.0004302230372559279}
Step 430: {'loss': 103.39386749267578, 'l1_loss': 289.74896240234375, 'l2_loss': 91.80381774902344, 'ortho_loss': 0.000449279643362388}
Step 440: {'loss': 99.8937759399414, 'l1_loss': 242.05892944335938, 'l2_loss': 90.21133422851562, 'ortho_loss': 0.00042849653982557356}
Step 450: {'loss': 99.91354370117188, 'l1_loss': 257.2643737792969, 'l2_loss': 89.62287902832031, 'ortho_loss': 0.0004525520489551127}
Step 460: {'loss': 100.87635803222656, 'l1_loss': 284.5103759765625, 'l2_loss': 89.495849609375, 'ortho_loss': 0.00045634465641342103}
Step 470: {'loss': 99.94668579101562, 'l1_loss': 293.3426513671875, 'l2_loss': 88.212890625, 'ortho_loss': 0.0004582812252920121}
Step 480: {'loss': 98.91067504882812, 'l1_loss': 287.51611328125, 'l2_loss': 87.40994262695312, 'ortho_loss': 0.0004639238177333027}
Step 490: {'loss': 99.2503433227539, 'l1_loss': 324.9349365234375, 'l2_loss': 86.25285339355469, 'ortho_loss': 0.0004688073240686208}
Step 500: {'loss': 95.4098129272461, 'l1_loss': 259.7789001464844, 'l2_loss': 85.01856231689453, 'ortho_loss': 0.00045026722364127636}
Step 510: {'loss': 95.60211181640625, 'l1_loss': 278.5357666015625, 'l2_loss': 84.46058654785156, 'ortho_loss': 0.00045729661360383034}
Step 520: {'loss': 92.8136215209961, 'l1_loss': 241.5064697265625, 'l2_loss': 83.15328216552734, 'ortho_loss': 0.0004303056630305946}
Step 530: {'loss': 93.69339752197266, 'l1_loss': 280.7398986816406, 'l2_loss': 82.46371459960938, 'ortho_loss': 0.0004304925096221268}
Step 540: {'loss': 92.30337524414062, 'l1_loss': 273.7734375, 'l2_loss': 81.35235595703125, 'ortho_loss': 0.00043467996874824166}
Step 550: {'loss': 90.28205871582031, 'l1_loss': 240.21463012695312, 'l2_loss': 80.67338562011719, 'ortho_loss': 0.0004387211229186505}
Step 560: {'loss': 91.9858169555664, 'l1_loss': 280.3611145019531, 'l2_loss': 80.77127838134766, 'ortho_loss': 0.0004468460101634264}
Step 570: {'loss': 88.82798767089844, 'l1_loss': 233.11766052246094, 'l2_loss': 79.5031967163086, 'ortho_loss': 0.000436882401118055}
Step 580: {'loss': 89.20767211914062, 'l1_loss': 247.8493194580078, 'l2_loss': 79.29362487792969, 'ortho_loss': 0.00039845937862992287}
Step 590: {'loss': 88.7399673461914, 'l1_loss': 272.552001953125, 'l2_loss': 77.83779907226562, 'ortho_loss': 0.0004559709341265261}
Step 600: {'loss': 88.43863677978516, 'l1_loss': 262.9830322265625, 'l2_loss': 77.91921997070312, 'ortho_loss': 0.0004913861048407853}
Step 610: {'loss': 87.5774154663086, 'l1_loss': 270.77978515625, 'l2_loss': 76.74613189697266, 'ortho_loss': 0.00045124543248675764}
Step 620: {'loss': 86.48152923583984, 'l1_loss': 248.6125030517578, 'l2_loss': 76.53692626953125, 'ortho_loss': 0.00048212529509328306}
Step 630: {'loss': 86.33244323730469, 'l1_loss': 239.77029418945312, 'l2_loss': 76.74154663085938, 'ortho_loss': 0.0004305865440983325}
Step 640: {'loss': 86.69666290283203, 'l1_loss': 275.1360778808594, 'l2_loss': 75.69113159179688, 'ortho_loss': 0.0004468162951525301}
Step 650: {'loss': 86.65406036376953, 'l1_loss': 274.2228088378906, 'l2_loss': 75.68506622314453, 'ortho_loss': 0.0004257224500179291}
Step 660: {'loss': 86.70098876953125, 'l1_loss': 285.3919372558594, 'l2_loss': 75.28521728515625, 'ortho_loss': 0.0004466778482310474}
Step 670: {'loss': 85.71427154541016, 'l1_loss': 278.08453369140625, 'l2_loss': 74.5907974243164, 'ortho_loss': 0.0004429378022905439}
Step 680: {'loss': 83.87599182128906, 'l1_loss': 234.93658447265625, 'l2_loss': 74.47844696044922, 'ortho_loss': 0.00042948531336151063}
Step 690: {'loss': 84.2204818725586, 'l1_loss': 253.9578399658203, 'l2_loss': 74.06208801269531, 'ortho_loss': 0.00042065809248015285}
Step 700: {'loss': 83.33727264404297, 'l1_loss': 245.48681640625, 'l2_loss': 73.51771545410156, 'ortho_loss': 0.0004331276868470013}
Step 710: {'loss': 82.71000671386719, 'l1_loss': 251.2346649169922, 'l2_loss': 72.6605224609375, 'ortho_loss': 0.000497053493745625}
Step 720: {'loss': 81.77657318115234, 'l1_loss': 219.49647521972656, 'l2_loss': 72.99662017822266, 'ortho_loss': 0.00044480941141955554}
Step 730: {'loss': 81.43861389160156, 'l1_loss': 235.9864044189453, 'l2_loss': 71.99906921386719, 'ortho_loss': 0.0004469923733267933}
Step 740: {'loss': 81.42109680175781, 'l1_loss': 221.5208740234375, 'l2_loss': 72.56017303466797, 'ortho_loss': 0.0004596149083226919}
Step 750: {'loss': 80.72306060791016, 'l1_loss': 241.01632690429688, 'l2_loss': 71.08232116699219, 'ortho_loss': 0.0004072764131706208}
Step 760: {'loss': 79.92341613769531, 'l1_loss': 208.37994384765625, 'l2_loss': 71.58811950683594, 'ortho_loss': 0.00048114574747160077}
Step 770: {'loss': 81.20868682861328, 'l1_loss': 262.8384094238281, 'l2_loss': 70.69506072998047, 'ortho_loss': 0.0004482112417463213}
Step 780: {'loss': 80.70985412597656, 'l1_loss': 250.72698974609375, 'l2_loss': 70.6806869506836, 'ortho_loss': 0.000466254074126482}
Step 790: {'loss': 79.22661590576172, 'l1_loss': 194.01983642578125, 'l2_loss': 71.46572875976562, 'ortho_loss': 0.00045238720485940576}
Step 800: {'loss': 79.50415802001953, 'l1_loss': 239.9719696044922, 'l2_loss': 69.90519714355469, 'ortho_loss': 0.00042396329808980227}
Step 810: {'loss': 80.42988586425781, 'l1_loss': 235.9569091796875, 'l2_loss': 70.99150848388672, 'ortho_loss': 0.0004779264854732901}
Step 820: {'loss': 78.61762237548828, 'l1_loss': 208.99127197265625, 'l2_loss': 70.25788879394531, 'ortho_loss': 0.0004359640006441623}
Step 830: {'loss': 78.21337890625, 'l1_loss': 217.45428466796875, 'l2_loss': 69.5151138305664, 'ortho_loss': 0.00046199403004720807}
Step 840: {'loss': 78.95952606201172, 'l1_loss': 234.45008850097656, 'l2_loss': 69.5814208984375, 'ortho_loss': 0.0004877231549471617}
Step 850: {'loss': 78.94596862792969, 'l1_loss': 259.0264587402344, 'l2_loss': 68.58482360839844, 'ortho_loss': 0.0004221194249112159}
Step 860: {'loss': 77.82139587402344, 'l1_loss': 214.7880096435547, 'l2_loss': 69.22978210449219, 'ortho_loss': 0.0004729913198389113}
Step 870: {'loss': 76.7306900024414, 'l1_loss': 209.6317138671875, 'l2_loss': 68.34532165527344, 'ortho_loss': 0.0004901017528027296}
Step 880: {'loss': 77.99510955810547, 'l1_loss': 241.03872680664062, 'l2_loss': 68.35346984863281, 'ortho_loss': 0.0004545903648249805}
Step 890: {'loss': 77.9338150024414, 'l1_loss': 216.76889038085938, 'l2_loss': 69.2629623413086, 'ortho_loss': 0.0004899243358522654}
Step 900: {'loss': 76.20780944824219, 'l1_loss': 199.14462280273438, 'l2_loss': 68.24192810058594, 'ortho_loss': 0.00047722505405545235}
Step 910: {'loss': 77.232666015625, 'l1_loss': 209.26219177246094, 'l2_loss': 68.86209106445312, 'ortho_loss': 0.0004640095285139978}
Step 920: {'loss': 77.67574310302734, 'l1_loss': 233.06707763671875, 'l2_loss': 68.35296630859375, 'ortho_loss': 0.00045621368917636573}
Step 930: {'loss': 75.68844604492188, 'l1_loss': 200.4488983154297, 'l2_loss': 67.67039489746094, 'ortho_loss': 0.00047340692253783345}
Step 940: {'loss': 75.25912475585938, 'l1_loss': 196.105224609375, 'l2_loss': 67.4148178100586, 'ortho_loss': 0.00048319119377993047}
Step 950: {'loss': 75.08287048339844, 'l1_loss': 204.18865966796875, 'l2_loss': 66.91522216796875, 'ortho_loss': 0.0005026311264373362}
Step 960: {'loss': 74.78965759277344, 'l1_loss': 187.33151245117188, 'l2_loss': 67.29630279541016, 'ortho_loss': 0.000472725136205554}
Step 970: {'loss': 74.82505798339844, 'l1_loss': 187.4141845703125, 'l2_loss': 67.32839965820312, 'ortho_loss': 0.0004522601666394621}
Step 980: {'loss': 75.23622131347656, 'l1_loss': 199.23159790039062, 'l2_loss': 67.26687622070312, 'ortho_loss': 0.0004362244508229196}
Step 990: {'loss': 74.5361557006836, 'l1_loss': 187.70556640625, 'l2_loss': 67.02783203125, 'ortho_loss': 0.0004982596728950739}
Step 1000: {'loss': 76.04585266113281, 'l1_loss': 210.1380615234375, 'l2_loss': 67.64022827148438, 'ortho_loss': 0.0004928325652144849}
Step 1010: {'loss': 73.58773040771484, 'l1_loss': 175.26466369628906, 'l2_loss': 66.57705688476562, 'ortho_loss': 0.00043252232717350125}
Step 1020: {'loss': 73.78301239013672, 'l1_loss': 201.72943115234375, 'l2_loss': 65.7137451171875, 'ortho_loss': 0.0004644917498808354}
Step 1030: {'loss': 74.26063537597656, 'l1_loss': 201.52322387695312, 'l2_loss': 66.19961547851562, 'ortho_loss': 0.00047205862938426435}
Step 1040: {'loss': 73.52349090576172, 'l1_loss': 170.31045532226562, 'l2_loss': 66.71098327636719, 'ortho_loss': 0.0004485778044909239}
Step 1050: {'loss': 73.2712173461914, 'l1_loss': 168.78936767578125, 'l2_loss': 66.51954650878906, 'ortho_loss': 0.0004966684500686824}
Step 1060: {'loss': 73.42349243164062, 'l1_loss': 176.41510009765625, 'l2_loss': 66.3667984008789, 'ortho_loss': 0.00045215754653327167}
Step 1070: {'loss': 72.590087890625, 'l1_loss': 179.98365783691406, 'l2_loss': 65.3906478881836, 'ortho_loss': 0.00047345421626232564}
Step 1080: {'loss': 73.00086212158203, 'l1_loss': 169.52040100097656, 'l2_loss': 66.2199478149414, 'ortho_loss': 0.000513751117978245}
Step 1090: {'loss': 73.23541259765625, 'l1_loss': 178.74734497070312, 'l2_loss': 66.0854263305664, 'ortho_loss': 0.00044869325938634574}
Step 1100: {'loss': 72.85869598388672, 'l1_loss': 177.40907287597656, 'l2_loss': 65.76223754882812, 'ortho_loss': 0.0004973480827175081}
Step 1110: {'loss': 72.55215454101562, 'l1_loss': 171.88336181640625, 'l2_loss': 65.67672729492188, 'ortho_loss': 0.0004668781766667962}
Step 1120: {'loss': 72.7963638305664, 'l1_loss': 185.9384765625, 'l2_loss': 65.3587417602539, 'ortho_loss': 0.0004324059991631657}
Step 1130: {'loss': 72.61273193359375, 'l1_loss': 175.1509552001953, 'l2_loss': 65.60659790039062, 'ortho_loss': 0.0004973994218744338}
Step 1140: {'loss': 71.88697814941406, 'l1_loss': 171.94607543945312, 'l2_loss': 65.009033203125, 'ortho_loss': 0.00048590521328151226}
Step 1150: {'loss': 73.22813415527344, 'l1_loss': 185.6961212158203, 'l2_loss': 65.8001937866211, 'ortho_loss': 0.0004919699276797473}
Step 1160: {'loss': 72.08149719238281, 'l1_loss': 166.3777313232422, 'l2_loss': 65.42630004882812, 'ortho_loss': 0.000441490177763626}
Step 1170: {'loss': 71.42040252685547, 'l1_loss': 159.1798095703125, 'l2_loss': 65.05311584472656, 'ortho_loss': 0.0004699791898019612}
Step 1180: {'loss': 71.3843002319336, 'l1_loss': 175.84695434570312, 'l2_loss': 64.35032653808594, 'ortho_loss': 0.0004993441980332136}
Step 1190: {'loss': 71.22447204589844, 'l1_loss': 163.29197692871094, 'l2_loss': 64.69270324707031, 'ortho_loss': 0.000459531118394807}
Step 1200: {'loss': 71.41647338867188, 'l1_loss': 152.69131469726562, 'l2_loss': 65.30873107910156, 'ortho_loss': 0.00047506674309261143}
Step 1210: {'loss': 71.69686889648438, 'l1_loss': 170.60018920898438, 'l2_loss': 64.87277221679688, 'ortho_loss': 0.0004711711953859776}
Step 1220: {'loss': 71.24111938476562, 'l1_loss': 168.37417602539062, 'l2_loss': 64.50605773925781, 'ortho_loss': 0.0004751380765810609}
Step 1230: {'loss': 71.2810287475586, 'l1_loss': 174.6959991455078, 'l2_loss': 64.29309844970703, 'ortho_loss': 0.00046783374273218215}
Step 1240: {'loss': 71.11080932617188, 'l1_loss': 166.25604248046875, 'l2_loss': 64.46047973632812, 'ortho_loss': 0.0004615419020410627}
Step 1250: {'loss': 71.60531616210938, 'l1_loss': 172.5293731689453, 'l2_loss': 64.70403289794922, 'ortho_loss': 0.0005193704273551702}
Step 1260: {'loss': 71.73681640625, 'l1_loss': 176.2769317626953, 'l2_loss': 64.68563842773438, 'ortho_loss': 0.00047948569408617914}
Step 1270: {'loss': 70.601806640625, 'l1_loss': 166.45498657226562, 'l2_loss': 63.94350814819336, 'ortho_loss': 0.00048822362441569567}
Step 1280: {'loss': 70.26261901855469, 'l1_loss': 164.73912048339844, 'l2_loss': 63.67296600341797, 'ortho_loss': 0.0004590238386299461}
Step 1290: {'loss': 71.06304931640625, 'l1_loss': 172.53634643554688, 'l2_loss': 64.1614990234375, 'ortho_loss': 0.0004881830245722085}
Step 1300: {'loss': 70.85033416748047, 'l1_loss': 165.46202087402344, 'l2_loss': 64.23175048828125, 'ortho_loss': 0.000500809692312032}
Step 1310: {'loss': 70.7152328491211, 'l1_loss': 154.325439453125, 'l2_loss': 64.54212188720703, 'ortho_loss': 0.00046789812040515244}
Step 1320: {'loss': 70.27520751953125, 'l1_loss': 178.51577758789062, 'l2_loss': 63.13447952270508, 'ortho_loss': 0.0005096474196761847}
Step 1330: {'loss': 70.39029693603516, 'l1_loss': 161.84442138671875, 'l2_loss': 63.916412353515625, 'ortho_loss': 0.0005430640303529799}
Step 1340: {'loss': 69.988525390625, 'l1_loss': 169.6916046142578, 'l2_loss': 63.20073318481445, 'ortho_loss': 0.0006453615496866405}
Step 1350: {'loss': 70.30702209472656, 'l1_loss': 163.5969696044922, 'l2_loss': 63.76305389404297, 'ortho_loss': 0.00045197541476227343}
Step 1360: {'loss': 69.65025329589844, 'l1_loss': 163.13272094726562, 'l2_loss': 63.124847412109375, 'ortho_loss': 0.0004844566574320197}
Step 1370: {'loss': 69.88392639160156, 'l1_loss': 159.41845703125, 'l2_loss': 63.50709533691406, 'ortho_loss': 0.00047163391718640924}
Step 1380: {'loss': 70.32942962646484, 'l1_loss': 167.8056182861328, 'l2_loss': 63.617103576660156, 'ortho_loss': 0.0004986121202819049}
Step 1390: {'loss': 69.65254211425781, 'l1_loss': 156.877685546875, 'l2_loss': 63.37733459472656, 'ortho_loss': 0.0005125796305947006}
Step 1400: {'loss': 69.85575103759766, 'l1_loss': 168.336669921875, 'l2_loss': 63.12218475341797, 'ortho_loss': 0.0005018303054384887}
Step 1410: {'loss': 69.93031311035156, 'l1_loss': 159.5809326171875, 'l2_loss': 63.546974182128906, 'ortho_loss': 0.000495514424983412}
Step 1420: {'loss': 69.00587463378906, 'l1_loss': 165.6737518310547, 'l2_loss': 62.37882995605469, 'ortho_loss': 0.0004718004784081131}
Step 1430: {'loss': 69.47623443603516, 'l1_loss': 156.86331176757812, 'l2_loss': 63.20161437988281, 'ortho_loss': 0.00043377207475714386}
Step 1440: {'loss': 69.51966857910156, 'l1_loss': 158.4132537841797, 'l2_loss': 63.18301773071289, 'ortho_loss': 0.0005940372939221561}
Step 1450: {'loss': 69.4128189086914, 'l1_loss': 159.31094360351562, 'l2_loss': 63.040287017822266, 'ortho_loss': 0.00046835659304633737}
Step 1460: {'loss': 68.72957611083984, 'l1_loss': 164.07656860351562, 'l2_loss': 62.166404724121094, 'ortho_loss': 0.0005529347690753639}
Step 1470: {'loss': 69.51451873779297, 'l1_loss': 161.17092895507812, 'l2_loss': 63.06757354736328, 'ortho_loss': 0.0005212309188209474}
Step 1480: {'loss': 69.19903564453125, 'l1_loss': 175.34835815429688, 'l2_loss': 62.184993743896484, 'ortho_loss': 0.0005272515118122101}
Step 1490: {'loss': 69.2830581665039, 'l1_loss': 166.73406982421875, 'l2_loss': 62.613582611083984, 'ortho_loss': 0.0005569696077145636}
Step 1500: {'loss': 69.4718246459961, 'l1_loss': 160.44015502929688, 'l2_loss': 63.05413055419922, 'ortho_loss': 0.00045544575550593436}
Step 1510: {'loss': 68.1585693359375, 'l1_loss': 158.38397216796875, 'l2_loss': 61.8231086730957, 'ortho_loss': 0.00048137884004972875}
Step 1520: {'loss': 69.09387969970703, 'l1_loss': 176.94168090820312, 'l2_loss': 62.01610565185547, 'ortho_loss': 0.0005287370295263827}
Step 1530: {'loss': 68.51742553710938, 'l1_loss': 150.49807739257812, 'l2_loss': 62.497413635253906, 'ortho_loss': 0.00046061372268013656}
Step 1540: {'loss': 68.76578521728516, 'l1_loss': 163.60150146484375, 'l2_loss': 62.22160339355469, 'ortho_loss': 0.0006091189570724964}
Step 1550: {'loss': 68.37684631347656, 'l1_loss': 157.00404357910156, 'l2_loss': 62.09657669067383, 'ortho_loss': 0.0005198317230679095}
Step 1560: {'loss': 68.34207916259766, 'l1_loss': 153.74278259277344, 'l2_loss': 62.19226837158203, 'ortho_loss': 0.0005147918709553778}
Step 1570: {'loss': 69.15719604492188, 'l1_loss': 163.2740020751953, 'l2_loss': 62.626136779785156, 'ortho_loss': 0.0004837558954022825}
Step 1580: {'loss': 68.5225830078125, 'l1_loss': 165.04481506347656, 'l2_loss': 61.920684814453125, 'ortho_loss': 0.0005263525526970625}
Step 1590: {'loss': 68.22779846191406, 'l1_loss': 155.56663513183594, 'l2_loss': 62.005008697509766, 'ortho_loss': 0.000617711921222508}
Step 1600: {'loss': 68.74642181396484, 'l1_loss': 161.66201782226562, 'l2_loss': 62.27982711791992, 'ortho_loss': 0.000565635331440717}
Step 1610: {'loss': 67.81814575195312, 'l1_loss': 160.58126831054688, 'l2_loss': 61.39479446411133, 'ortho_loss': 0.00048269343096762896}
Step 1620: {'loss': 69.43306732177734, 'l1_loss': 168.92831420898438, 'l2_loss': 62.67583465576172, 'ortho_loss': 0.00048826850252225995}
Step 1630: {'loss': 68.91539001464844, 'l1_loss': 173.3251190185547, 'l2_loss': 61.982276916503906, 'ortho_loss': 0.000552531739231199}
Step 1640: {'loss': 67.39816284179688, 'l1_loss': 159.4552001953125, 'l2_loss': 61.01985168457031, 'ortho_loss': 0.0005448992014862597}
Step 1650: {'loss': 68.44094848632812, 'l1_loss': 154.1719970703125, 'l2_loss': 62.273963928222656, 'ortho_loss': 0.0005304336664266884}
Step 1660: {'loss': 67.6866455078125, 'l1_loss': 160.74932861328125, 'l2_loss': 61.25657272338867, 'ortho_loss': 0.0004826632793992758}
Step 1670: {'loss': 68.2072525024414, 'l1_loss': 160.51742553710938, 'l2_loss': 61.78645324707031, 'ortho_loss': 0.00047869503032416105}
Step 1680: {'loss': 68.17494201660156, 'l1_loss': 166.67469787597656, 'l2_loss': 61.50782775878906, 'ortho_loss': 0.000633488642051816}
Step 1690: {'loss': 66.8178482055664, 'l1_loss': 152.3610076904297, 'l2_loss': 60.723304748535156, 'ortho_loss': 0.0005162893794476986}
Step 1700: {'loss': 67.65811157226562, 'l1_loss': 159.9783172607422, 'l2_loss': 61.258872985839844, 'ortho_loss': 0.0005274845752865076}
Step 1710: {'loss': 68.41061401367188, 'l1_loss': 171.80450439453125, 'l2_loss': 61.53833770751953, 'ortho_loss': 0.0004818314337171614}
Step 1720: {'loss': 67.75949096679688, 'l1_loss': 168.84060668945312, 'l2_loss': 61.00575256347656, 'ortho_loss': 0.0005634867120534182}
Step 1730: {'loss': 67.75269317626953, 'l1_loss': 158.66200256347656, 'l2_loss': 61.40612030029297, 'ortho_loss': 0.00047172236372716725}
Step 1740: {'loss': 67.98085021972656, 'l1_loss': 175.36187744140625, 'l2_loss': 60.966270446777344, 'ortho_loss': 0.0005500316619873047}
Step 1750: {'loss': 67.63675689697266, 'l1_loss': 152.46371459960938, 'l2_loss': 61.53812026977539, 'ortho_loss': 0.0004472813452593982}
Step 1760: {'loss': 68.73709106445312, 'l1_loss': 172.170166015625, 'l2_loss': 61.85017013549805, 'ortho_loss': 0.0005782457301393151}
Step 1770: {'loss': 67.83875274658203, 'l1_loss': 163.620361328125, 'l2_loss': 61.29383087158203, 'ortho_loss': 0.0005495768855325878}
Step 1780: {'loss': 67.46343231201172, 'l1_loss': 164.0817108154297, 'l2_loss': 60.90007019042969, 'ortho_loss': 0.00047098094364628196}
Step 1790: {'loss': 67.52172088623047, 'l1_loss': 165.89883422851562, 'l2_loss': 60.88566970825195, 'ortho_loss': 0.0004991154419258237}
Step 1800: {'loss': 67.75684356689453, 'l1_loss': 168.0160369873047, 'l2_loss': 61.036094665527344, 'ortho_loss': 0.0005220694583840668}
Step 1810: {'loss': 67.5451889038086, 'l1_loss': 161.29025268554688, 'l2_loss': 61.093475341796875, 'ortho_loss': 0.0005216606077738106}
Step 1820: {'loss': 67.95989227294922, 'l1_loss': 167.64901733398438, 'l2_loss': 61.253841400146484, 'ortho_loss': 0.00046236891648732126}
Step 1830: {'loss': 67.05200958251953, 'l1_loss': 157.7174835205078, 'l2_loss': 60.74319839477539, 'ortho_loss': 0.0005787751288153231}
Step 1840: {'loss': 67.05915069580078, 'l1_loss': 160.6488800048828, 'l2_loss': 60.633087158203125, 'ortho_loss': 0.0005202981410548091}
Step 1850: {'loss': 67.45015716552734, 'l1_loss': 164.05606079101562, 'l2_loss': 60.88780975341797, 'ortho_loss': 0.0005226099747233093}
Step 1860: {'loss': 67.22590637207031, 'l1_loss': 162.6328125, 'l2_loss': 60.72047424316406, 'ortho_loss': 0.0006217377376742661}
Step 1870: {'loss': 67.97480010986328, 'l1_loss': 169.52313232421875, 'l2_loss': 61.19377899169922, 'ortho_loss': 0.0005032201879657805}
Step 1880: {'loss': 65.87673950195312, 'l1_loss': 170.228515625, 'l2_loss': 59.06748962402344, 'ortho_loss': 0.0005256214062683284}
Step 1890: {'loss': 66.98845672607422, 'l1_loss': 159.73602294921875, 'l2_loss': 60.598899841308594, 'ortho_loss': 0.0005788778071291745}
Step 1900: {'loss': 67.27742004394531, 'l1_loss': 165.9197998046875, 'l2_loss': 60.6405143737793, 'ortho_loss': 0.0005575414397753775}
Step 1910: {'loss': 67.2135009765625, 'l1_loss': 167.08770751953125, 'l2_loss': 60.52986526489258, 'ortho_loss': 0.0006317945662885904}
Step 1920: {'loss': 67.7445297241211, 'l1_loss': 163.52418518066406, 'l2_loss': 61.20346450805664, 'ortho_loss': 0.0005142491427250206}
Step 1930: {'loss': 67.4168930053711, 'l1_loss': 160.86856079101562, 'l2_loss': 60.98204040527344, 'ortho_loss': 0.0005312121938914061}
Step 1940: {'loss': 67.00164794921875, 'l1_loss': 166.9993896484375, 'l2_loss': 60.32157516479492, 'ortho_loss': 0.0004880095075350255}
Step 1950: {'loss': 67.3876953125, 'l1_loss': 164.05076599121094, 'l2_loss': 60.82555389404297, 'ortho_loss': 0.0005579091375693679}
Step 1960: {'loss': 67.4402847290039, 'l1_loss': 172.0364990234375, 'l2_loss': 60.55873107910156, 'ortho_loss': 0.0004686654719989747}
Step 1970: {'loss': 66.38925170898438, 'l1_loss': 166.83004760742188, 'l2_loss': 59.71596145629883, 'ortho_loss': 0.0004744752368424088}
Step 1980: {'loss': 66.86528015136719, 'l1_loss': 160.93704223632812, 'l2_loss': 60.42765808105469, 'ortho_loss': 0.0006916671409271657}
Step 1990: {'loss': 67.32923889160156, 'l1_loss': 159.6686553955078, 'l2_loss': 60.942359924316406, 'ortho_loss': 0.0006486102356575429}
Step 2000: {'loss': 67.27350616455078, 'l1_loss': 167.3831787109375, 'l2_loss': 60.57806396484375, 'ortho_loss': 0.0005821273080073297}
Step 2010: {'loss': 66.89056396484375, 'l1_loss': 173.82025146484375, 'l2_loss': 59.93763732910156, 'ortho_loss': 0.0005762791261076927}
Step 2020: {'loss': 66.47074127197266, 'l1_loss': 161.39437866210938, 'l2_loss': 60.014869689941406, 'ortho_loss': 0.0004955879412591457}
Step 2030: {'loss': 67.29841613769531, 'l1_loss': 167.17529296875, 'l2_loss': 60.611289978027344, 'ortho_loss': 0.0005602040910162032}
Step 2040: {'loss': 67.2009048461914, 'l1_loss': 167.67648315429688, 'l2_loss': 60.49372863769531, 'ortho_loss': 0.0005868305452167988}
Step 2050: {'loss': 65.82783508300781, 'l1_loss': 159.67892456054688, 'l2_loss': 59.440582275390625, 'ortho_loss': 0.0004948892164975405}
Step 2060: {'loss': 66.50599670410156, 'l1_loss': 160.53553771972656, 'l2_loss': 60.08446502685547, 'ortho_loss': 0.0005166417686268687}
Step 2070: {'loss': 66.35724639892578, 'l1_loss': 164.0159454345703, 'l2_loss': 59.7965087890625, 'ortho_loss': 0.0005009039887227118}
Step 2080: {'loss': 66.84213256835938, 'l1_loss': 166.5046844482422, 'l2_loss': 60.18183135986328, 'ortho_loss': 0.0005652094841934741}
Step 2090: {'loss': 65.78252410888672, 'l1_loss': 166.30081176757812, 'l2_loss': 59.130374908447266, 'ortho_loss': 0.000565793423447758}
Step 2100: {'loss': 66.66878509521484, 'l1_loss': 165.67042541503906, 'l2_loss': 60.041847229003906, 'ortho_loss': 0.0006036775303073227}
Step 2110: {'loss': 66.07421112060547, 'l1_loss': 163.10992431640625, 'l2_loss': 59.54970932006836, 'ortho_loss': 0.0005520855193026364}
Step 2120: {'loss': 66.83256530761719, 'l1_loss': 168.14144897460938, 'l2_loss': 60.106807708740234, 'ortho_loss': 0.0005078680696897209}
Step 2130: {'loss': 66.10323333740234, 'l1_loss': 172.46908569335938, 'l2_loss': 59.204368591308594, 'ortho_loss': 0.0005099273985251784}
Step 2140: {'loss': 66.02111053466797, 'l1_loss': 170.8197784423828, 'l2_loss': 59.188201904296875, 'ortho_loss': 0.0005774983437731862}
Step 2150: {'loss': 65.51136779785156, 'l1_loss': 166.8919219970703, 'l2_loss': 58.83558654785156, 'ortho_loss': 0.0005290784756653011}
Step 2160: {'loss': 66.08625030517578, 'l1_loss': 168.3695831298828, 'l2_loss': 59.351356506347656, 'ortho_loss': 0.0005598023417405784}
Step 2170: {'loss': 65.85011291503906, 'l1_loss': 165.02671813964844, 'l2_loss': 59.248931884765625, 'ortho_loss': 0.000580216757953167}
Step 2180: {'loss': 66.76485443115234, 'l1_loss': 168.44686889648438, 'l2_loss': 60.02687072753906, 'ortho_loss': 0.0005278574535623193}
Step 2190: {'loss': 66.45582580566406, 'l1_loss': 179.15817260742188, 'l2_loss': 59.28938293457031, 'ortho_loss': 0.0005787905538454652}
Step 2200: {'loss': 65.99591064453125, 'l1_loss': 158.0819854736328, 'l2_loss': 59.672523498535156, 'ortho_loss': 0.00055120192700997}
Step 2210: {'loss': 66.35169219970703, 'l1_loss': 172.40045166015625, 'l2_loss': 59.4555778503418, 'ortho_loss': 0.0005011857720091939}
Step 2220: {'loss': 66.7564926147461, 'l1_loss': 173.97021484375, 'l2_loss': 59.797550201416016, 'ortho_loss': 0.0006730408640578389}
Step 2230: {'loss': 66.47942352294922, 'l1_loss': 173.5441131591797, 'l2_loss': 59.537540435791016, 'ortho_loss': 0.0006016955594532192}
Step 2240: {'loss': 66.3728256225586, 'l1_loss': 162.8714599609375, 'l2_loss': 59.85783386230469, 'ortho_loss': 0.0006418346310965717}
Step 2250: {'loss': 65.83631134033203, 'l1_loss': 162.6149139404297, 'l2_loss': 59.33159255981445, 'ortho_loss': 0.0005981619469821453}
Step 2260: {'loss': 65.36273193359375, 'l1_loss': 166.8157958984375, 'l2_loss': 58.689971923828125, 'ortho_loss': 0.000634640920907259}
Step 2270: {'loss': 65.59527587890625, 'l1_loss': 168.71212768554688, 'l2_loss': 58.8466796875, 'ortho_loss': 0.0005831148591823876}
Step 2280: {'loss': 65.15638732910156, 'l1_loss': 167.94375610351562, 'l2_loss': 58.43852233886719, 'ortho_loss': 0.0005781971267424524}
Step 2290: {'loss': 66.24333190917969, 'l1_loss': 168.40457153320312, 'l2_loss': 59.507041931152344, 'ortho_loss': 0.0005367218982428312}
Step 2300: {'loss': 65.24748229980469, 'l1_loss': 170.32176208496094, 'l2_loss': 58.43450164794922, 'ortho_loss': 0.0005451654433272779}
Step 2310: {'loss': 65.8731460571289, 'l1_loss': 166.224365234375, 'l2_loss': 59.22406768798828, 'ortho_loss': 0.0005270192632451653}
Step 2320: {'loss': 65.61410522460938, 'l1_loss': 162.7269287109375, 'l2_loss': 59.10488510131836, 'ortho_loss': 0.0007061761571094394}
Step 2330: {'loss': 65.49615478515625, 'l1_loss': 170.77651977539062, 'l2_loss': 58.66497039794922, 'ortho_loss': 0.0005921658012084663}
Step 2340: {'loss': 64.8115463256836, 'l1_loss': 164.78140258789062, 'l2_loss': 58.22018051147461, 'ortho_loss': 0.0005434696795418859}
Step 2350: {'loss': 65.69554138183594, 'l1_loss': 164.30282592773438, 'l2_loss': 59.123291015625, 'ortho_loss': 0.0006735154893249273}
Step 2360: {'loss': 66.28976440429688, 'l1_loss': 169.67526245117188, 'l2_loss': 59.502655029296875, 'ortho_loss': 0.0005066386074759066}
Step 2370: {'loss': 66.34342193603516, 'l1_loss': 175.13388061523438, 'l2_loss': 59.33794403076172, 'ortho_loss': 0.0005912899505347013}
Step 2380: {'loss': 64.75042724609375, 'l1_loss': 170.5135498046875, 'l2_loss': 57.929786682128906, 'ortho_loss': 0.0004895515157841146}
Step 2390: {'loss': 65.27289581298828, 'l1_loss': 165.4122314453125, 'l2_loss': 58.65626525878906, 'ortho_loss': 0.0007343890611082315}
Step 2400: {'loss': 65.41508483886719, 'l1_loss': 169.50157165527344, 'l2_loss': 58.63492202758789, 'ortho_loss': 0.0004926910623908043}
Step 2410: {'loss': 65.48703002929688, 'l1_loss': 164.07815551757812, 'l2_loss': 58.92376708984375, 'ortho_loss': 0.0006829925114288926}
Step 2420: {'loss': 65.13860321044922, 'l1_loss': 171.864990234375, 'l2_loss': 58.263885498046875, 'ortho_loss': 0.000553482212126255}
Step 2430: {'loss': 65.68071746826172, 'l1_loss': 175.18319702148438, 'l2_loss': 58.67329025268555, 'ortho_loss': 0.0004954614560119808}
Step 2440: {'loss': 65.87991333007812, 'l1_loss': 169.03652954101562, 'l2_loss': 59.11833953857422, 'ortho_loss': 0.0005596772534772754}
Step 2450: {'loss': 65.50839233398438, 'l1_loss': 169.25900268554688, 'l2_loss': 58.73792266845703, 'ortho_loss': 0.0005424453411251307}
Step 2460: {'loss': 65.41851043701172, 'l1_loss': 166.54718017578125, 'l2_loss': 58.75651550292969, 'ortho_loss': 0.0005283120553940535}
Step 2470: {'loss': 66.05091857910156, 'l1_loss': 172.16046142578125, 'l2_loss': 59.16437911987305, 'ortho_loss': 0.000596635858528316}
Step 2480: {'loss': 65.73818969726562, 'l1_loss': 170.4943084716797, 'l2_loss': 58.918296813964844, 'ortho_loss': 0.0006154776783660054}
Step 2490: {'loss': 65.47650146484375, 'l1_loss': 164.9766845703125, 'l2_loss': 58.87730407714844, 'ortho_loss': 0.0006648250855505466}
Step 2500: {'loss': 64.84073638916016, 'l1_loss': 172.2618865966797, 'l2_loss': 57.950111389160156, 'ortho_loss': 0.0007480607600882649}
Step 2510: {'loss': 65.91706848144531, 'l1_loss': 177.42788696289062, 'l2_loss': 58.819847106933594, 'ortho_loss': 0.0005226446082815528}
Step 2520: {'loss': 65.66606140136719, 'l1_loss': 164.8095703125, 'l2_loss': 59.07354736328125, 'ortho_loss': 0.0006457183044403791}
Step 2530: {'loss': 64.50696563720703, 'l1_loss': 164.342041015625, 'l2_loss': 57.93318557739258, 'ortho_loss': 0.0004961587255820632}
Step 2540: {'loss': 65.2710952758789, 'l1_loss': 186.9463348388672, 'l2_loss': 57.793121337890625, 'ortho_loss': 0.0006015577237121761}
Step 2550: {'loss': 64.99939727783203, 'l1_loss': 164.560302734375, 'l2_loss': 58.41687774658203, 'ortho_loss': 0.0005461616674438119}
Step 2560: {'loss': 64.96802520751953, 'l1_loss': 173.95326232910156, 'l2_loss': 58.00978088378906, 'ortho_loss': 0.0005812802701257169}
Step 2570: {'loss': 65.62387084960938, 'l1_loss': 177.53329467773438, 'l2_loss': 58.52241516113281, 'ortho_loss': 0.0006202601362019777}
Step 2580: {'loss': 64.99604797363281, 'l1_loss': 178.82443237304688, 'l2_loss': 57.842926025390625, 'ortho_loss': 0.0007233499782159925}
Step 2590: {'loss': 64.6029052734375, 'l1_loss': 168.9445037841797, 'l2_loss': 57.84502029418945, 'ortho_loss': 0.0005508922622539103}
Step 2600: {'loss': 65.54093933105469, 'l1_loss': 178.91946411132812, 'l2_loss': 58.38400650024414, 'ortho_loss': 0.0007490288699045777}
Step 2610: {'loss': 64.86090087890625, 'l1_loss': 172.88699340820312, 'l2_loss': 57.945308685302734, 'ortho_loss': 0.0005742597277276218}
Step 2620: {'loss': 65.43038177490234, 'l1_loss': 169.32666015625, 'l2_loss': 58.657196044921875, 'ortho_loss': 0.0006022084853611887}
Step 2630: {'loss': 64.94537353515625, 'l1_loss': 172.3895721435547, 'l2_loss': 58.04966354370117, 'ortho_loss': 0.0006520264432765543}
Step 2640: {'loss': 64.94742584228516, 'l1_loss': 168.85726928710938, 'l2_loss': 58.192989349365234, 'ortho_loss': 0.0007127663702704012}
Step 2650: {'loss': 65.65779876708984, 'l1_loss': 173.09283447265625, 'l2_loss': 58.733985900878906, 'ortho_loss': 0.0005086787859909236}
Step 2660: {'loss': 65.05867767333984, 'l1_loss': 166.29696655273438, 'l2_loss': 58.40666198730469, 'ortho_loss': 0.0006978159653954208}
Step 2670: {'loss': 65.20547485351562, 'l1_loss': 176.9425811767578, 'l2_loss': 58.127647399902344, 'ortho_loss': 0.0006164179067127407}
Step 2680: {'loss': 64.64727020263672, 'l1_loss': 169.70050048828125, 'l2_loss': 57.85913848876953, 'ortho_loss': 0.0005866570281796157}
Step 2690: {'loss': 65.18456268310547, 'l1_loss': 169.4151611328125, 'l2_loss': 58.407814025878906, 'ortho_loss': 0.0007396306027658284}
Step 2700: {'loss': 65.03577423095703, 'l1_loss': 174.0441436767578, 'l2_loss': 58.07386779785156, 'ortho_loss': 0.0006950812530703843}
Step 2710: {'loss': 64.7863998413086, 'l1_loss': 166.29916381835938, 'l2_loss': 58.13429260253906, 'ortho_loss': 0.0006980590987950563}
Step 2720: {'loss': 64.75127410888672, 'l1_loss': 171.59500122070312, 'l2_loss': 57.88734436035156, 'ortho_loss': 0.0006308184820227325}
Step 2730: {'loss': 64.98442077636719, 'l1_loss': 169.04539489746094, 'l2_loss': 58.22248840332031, 'ortho_loss': 0.0005887641455046833}
Step 2740: {'loss': 64.01154327392578, 'l1_loss': 167.639892578125, 'l2_loss': 57.30580139160156, 'ortho_loss': 0.0007257320685312152}
Step 2750: {'loss': 64.72633361816406, 'l1_loss': 169.84498596191406, 'l2_loss': 57.93241882324219, 'ortho_loss': 0.0005598108982667327}
Step 2760: {'loss': 64.76990509033203, 'l1_loss': 175.12933349609375, 'l2_loss': 57.764610290527344, 'ortho_loss': 0.0006225417018868029}
Step 2770: {'loss': 65.08819580078125, 'l1_loss': 171.58953857421875, 'l2_loss': 58.22447967529297, 'ortho_loss': 0.0006881570443511009}
Step 2780: {'loss': 64.3392562866211, 'l1_loss': 165.96771240234375, 'l2_loss': 57.700355529785156, 'ortho_loss': 0.0009352026972919703}
Step 2790: {'loss': 64.61432647705078, 'l1_loss': 176.64739990234375, 'l2_loss': 57.54829788208008, 'ortho_loss': 0.0006417439435608685}
Step 2800: {'loss': 65.38203430175781, 'l1_loss': 171.21746826171875, 'l2_loss': 58.533203125, 'ortho_loss': 0.0006450774963013828}
Step 2810: {'loss': 65.3472671508789, 'l1_loss': 179.24810791015625, 'l2_loss': 58.177207946777344, 'ortho_loss': 0.0006679215584881604}
Step 2820: {'loss': 64.14878845214844, 'l1_loss': 171.97972106933594, 'l2_loss': 57.26947021484375, 'ortho_loss': 0.000637591234408319}
Step 2830: {'loss': 65.07810974121094, 'l1_loss': 182.92233276367188, 'l2_loss': 57.76110076904297, 'ortho_loss': 0.0005553784430958331}
Step 2840: {'loss': 64.8520278930664, 'l1_loss': 171.93133544921875, 'l2_loss': 57.974639892578125, 'ortho_loss': 0.000678349519148469}
Step 2850: {'loss': 65.47468566894531, 'l1_loss': 177.57574462890625, 'l2_loss': 58.371498107910156, 'ortho_loss': 0.000805095536634326}
Step 2860: {'loss': 64.66394805908203, 'l1_loss': 170.8104248046875, 'l2_loss': 57.8314094543457, 'ortho_loss': 0.0006253393949009478}
Step 2870: {'loss': 64.43832397460938, 'l1_loss': 172.43548583984375, 'l2_loss': 57.54072189331055, 'ortho_loss': 0.0009080528980121017}
Step 2880: {'loss': 64.6063461303711, 'l1_loss': 171.51028442382812, 'l2_loss': 57.745819091796875, 'ortho_loss': 0.0005808982532471418}
Step 2890: {'loss': 64.36373901367188, 'l1_loss': 171.3391571044922, 'l2_loss': 57.5100212097168, 'ortho_loss': 0.0007672271458432078}
Step 2900: {'loss': 64.46955871582031, 'l1_loss': 168.97518920898438, 'l2_loss': 57.710411071777344, 'ortho_loss': 0.0006691434537060559}
Step 2910: {'loss': 64.99266052246094, 'l1_loss': 170.54119873046875, 'l2_loss': 58.1709098815918, 'ortho_loss': 0.0005390524747781456}
Step 2920: {'loss': 64.35591888427734, 'l1_loss': 170.48440551757812, 'l2_loss': 57.53642272949219, 'ortho_loss': 0.0006083683692850173}
Step 2930: {'loss': 64.4731674194336, 'l1_loss': 177.47219848632812, 'l2_loss': 57.37416076660156, 'ortho_loss': 0.0005997382686473429}
Step 2940: {'loss': 63.92465591430664, 'l1_loss': 171.88568115234375, 'l2_loss': 57.04911422729492, 'ortho_loss': 0.0005778793129138649}
Step 2950: {'loss': 64.67083740234375, 'l1_loss': 168.7051544189453, 'l2_loss': 57.92249298095703, 'ortho_loss': 0.0006688072462566197}
Step 2960: {'loss': 63.63196563720703, 'l1_loss': 167.835205078125, 'l2_loss': 56.91841125488281, 'ortho_loss': 0.0007263726438395679}
Step 2970: {'loss': 64.29800415039062, 'l1_loss': 176.32276916503906, 'l2_loss': 57.24496078491211, 'ortho_loss': 0.0006433229427784681}
Step 2980: {'loss': 65.37239837646484, 'l1_loss': 176.84072875976562, 'l2_loss': 58.29863357543945, 'ortho_loss': 0.0006973639829084277}
Step 2990: {'loss': 65.37092590332031, 'l1_loss': 179.65135192871094, 'l2_loss': 58.184749603271484, 'ortho_loss': 0.0006263481918722391}
Step 3000: {'loss': 64.5606918334961, 'l1_loss': 178.4877471923828, 'l2_loss': 57.42104721069336, 'ortho_loss': 0.0006719735683873296}
Step 3010: {'loss': 64.21060943603516, 'l1_loss': 175.2598876953125, 'l2_loss': 57.2000732421875, 'ortho_loss': 0.0006908312789164484}
Step 3020: {'loss': 65.54127502441406, 'l1_loss': 179.24319458007812, 'l2_loss': 58.371421813964844, 'ortho_loss': 0.0006230884464457631}
Step 3030: {'loss': 64.0693359375, 'l1_loss': 178.53445434570312, 'l2_loss': 56.92783737182617, 'ortho_loss': 0.000600950384978205}
Step 3040: {'loss': 64.36763763427734, 'l1_loss': 176.62835693359375, 'l2_loss': 57.302364349365234, 'ortho_loss': 0.0007015003357082605}
Step 3050: {'loss': 64.67892456054688, 'l1_loss': 176.9827880859375, 'l2_loss': 57.59947967529297, 'ortho_loss': 0.0006747565348632634}
Step 3060: {'loss': 63.76374816894531, 'l1_loss': 175.1959228515625, 'l2_loss': 56.755760192871094, 'ortho_loss': 0.0007555083138868213}
Step 3070: {'loss': 63.71904754638672, 'l1_loss': 168.93438720703125, 'l2_loss': 56.96152877807617, 'ortho_loss': 0.0007304681348614395}
Step 3080: {'loss': 64.51985931396484, 'l1_loss': 178.10414123535156, 'l2_loss': 57.39556884765625, 'ortho_loss': 0.000622370804194361}
Step 3090: {'loss': 64.72280883789062, 'l1_loss': 173.65553283691406, 'l2_loss': 57.776458740234375, 'ortho_loss': 0.000656354648526758}
Step 3100: {'loss': 64.22280883789062, 'l1_loss': 177.95211791992188, 'l2_loss': 57.10456848144531, 'ortho_loss': 0.0007637455128133297}
Step 3110: {'loss': 64.47730255126953, 'l1_loss': 175.0191650390625, 'l2_loss': 57.476409912109375, 'ortho_loss': 0.0006491062231361866}
Step 3120: {'loss': 64.38463592529297, 'l1_loss': 177.26219177246094, 'l2_loss': 57.29401397705078, 'ortho_loss': 0.0006831279024481773}
Step 3130: {'loss': 64.081298828125, 'l1_loss': 174.7112274169922, 'l2_loss': 57.092708587646484, 'ortho_loss': 0.0006691988673992455}
Step 3140: {'loss': 63.708499908447266, 'l1_loss': 173.14828491210938, 'l2_loss': 56.78242111206055, 'ortho_loss': 0.0007459461921826005}
Step 3150: {'loss': 63.84930419921875, 'l1_loss': 180.51312255859375, 'l2_loss': 56.62862777709961, 'ortho_loss': 0.0007629608735442162}
Step 3160: {'loss': 63.8271598815918, 'l1_loss': 176.04608154296875, 'l2_loss': 56.78518295288086, 'ortho_loss': 0.0006706631975248456}
Step 3170: {'loss': 64.43184661865234, 'l1_loss': 178.81109619140625, 'l2_loss': 57.279266357421875, 'ortho_loss': 0.0006969684618525207}
Step 3180: {'loss': 63.9429817199707, 'l1_loss': 170.39227294921875, 'l2_loss': 57.127174377441406, 'ortho_loss': 0.0005908353487029672}
Step 3190: {'loss': 64.10415649414062, 'l1_loss': 175.11141967773438, 'l2_loss': 57.099552154541016, 'ortho_loss': 0.0007110377191565931}
Step 3200: {'loss': 64.18431854248047, 'l1_loss': 175.4783172607422, 'l2_loss': 57.16504669189453, 'ortho_loss': 0.0006804914446547627}
Step 3210: {'loss': 64.77972412109375, 'l1_loss': 181.81723022460938, 'l2_loss': 57.506858825683594, 'ortho_loss': 0.0008602550951763988}
Step 3220: {'loss': 64.29571533203125, 'l1_loss': 171.9217529296875, 'l2_loss': 57.418697357177734, 'ortho_loss': 0.0007255443488247693}
Step 3230: {'loss': 64.70808410644531, 'l1_loss': 173.21829223632812, 'l2_loss': 57.779212951660156, 'ortho_loss': 0.0006775126093998551}
Step 3240: {'loss': 63.89341735839844, 'l1_loss': 175.1821746826172, 'l2_loss': 56.88599395751953, 'ortho_loss': 0.000691636058036238}
Step 3250: {'loss': 63.93903350830078, 'l1_loss': 176.06552124023438, 'l2_loss': 56.89626693725586, 'ortho_loss': 0.0007224236615002155}
Step 3260: {'loss': 63.767616271972656, 'l1_loss': 176.55572509765625, 'l2_loss': 56.70525360107422, 'ortho_loss': 0.0006580608896911144}
Step 3270: {'loss': 64.2547607421875, 'l1_loss': 173.07151794433594, 'l2_loss': 57.331756591796875, 'ortho_loss': 0.000711449421942234}
Step 3280: {'loss': 64.17190551757812, 'l1_loss': 176.47088623046875, 'l2_loss': 57.11292266845703, 'ortho_loss': 0.0007349129882641137}
Step 3290: {'loss': 63.81977081298828, 'l1_loss': 174.13092041015625, 'l2_loss': 56.854373931884766, 'ortho_loss': 0.0007975414046086371}
Step 3300: {'loss': 64.41299438476562, 'l1_loss': 173.84605407714844, 'l2_loss': 57.4589958190918, 'ortho_loss': 0.0007732867379672825}
Step 3310: {'loss': 63.5878791809082, 'l1_loss': 170.59649658203125, 'l2_loss': 56.76387023925781, 'ortho_loss': 0.0007424299255944788}
Step 3320: {'loss': 63.991390228271484, 'l1_loss': 173.24197387695312, 'l2_loss': 57.06156921386719, 'ortho_loss': 0.0007119610090740025}
Step 3330: {'loss': 63.89642333984375, 'l1_loss': 172.29867553710938, 'l2_loss': 57.004337310791016, 'ortho_loss': 0.0006936506251804531}
Step 3340: {'loss': 64.70649719238281, 'l1_loss': 180.96298217773438, 'l2_loss': 57.46784591674805, 'ortho_loss': 0.0006670260918326676}
Step 3350: {'loss': 63.995140075683594, 'l1_loss': 174.9434356689453, 'l2_loss': 56.99723815917969, 'ortho_loss': 0.0008213231340050697}
Step 3360: {'loss': 63.591365814208984, 'l1_loss': 177.17855834960938, 'l2_loss': 56.50408935546875, 'ortho_loss': 0.0006732400506734848}
Step 3370: {'loss': 63.785423278808594, 'l1_loss': 172.43252563476562, 'l2_loss': 56.88795471191406, 'ortho_loss': 0.000832617050036788}
Step 3380: {'loss': 64.52362060546875, 'l1_loss': 170.16885375976562, 'l2_loss': 57.7166862487793, 'ortho_loss': 0.0009070672676898539}
Step 3390: {'loss': 64.2907943725586, 'l1_loss': 173.28350830078125, 'l2_loss': 57.35927200317383, 'ortho_loss': 0.0009108184603974223}
Step 3400: {'loss': 63.800384521484375, 'l1_loss': 181.92654418945312, 'l2_loss': 56.52313995361328, 'ortho_loss': 0.0009196561295539141}
Step 3410: {'loss': 64.4019775390625, 'l1_loss': 177.85458374023438, 'l2_loss': 57.28759002685547, 'ortho_loss': 0.001046567689627409}
Step 3420: {'loss': 64.01123046875, 'l1_loss': 179.25689697265625, 'l2_loss': 56.840797424316406, 'ortho_loss': 0.0007936182664707303}
Step 3430: {'loss': 64.248779296875, 'l1_loss': 177.63043212890625, 'l2_loss': 57.143402099609375, 'ortho_loss': 0.0008084644214250147}
Step 3440: {'loss': 64.40184020996094, 'l1_loss': 175.6685028076172, 'l2_loss': 57.374935150146484, 'ortho_loss': 0.0008308503311127424}
Step 3450: {'loss': 63.27427291870117, 'l1_loss': 178.69137573242188, 'l2_loss': 56.12649917602539, 'ortho_loss': 0.000589602452237159}
Step 3460: {'loss': 63.6919059753418, 'l1_loss': 179.89317321777344, 'l2_loss': 56.496002197265625, 'ortho_loss': 0.0008708913228474557}
Step 3470: {'loss': 63.215782165527344, 'l1_loss': 178.58123779296875, 'l2_loss': 56.0723876953125, 'ortho_loss': 0.0007271153735928237}
Step 3480: {'loss': 63.69619369506836, 'l1_loss': 174.35235595703125, 'l2_loss': 56.721927642822266, 'ortho_loss': 0.0008519035181961954}
Step 3490: {'loss': 63.944602966308594, 'l1_loss': 182.38156127929688, 'l2_loss': 56.64910888671875, 'ortho_loss': 0.001158784725703299}
Step 3500: {'loss': 62.966426849365234, 'l1_loss': 174.23587036132812, 'l2_loss': 55.99685287475586, 'ortho_loss': 0.000712070323061198}
Step 3510: {'loss': 63.654685974121094, 'l1_loss': 178.594970703125, 'l2_loss': 56.510738372802734, 'ortho_loss': 0.0007375414716079831}
Step 3520: {'loss': 63.84228515625, 'l1_loss': 178.90362548828125, 'l2_loss': 56.685977935791016, 'ortho_loss': 0.0008102832944132388}
Step 3530: {'loss': 63.901973724365234, 'l1_loss': 176.74447631835938, 'l2_loss': 56.83203125, 'ortho_loss': 0.0008132793591357768}
Step 3540: {'loss': 63.8420524597168, 'l1_loss': 175.72242736816406, 'l2_loss': 56.813018798828125, 'ortho_loss': 0.0006874137907288969}
Step 3550: {'loss': 63.878902435302734, 'l1_loss': 175.28526306152344, 'l2_loss': 56.867347717285156, 'ortho_loss': 0.0007167051080614328}
Step 3560: {'loss': 63.85017013549805, 'l1_loss': 178.31005859375, 'l2_loss': 56.71759033203125, 'ortho_loss': 0.0008945809677243233}
Step 3570: {'loss': 64.08451843261719, 'l1_loss': 176.56948852539062, 'l2_loss': 57.021522521972656, 'ortho_loss': 0.0010541348019614816}
Step 3580: {'loss': 63.92983627319336, 'l1_loss': 175.58367919921875, 'l2_loss': 56.906314849853516, 'ortho_loss': 0.0008716866141185164}
Step 3590: {'loss': 63.91309356689453, 'l1_loss': 181.5689697265625, 'l2_loss': 56.65018844604492, 'ortho_loss': 0.0007187178707681596}
Step 3600: {'loss': 63.96508026123047, 'l1_loss': 181.46917724609375, 'l2_loss': 56.7061767578125, 'ortho_loss': 0.0006838304689154029}
Step 3610: {'loss': 63.442195892333984, 'l1_loss': 178.84962463378906, 'l2_loss': 56.28797912597656, 'ortho_loss': 0.0011662987526506186}
Step 3620: {'loss': 63.05949020385742, 'l1_loss': 179.93878173828125, 'l2_loss': 55.86177444458008, 'ortho_loss': 0.0008292446727864444}
Step 3630: {'loss': 63.282283782958984, 'l1_loss': 178.37823486328125, 'l2_loss': 56.147010803222656, 'ortho_loss': 0.0007288394845090806}
Step 3640: {'loss': 63.23929214477539, 'l1_loss': 181.3958740234375, 'l2_loss': 55.983299255371094, 'ortho_loss': 0.0007830578251741827}
Step 3650: {'loss': 63.662288665771484, 'l1_loss': 181.39088439941406, 'l2_loss': 56.40641784667969, 'ortho_loss': 0.0011810798896476626}
Step 3660: {'loss': 63.74930953979492, 'l1_loss': 179.79910278320312, 'l2_loss': 56.55718231201172, 'ortho_loss': 0.0008239202434197068}
Step 3670: {'loss': 63.11724090576172, 'l1_loss': 179.6702880859375, 'l2_loss': 55.93022155761719, 'ortho_loss': 0.0010312286904081702}
Step 3680: {'loss': 63.356231689453125, 'l1_loss': 181.64837646484375, 'l2_loss': 56.090087890625, 'ortho_loss': 0.0010517508490011096}
Step 3690: {'loss': 63.43960189819336, 'l1_loss': 180.33889770507812, 'l2_loss': 56.22583770751953, 'ortho_loss': 0.0010404117638245225}
Step 3700: {'loss': 63.71462631225586, 'l1_loss': 178.49594116210938, 'l2_loss': 56.574623107910156, 'ortho_loss': 0.0008294970029965043}
Step 3710: {'loss': 62.853824615478516, 'l1_loss': 177.7620391845703, 'l2_loss': 55.74313735961914, 'ortho_loss': 0.001036152825690806}
Step 3720: {'loss': 63.71725845336914, 'l1_loss': 183.96786499023438, 'l2_loss': 56.35838317871094, 'ortho_loss': 0.0007918927585706115}
Step 3730: {'loss': 64.35283660888672, 'l1_loss': 181.72552490234375, 'l2_loss': 57.08363342285156, 'ortho_loss': 0.0009150775731541216}
Step 3740: {'loss': 63.0242805480957, 'l1_loss': 175.0360565185547, 'l2_loss': 56.02265930175781, 'ortho_loss': 0.0008936555241234601}
Step 3750: {'loss': 62.77044677734375, 'l1_loss': 175.40769958496094, 'l2_loss': 55.75395965576172, 'ortho_loss': 0.00089785095769912}
Step 3760: {'loss': 63.29667663574219, 'l1_loss': 179.31019592285156, 'l2_loss': 56.12409591674805, 'ortho_loss': 0.0008492567576467991}
Step 3770: {'loss': 64.40834045410156, 'l1_loss': 180.25387573242188, 'l2_loss': 57.198036193847656, 'ortho_loss': 0.000772377010434866}
Step 3780: {'loss': 63.739654541015625, 'l1_loss': 177.0817413330078, 'l2_loss': 56.656227111816406, 'ortho_loss': 0.0007796626887284219}
Step 3790: {'loss': 63.75358200073242, 'l1_loss': 186.99346923828125, 'l2_loss': 56.27366256713867, 'ortho_loss': 0.0009014158276841044}
Step 3800: {'loss': 63.16774368286133, 'l1_loss': 181.70298767089844, 'l2_loss': 55.899444580078125, 'ortho_loss': 0.0008955656667239964}
Step 3810: {'loss': 64.09027862548828, 'l1_loss': 181.73782348632812, 'l2_loss': 56.82059097290039, 'ortho_loss': 0.0008607238414697349}
Step 3820: {'loss': 63.969600677490234, 'l1_loss': 185.12413024902344, 'l2_loss': 56.56446838378906, 'ortho_loss': 0.0008418334182351828}
Step 3830: {'loss': 63.64362716674805, 'l1_loss': 176.65213012695312, 'l2_loss': 56.57733917236328, 'ortho_loss': 0.0010087344562634826}
Step 3840: {'loss': 63.05681610107422, 'l1_loss': 182.3430938720703, 'l2_loss': 55.76291275024414, 'ortho_loss': 0.0008947703754529357}
Step 3850: {'loss': 63.01494216918945, 'l1_loss': 176.8226318359375, 'l2_loss': 55.94181823730469, 'ortho_loss': 0.0010861163027584553}
Step 3860: {'loss': 63.63779830932617, 'l1_loss': 182.72988891601562, 'l2_loss': 56.32843780517578, 'ortho_loss': 0.0008248875965364277}
Step 3870: {'loss': 63.26393127441406, 'l1_loss': 184.06689453125, 'l2_loss': 55.90106964111328, 'ortho_loss': 0.0009322697296738625}
Step 3880: {'loss': 62.599849700927734, 'l1_loss': 182.6305694580078, 'l2_loss': 55.294456481933594, 'ortho_loss': 0.0008670716779306531}
Step 3890: {'loss': 63.694183349609375, 'l1_loss': 177.7960205078125, 'l2_loss': 56.5821533203125, 'ortho_loss': 0.0009572211420163512}
Step 3900: {'loss': 62.6331787109375, 'l1_loss': 180.00172424316406, 'l2_loss': 55.43292236328125, 'ortho_loss': 0.0009407079196535051}
Step 3910: {'loss': 63.38048553466797, 'l1_loss': 180.22525024414062, 'l2_loss': 56.17129135131836, 'ortho_loss': 0.0009137946180999279}
Step 3920: {'loss': 62.95455551147461, 'l1_loss': 186.48214721679688, 'l2_loss': 55.49507522583008, 'ortho_loss': 0.0009686093544587493}
Step 3930: {'loss': 63.43494415283203, 'l1_loss': 178.76498413085938, 'l2_loss': 56.284149169921875, 'ortho_loss': 0.0009731409372761846}
Step 3940: {'loss': 63.439205169677734, 'l1_loss': 180.5653076171875, 'l2_loss': 56.216426849365234, 'ortho_loss': 0.0008227202924899757}
Step 3950: {'loss': 63.049007415771484, 'l1_loss': 177.8306884765625, 'l2_loss': 55.93559265136719, 'ortho_loss': 0.0009416640968993306}
Step 3960: {'loss': 63.27206039428711, 'l1_loss': 184.22108459472656, 'l2_loss': 55.903038024902344, 'ortho_loss': 0.0008876995998434722}
Step 3970: {'loss': 63.980777740478516, 'l1_loss': 185.51524353027344, 'l2_loss': 56.55998992919922, 'ortho_loss': 0.0009050453663803637}
Step 3980: {'loss': 63.414398193359375, 'l1_loss': 182.00909423828125, 'l2_loss': 56.13382339477539, 'ortho_loss': 0.0010408906964585185}
Step 3990: {'loss': 63.17015838623047, 'l1_loss': 183.32101440429688, 'l2_loss': 55.83707809448242, 'ortho_loss': 0.0012053112732246518}
Step 4000: {'loss': 63.33390808105469, 'l1_loss': 176.5230712890625, 'l2_loss': 56.27280044555664, 'ortho_loss': 0.00090724544133991}
Step 4010: {'loss': 62.91765213012695, 'l1_loss': 182.51376342773438, 'l2_loss': 55.61689376831055, 'ortho_loss': 0.0010443259961903095}
Step 4020: {'loss': 62.51445770263672, 'l1_loss': 179.81900024414062, 'l2_loss': 55.321495056152344, 'ortho_loss': 0.0010179238161072135}
Step 4030: {'loss': 62.5583381652832, 'l1_loss': 179.5225372314453, 'l2_loss': 55.37724304199219, 'ortho_loss': 0.0009818206308409572}
Step 4040: {'loss': 63.271305084228516, 'l1_loss': 182.1817169189453, 'l2_loss': 55.98383712768555, 'ortho_loss': 0.0009851964423432946}
Step 4050: {'loss': 63.35408020019531, 'l1_loss': 176.82310485839844, 'l2_loss': 56.28094482421875, 'ortho_loss': 0.0010424192296341062}
Step 4060: {'loss': 63.668148040771484, 'l1_loss': 179.1547393798828, 'l2_loss': 56.5017204284668, 'ortho_loss': 0.0011990265920758247}
Step 4070: {'loss': 63.976463317871094, 'l1_loss': 185.3041229248047, 'l2_loss': 56.56409454345703, 'ortho_loss': 0.0010380534222349524}
Step 4080: {'loss': 62.81724548339844, 'l1_loss': 177.79148864746094, 'l2_loss': 55.70538330078125, 'ortho_loss': 0.0010087571572512388}
Step 4090: {'loss': 63.830047607421875, 'l1_loss': 180.12379455566406, 'l2_loss': 56.624900817871094, 'ortho_loss': 0.0009657666669227183}
Step 4100: {'loss': 62.267765045166016, 'l1_loss': 177.1649169921875, 'l2_loss': 55.180965423583984, 'ortho_loss': 0.001007394283078611}
Step 4110: {'loss': 63.06991195678711, 'l1_loss': 183.47970581054688, 'l2_loss': 55.73056411743164, 'ortho_loss': 0.0008066422306001186}
Step 4120: {'loss': 64.17274475097656, 'l1_loss': 184.81454467773438, 'l2_loss': 56.7799186706543, 'ortho_loss': 0.001210779999382794}
Step 4130: {'loss': 63.404048919677734, 'l1_loss': 182.7091064453125, 'l2_loss': 56.095436096191406, 'ortho_loss': 0.001247331383638084}
Step 4140: {'loss': 63.47073745727539, 'l1_loss': 183.33868408203125, 'l2_loss': 56.13701629638672, 'ortho_loss': 0.0008684975327923894}
Step 4150: {'loss': 63.05821990966797, 'l1_loss': 178.4150390625, 'l2_loss': 55.921382904052734, 'ortho_loss': 0.001182927400805056}
Step 4160: {'loss': 62.72020721435547, 'l1_loss': 185.53118896484375, 'l2_loss': 55.29876708984375, 'ortho_loss': 0.000962166057433933}
Step 4170: {'loss': 62.525917053222656, 'l1_loss': 183.14144897460938, 'l2_loss': 55.20006561279297, 'ortho_loss': 0.0009735716739669442}
Step 4180: {'loss': 62.332054138183594, 'l1_loss': 184.07432556152344, 'l2_loss': 54.968868255615234, 'ortho_loss': 0.0010642227716743946}
Step 4190: {'loss': 62.3061408996582, 'l1_loss': 185.90834045410156, 'l2_loss': 54.869598388671875, 'ortho_loss': 0.0010550068691372871}
Step 4200: {'loss': 62.91204833984375, 'l1_loss': 183.30337524414062, 'l2_loss': 55.57971954345703, 'ortho_loss': 0.000977629330009222}
Step 4210: {'loss': 63.313148498535156, 'l1_loss': 180.95001220703125, 'l2_loss': 56.074913024902344, 'ortho_loss': 0.001186390989460051}
Step 4220: {'loss': 62.78567123413086, 'l1_loss': 184.03733825683594, 'l2_loss': 55.42395782470703, 'ortho_loss': 0.0011152001097798347}
Step 4230: {'loss': 63.45413589477539, 'l1_loss': 182.3007354736328, 'l2_loss': 56.16188049316406, 'ortho_loss': 0.0011183290043845773}